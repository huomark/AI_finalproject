#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int val[] = {1, 10, 100, 1000, 10000};
 void solve() {
    std::string s;
    std::cin >> s;
        int n = s.size();
        std::vector dp(n + 1, std::array<int, 5>{});
    for (int i = 0; i < n; i++) {
        int x = s[i] - 'A';
        for (int j = 0; j < 5; j++) {
            dp[i + 1][j] = dp[i][std::max(x, j)] + (x < j ? -1 : 1) * val[x];
        }
    }
    int ans = -1E9;
    int mx = 0;
    int res = 0;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < 5; j++) {
            ans = std::max(ans, res + (j < mx ? -1 : 1) * val[j] + dp[i][std::max(mx, j)]);
        }
        int x = s[i] - 'A';
        if (x < mx) {
            res -= val[x];
        } else {
            res += val[x];
            mx = x;
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}