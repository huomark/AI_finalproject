#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int dx[] = {0, 0, -1, 1, -1, -1, 1, 1};
constexpr int dy[] = {-1, 1, 0, 0, -1, 1, -1, 1};
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<std::string> s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
    }
        int ans = 0;
        std::vector vis(n, std::vector<bool>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (!vis[i][j] && s[i][j] == '1') {
                std::queue<std::pair<int, int>> q;
                q.emplace(i, j);
                vis[i][j] = true;
                                int minx = i, maxx = i;
                int miny = j, maxy = j;
                                int cnt = 0;
                                while (!q.empty()) {
                    auto [x, y] = q.front();
                    q.pop();
                                        minx = std::min(minx, x);
                    maxx = std::max(maxx, x);
                    miny = std::min(miny, y);
                    maxy = std::max(maxy, y);
                    cnt += 1;
                                        for (int k = 0; k < 8; k++) {
                        int nx = x + dx[k];
                        int ny = y + dy[k];
                                                if (0 <= nx && nx < n && 0 <= ny && ny < m && s[nx][ny] == '1'
                                && !vis[nx][ny]) {
                            vis[nx][ny] = true;
                            q.emplace(nx, ny);
                        }
                    }
                }
                                if ([&]() {
                    if (maxx - minx != maxy - miny) {
                        return false;
                    }
                    if (maxx == minx) {
                        return false;
                    }
                    if (cnt != 4 * (maxx - minx)) {
                        return false;
                    }
                    for (int x = minx; x <= maxx; x++) {
                        if (s[x][miny] != '1') {
                            return false;
                        }
                        if (s[x][maxy] != '1') {
                            return false;
                        }
                    }
                    for (int y = miny; y <= maxy; y++) {
                        if (s[minx][y] != '1') {
                            return false;
                        }
                        if (s[maxx][y] != '1') {
                            return false;
                        }
                    }
                    return true;
                }()) {
                    ans += 1;
                }
                                if ([&]() {
                    if (maxx - minx != maxy - miny) {
                        return false;
                    }
                    if (maxx == minx) {
                        return false;
                    }
                    if ((maxx - minx) % 2 != 0) {
                        return false;
                    }
                    if (cnt != 2 * (maxx - minx)) {
                        return false;
                    }
                    int d = (maxx - minx) / 2;
                    for (int i = 0; i <= d; i++) {
                        if (s[minx + i][miny + d - i] != '1') {
                            return false;
                        }
                        if (s[minx + i][maxy - d + i] != '1') {
                            return false;
                        }
                        if (s[maxx - i][miny + d - i] != '1') {
                            return false;
                        }
                        if (s[maxx - i][maxy - d + i] != '1') {
                            return false;
                        }
                    }
                    return true;
                }()) {
                    ans += 1;
                }
            }
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}