#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
    }
        if (std::is_sorted(p.begin(), p.end())) {
        std::cout << 1LL * (2 * n) * (2 * n + 1) / 2 << "\n";
        return;
    }
        i64 ans = 1LL * (2 * n) * (2 * n - 1) / 2;
    int r = n + 1;
    while (p[r - 2] == r - 1) {
        r--;
    }
    ans -= 1LL * (r - 1) * (r - 2) / 2;
    int l = n + 1;
    while (p[l - n - 1] == l - n) {
        l++;
    }
    ans -= 1LL * (2 * n - l) * (2 * n - l - 1) / 2;
        int need = 0;
    for (int i = 0; i < n; i++) {
        if (p[i] != i + 1) {
            int v = p[i] + p[p[i] - 1];
            if (p[p[i] - 1] != i + 1) {
                need = -1;
                break;
            }
            if (need > 0 && need != v) {
                need = -1;
                break;
            }
            need = v;
        }
    }
    if (need > 0) {
        ans++;
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}