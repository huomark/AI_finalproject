#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::vector<std::pair<int, int>>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v, t;
        std::cin >> u >> v >> t;
        u--, v--;
        adj[u].emplace_back(v, t);
        adj[v].emplace_back(u, -t);
    }
        std::vector<int> h(n);
    auto dfs = [&](auto self, int x, int p) -> void {
        for (auto [y, t] : adj[x]) {
            if (p == y) {
                continue;
            }
            h[y] = h[x] + t;
            self(self, y, x);
        }
    };
    dfs(dfs, 0, -1);
        int r = std::min_element(h.begin(), h.end()) - h.begin();
        auto dfs1 = [&](auto self, int x, int p) -> void {
        for (auto [y, t] : adj[x]) {
            if (p == y) {
                continue;
            }
            if (t == 0) {
                t = 1;
            }
            h[y] = h[x] + t;
            self(self, y, x);
        }
    };
    h[r] = 0;
    dfs1(dfs1, r, -1);
        int ans = 0;
    std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return h[i] > h[j];
        });
    std::vector<std::array<int, 3>> edges;
    DSU dsu(n);
    for (int l = 0, r = 0; l < n; l = r) {
        while (r < n && h[p[l]] == h[p[r]]) {
            r++;
        }
        std::map<int, int> f;
        for (int i = l; i < r; i++) {
            int x = p[i];
            for (auto [y, t] : adj[x]) {
                if (h[y] < h[x]) {
                    continue;
                }
                int z = dsu.find(y);
                if (!f.count(z)) {
                    f[z] = ++ans;
                }
                edges.push_back({x + 1, y + 1, f[z]});
            }
        }
        for (int i = l; i < r; i++) {
            int x = p[i];
            for (auto [y, t] : adj[x]) {
                if (h[y] < h[x]) {
                    continue;
                }
                dsu.merge(y, x);
            }
        }
    }
    std::cout << ans << "\n";
    for (auto [x, y, z] : edges) {
        std::cout << x << " " << y << " " << z << "\n";
    }
        return 0;
}