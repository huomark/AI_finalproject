#include <bits/stdc++.h>
 using i64 = long long;
 template<class T>
constexpr T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 template<int P>
struct MInt {
    int x;
    constexpr MInt() : x{} {}
    constexpr MInt(i64 x) : x{norm(x % P)} {}
        constexpr int norm(int x) const {
        if (x < 0) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
    constexpr int val() const {
        return x;
    }
    explicit constexpr operator int() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(P - x);
        return res;
    }
    constexpr MInt inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    constexpr MInt &operator*=(MInt rhs) {
        x = 1LL * x * rhs.x % P;
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<int V, int P>
constexpr MInt<P> CInv = MInt<P>(V).inv();
 constexpr int P = 998244353;
using Z = MInt<P>;
 constexpr int inf = 1E9;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::array<int, 2>> op(n);
    for (int i = 0; i < n; i++) {
        int t;
        std::cin >> t;
                if (t == 1) {
            int x;
            std::cin >> x;
            op[i] = {t, x};
        } else if (t == 2) {
            int x;
            std::cin >> x;
            op[i] = {t, x};
        } else {
            op[i] = {t};
        }
    }
        std::vector<int> pre(n + 1);
    for (int i = 0; i < n; i++) {
        if (op[i][0] == 2) {
            pre[i + 1] = std::min(inf, pre[i] + op[i][1]);
        } else if (op[i][0] == 3) {
            pre[i + 1] = std::min(inf, pre[i] * 2);
        } else {
            pre[i + 1] = pre[i];
        }
    }
        int c0 = 0;
    std::vector<int> a;
        i64 sum = 0;
    for (int i = 0; i < n; i++) {
        if (op[i][0] == 3) {
            if (pre[i] == 0) {
                c0++;
            } else {
                a.push_back(i);
            }
        } else if (op[i][0] == 2) {
            sum += op[i][1];
        }
    }
        Z ans = 0;
        for (int i = 0; i < n; i++) {
        if (op[i][0] == 3) {
            c0 -= (pre[i] == 0);
        } else if (op[i][0] == 2) {
            sum -= op[i][1];
        } else {
            int x = op[i][1];
            if (sum >= x) {
                continue;
            }
                        x -= sum;
                        int j = std::lower_bound(a.begin(), a.end(), x, [&](int i, int x) {
                return pre[i] < x;
            }) - a.begin() - 1;
                        Z res = 0;
            int v = x;
            while (j >= 0 && a[j] > i) {
                res *= 2;
                if (pre[a[j]] < v) {
                    res += 1;
                    v -= pre[a[j]];
                }
                j--;
            }
            res += 1;
            res *= power(Z(2), c0);
            ans += res;
        }
    }
        std::cout << ans << "\n";
        return 0;
}