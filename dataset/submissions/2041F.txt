#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 void solve() {
    i64 L, R;
    std::cin >> L >> R;
        L *= 2;
    R *= 2;
        std::vector<bool> isprime(R - L + 1, true);
        for (auto p : primes) {
        if (p * p > R) {
            break;
        }
        for (i64 i = std::max(1LL * p * p, (L + p - 1) / p * p); i <= R; i += p) {
            isprime[i - L] = false;
        }
    }
        i64 len = R + 1;
    int ways = 0;
        std::vector<i64> left(R - L + 1, L - 1), right(R - L + 1, R + 1);
    for (i64 i = L; i <= R; i++) {
        if (i > L) {
            left[i - L] = left[i - L - 1];
        }
        if (isprime[i - L]) {
            left[i - L] = i;
        }
    }
    for (i64 i = R; i >= L; i--) {
        if (i < R) {
            right[i - L] = right[i - L + 1];
        }
        if (isprime[i - L]) {
            right[i - L] = i;
        }
    }
        auto dfs = [&](this auto &&self, i64 l, i64 r) -> void {
        if (r - l < len) {
            len = r - l;
            ways = 1;
        } else if (r - l == len) {
            ways++;
        }
        i64 x = left[(l + r) / 2 - L];
        if (x > l) {
            self(x, r);
        }
        x = right[(l + r + 1) / 2 - L];
        if (x < r) {
            self(l, x);
        }
    };
    dfs(L, R);
        std::cout << ways << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(2E6);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}