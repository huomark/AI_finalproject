#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<std::array<int, 3>> edges(m);
    for (int i = 0; i < m; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        u--, v--;
        edges[i] = {w, u, v};
    }
    std::sort(edges.begin(), edges.end(), std::greater());
        int ans = 1E9;
    DSU dsu(n);
    int U, V;
    std::vector<std::vector<int>> adj(n);
    for (auto [w, u, v] : edges) {
        if (!dsu.merge(u, v)) {
            ans = w;
            U = u;
            V = v;
        } else {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }
        std::vector<int> path;
    auto dfs = [&](auto self, int x, int p) -> bool {
        if (x == V) {
            path.push_back(x);
            return true;
        }
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            if (self(self, y, x)) {
                path.push_back(x);
                return true;
            }
        }
        return false;
    };
    dfs(dfs, U, -1);
        std::cout << ans << " " << path.size() << "\n";
    for (auto x : path) {
        std::cout << x + 1 << " \n"[x == path.back()];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}