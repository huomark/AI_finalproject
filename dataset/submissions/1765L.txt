#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m, k;
    std::cin >> n >> m >> k;
        std::map<std::string, int> daynum;
    daynum["Monday"] = 0;
    daynum["Tuesday"] = 1;
    daynum["Wednesday"] = 2;
    daynum["Thursday"] = 3;
    daynum["Friday"] = 4;
    daynum["Saturday"] = 5;
    daynum["Sunday"] = 6;
        std::vector<std::array<bool, 7>> work(n);
    for (int i = 0; i < n; i++) {
        int t;
        std::cin >> t;
        for (int j = 0; j < t; j++) {
            std::string s;
            std::cin >> s;
            work[i][daynum[s]] = true;
        }
    }
        std::vector<int> h(m);
    for (int i = 0; i < m; i++) {
        std::cin >> h[i];
        h[i]--;
    }
        int curh = 0;
        std::vector<std::vector<int>> a(k);
    std::vector<std::priority_queue<int, std::vector<int>, std::greater<>>> works(n);
    std::vector<int> lastwork(n, -1);
    std::vector<int> havework[7];
    for (int i = 0; i < k; i++) {
        int p;
        std::cin >> p;
        a[i].resize(p);
        for (int j = 0; j < p; j++) {
            std::cin >> a[i][j];
            a[i][j]--;
        }
        works[a[i][0]].push(i);
        for (int j = 0; j < 7; j++) {
            if (work[a[i][0]][j]) {
                havework[j].push_back(a[i][0]);
            }
        }
    }
        std::vector<int> step(k);
        std::vector<int> ans(k);
        int complete = 0;
    for (int t = 0; complete < k; t++) {
        if (curh < m && h[curh] == t) {
            curh++;
            continue;
        }
        std::vector<int> done, nhave;
        for (auto i : havework[t % 7]) {
            if (lastwork[i] == t) {
                continue;
            }
            lastwork[i] = t;
                        if (works[i].empty()) {
                continue;
            }
                        int x = works[i].top();
            works[i].pop();
            done.push_back(x);
            nhave.push_back(i);
        }
        havework[t % 7] = nhave;
                for (auto x : done) {
            step[x]++;
            if (step[x] < a[x].size()) {
                int i = a[x][step[x]];
                works[i].push(x);
                for (int j = 0; j < 7; j++) {
                    if (work[i][j]) {
                        havework[j].push_back(i);
                    }
                }
            } else {
                ans[x] = t + 1;
                complete++;
            }
        }
    }
        for (int i = 0; i < k; i++) {
        std::cout << ans[i] << " \n"[i == k - 1];
    }
        return 0;
}