#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 constexpr int inf = 1E9;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> dp(k + 1, inf);
    dp[0] = 0;
    for (int i = 0; i < n; i++) {
        int a, b;
        std::cin >> a >> b;
                if (a > b) {
            std::swap(a, b);
        }
                for (int j = k; j >= 0; j--) {
            for (int u = 1; u <= a + b && j + u <= k; u++) {
                int x, y;
                if (u <= b - a) {
                    x = a;
                    y = b - u;
                } else {
                    x = (a + b - u) / 2;
                    y = a + b - u - x;
                }
                int res = dp[j] + a * b - x * y;
                dp[j + u] = std::min(dp[j + u], res);
            }
        }
    }
        int ans = dp[k];
    if (ans == inf) {
        ans = -1;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}