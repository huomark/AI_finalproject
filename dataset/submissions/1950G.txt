#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::string> g(n), w(n);
    for (int i = 0; i < n; i++) {
        std::cin >> g[i] >> w[i];
    }
        std::vector<int> e(n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (g[i] == g[j] || w[i] == w[j]) {
                e[i] |= 1 << j;
            }
        }
    }
        std::vector<int> dp(1 << n);
    for (int x = 0; x < n; x++) {
        dp[1 << x] |= 1 << x;
    }
        int ans = 0;
    for (int s = 1; s < (1 << n); s++) {
        if (dp[s]) {
            ans = std::max(ans, __builtin_popcount(s));
        }
        for (int y = 0; y < n; y++) {
            if ((~s >> y & 1) && (dp[s] & e[y])) {
                dp[s | 1 << y] |= 1 << y;
            }
        }
    }
    std::cout << n - ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}