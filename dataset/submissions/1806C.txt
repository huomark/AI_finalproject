#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(2 * n);
    for (int i = 0; i < 2 * n; i++) {
        std::cin >> p[i];
    }
        if (n == 1) {
        std::cout << std::abs(p[0] - p[1]) << "\n";
        return;
    }
        i64 ans = 0;
    for (int i = 0; i < 2 * n; i++) {
        ans += std::abs(p[i]);
    }
        if (n == 2) {
        i64 res = 0;
        for (int i = 0; i < 2 * n; i++) {
            res += std::abs(p[i] - 2);
        }
        ans = std::min(ans, res);
    }
    if (n % 2 == 0) {
        i64 res = 0;
        for (int i = 0; i < 2 * n; i++) {
            res += std::abs(p[i] + 1);
        }
        for (int i = 0; i < 2 * n; i++) {
            ans = std::min(ans, res - std::abs(p[i] + 1) + std::abs(p[i] - n));
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}