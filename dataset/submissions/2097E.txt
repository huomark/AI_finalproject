#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 struct Node {
    Node *ch[2], *p;
    bool rev;
    int val;
    int sum;
    Node() : ch{nullptr, nullptr}, p(nullptr), rev(false), val(0), sum(0) {}
};
void reverse(Node *t) {
    if (t) {
        std::swap(t->ch[0], t->ch[1]);
        t->rev ^= 1;
    }
}
void push(Node *t) {
    if (t->rev) {
        reverse(t->ch[0]);
        reverse(t->ch[1]);
        t->rev = false;
    }
}
void pull(Node *t) {
    t->sum = (t->ch[0] ? t->ch[0]->sum : 0) + t->val + (t->ch[1] ? t->ch[1]->sum : 0);
}
bool isroot(Node *t) {
    return t->p == nullptr || (t->p->ch[0] != t && t->p->ch[1] != t);
}
int pos(Node *t) {
    return t->p->ch[1] == t;
}
void pushAll(Node *t) {
    if (!isroot(t)) {
        pushAll(t->p);
    }
    push(t);
}
void rotate(Node *t) {
    Node *q = t->p;
    int x = !pos(t);
    q->ch[!x] = t->ch[x];
    if (t->ch[x]) {
        t->ch[x]->p = q;
    }
    t->p = q->p;
    if (!isroot(q)) {
        q->p->ch[pos(q)] = t;
    }
    t->ch[x] = q;
    q->p = t;
    pull(q);
}
void splay(Node *t) {
    pushAll(t);
    while (!isroot(t)) {
        if (!isroot(t->p)) {
            if (pos(t) == pos(t->p)) {
                rotate(t->p);
            } else {
                rotate(t);
            }
        }
        rotate(t);
    }
    pull(t);
}
void access(Node *t) {
    for (Node *i = t, *q = nullptr; i; q = i, i = i->p) {
        splay(i);
        i->ch[1] = q;
        pull(i);
    }
    splay(t);
}
void makeroot(Node *t) {
    access(t);
    reverse(t);
}
void link(Node *x, Node *y) {
    makeroot(x);
    x->p = y;
}
void split(Node *x, Node *y) {
    makeroot(x);
    access(y);
}
// void cut(Node *x, Node *y) {
//     split(x, y);
//     x->p = y->ch[0] = nullptr;
//     pull(y);
// }
 void cut(Node *x) {
    access(x);
    assert(x->ch[0]);
    x->ch[0]->p = nullptr;
    x->ch[0] = nullptr;
    pull(x);
}
 void solve() {
    int n, d;
    std::cin >> n >> d;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<Node *> nodes(n + 1);
    for (int i = 0; i <= n; i++) {
        nodes[i] = new Node();
    }
    for (int i = 0; i < n; i++) {
        nodes[i]->p = nodes[i + 1];
    }
        i64 ans = 0;
    std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return a[i] > a[j];
        });
        int lst = 1E9;
    int cur = 0;
    for (auto i : p) {
        ans += 1LL * cur * (lst - a[i]);
        lst = a[i];
        cut(nodes[i]);
        nodes[i]->val = 1;
        pull(nodes[i]);
        nodes[i]->p = nodes[std::min(n, i + d)];
        access(nodes[0]);
        cur = nodes[0]->sum;
    }
    ans += 1LL * cur * lst;
    std::cout << ans << "\n";
        for (int i = 0; i <= n; i++) {
        delete nodes[i];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}