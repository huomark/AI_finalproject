#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        i64 fac = 1;
    for (int i = 1; i <= n && fac < k + 10; i++) {
        fac *= i;
    }
        if (fac < k) {
        std::cout << "NO\n";
        return;
    }
        if (n == 1) {
        std::cout << "YES\n";
        std::cout << 1 << "\n";
        return;
    }
        if (k == 1 || k == fac - 1) {
        std::cout << "NO\n";
        return;
    }
        std::vector<std::vector<int>> ans, manual;
    if (k % 2 == 1) {
        if (n % 2 == 0) {
            std::cout << "NO\n";
            return;
        }
        std::vector<int> p(n), q(n), r(n);
        std::iota(p.begin(), p.end(), 1);
        int h = n / 2;
        for (int i = 0; i <= h; i++) {
            q[2 * i] = i + 1;
            r[2 * i] = i + 1 + h;
        }
        for (int i = 0; i < h; i++) {
            q[2 * i + 1] = i + 1 + h + 1;
            r[2 * i + 1] = i + 1;
        }
        std::reverse(q.begin(), q.end());
        std::reverse(r.begin(), r.end());
        manual.push_back(p);
        manual.push_back(q);
        manual.push_back(r);
        for (int i = 0; i < n; i++) {
            assert(p[i] + q[i] + r[i] == p[0] + q[0] + r[0]);
        }
                ans = manual;
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 1);
    while (ans.size() < k) {
        auto q = p;
        for (auto &x : q) {
            x = n + 1 - x;
        }
        if (std::find(manual.begin(), manual.end(), p) == manual.end() && std::find(manual.begin(), manual.end(), q) == manual.end()) {
            ans.push_back(p);
            ans.push_back(q);
        }
        std::next_permutation(p.begin(), p.end());
    }
        std::cout << "YES\n";
    for (auto p : ans) {
        for (int i = 0; i < n; i++) {
            std::cout << p[i] << " \n"[i == n - 1];
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}