#include <bits/stdc++.h>
 using i64 = long long;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F &&pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F &&pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 1E9 + 1;
struct Info {
    int max = -inf;
    int min = inf;
};
Info operator+(const Info &a, const Info &b) {
    return { std::max(a.max, b.max), std::min(a.min, b.min) };
}
void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::set<int> s;
    for (int i = 0; i < n - 1; i++) {
        if (a[i] > a[i + 1]) {
            s.insert(i);
        }
    }
        SegmentTree<Info> seg(n);
    for (int i = 0; i < n; i++) {
        seg.modify(i, {a[i], a[i]});
    }
        auto query = [&]() {
        if (s.empty()) {
            std::cout << -1 << " " << -1 << "\n";
            return;
        }
                int l = *s.begin() + 1;
        int suf = seg.rangeQuery(l, n).min;
        l = seg.findFirst(0, n,
            [&](auto f) {
                return f.max > suf;
            });
        int r = *s.rbegin() + 1;
        int pre = seg.rangeQuery(0, r).max;
        r = seg.findLast(0, n,
            [&](auto f) {
                return f.min < pre;
            }) + 1;
        std::cout << l + 1 << " " << r << "\n";
    };
        query();
        int q;
    std::cin >> q;
        while (q--) {
        int x, y;
        std::cin >> x >> y;
        x--;
        s.erase(x - 1);
        s.erase(x);
                a[x] = y;
        if (x > 0 && a[x - 1] > a[x]) {
            s.insert(x - 1);
        }
        if (x + 1 < n && a[x] > a[x + 1]) {
            s.insert(x);
        }
        seg.modify(x, {y, y});
                query();
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}