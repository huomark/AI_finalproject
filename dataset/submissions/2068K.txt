#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 constexpr int N = 2000;
using B = std::bitset<N>;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    std::vector<std::array<i64, 2>> cand;
    cand.reserve(n * n);
    for (int i = 0; i < n; i++) {
        for (int x = 1; x <= n; x++) {
            cand.push_back({1LL * x * a[i], i});
        }
    }
    std::sort(cand.begin(), cand.end());
    i64 ans = 0;
    int match = 0;
        B vis {};
    std::vector<B> adj;
        std::vector<int> yx(n, -1);
    auto dfs = [&](this auto &&self, int x) -> bool {
        auto tmp = adj[x] & ~vis;
        for (int y = tmp._Find_first(); y < n; y = tmp._Find_next(y)) {
            if (vis[y]) {
                continue;
            }
            vis.set(y);
            if (yx[y] == -1 || self(yx[y])) {
                yx[y] = x;
                return true;
            }
        }
        return false;
    };
    for (int l = 0, r = 0; l < cand.size() && match < n; l = r) {
        while (r < cand.size() && cand[l][0] == cand[r][0]) {
            r++;
        }
        ans = cand[l][0];
        B b {};
        for (int i = l; i < r; i++) {
            b.set(cand[i][1]);
        }
        adj.push_back(b);
        if (dfs(adj.size() - 1)) {
            match++;
            vis = 0;
        } else {
            adj.pop_back();
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}