#include <bits/stdc++.h>
 using i64 = long long;
struct SAM {
    static constexpr int ALPHABET_SIZE = 26;
    struct Node {
        int len;
        int link;
        std::array<int, ALPHABET_SIZE> next;
        Node() : len{}, link{}, next{} {}
    };
    std::vector<Node> t;
    SAM() {
        init();
    }
    void init() {
        t.assign(2, Node());
        t[0].next.fill(1);
        t[0].len = -1;
    }
    int newNode() {
        t.emplace_back();
        return t.size() - 1;
    }
    int extend(int p, int c) {
        if (t[p].next[c]) {
            int q = t[p].next[c];
            if (t[q].len == t[p].len + 1) {
                return q;
            }
            int r = newNode();
            t[r].len = t[p].len + 1;
            t[r].link = t[q].link;
            t[r].next = t[q].next;
            t[q].link = r;
            while (t[p].next[c] == q) {
                t[p].next[c] = r;
                p = t[p].link;
            }
            return r;
        }
        int cur = newNode();
        t[cur].len = t[p].len + 1;
        while (!t[p].next[c]) {
            t[p].next[c] = cur;
            p = t[p].link;
        }
        t[cur].link = extend(p, c);
        return cur;
    }
    int extend(int p, char c, char offset = 'a') {
        return extend(p, c - offset);
    }
        int next(int p, int x) {
        return t[p].next[x];
    }
        int next(int p, char c, char offset = 'a') {
        return next(p, c - 'a');
    }
        int link(int p) {
        return t[p].link;
    }
        int len(int p) {
        return t[p].len;
    }
        int size() {
        return t.size();
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::string s;
    std::cin >> s;
        SAM sam;
    int n = s.size();
        std::vector<int> p(n + 1);
    p[0] = 1;
    for (int i = 0; i < n; i++) {
        p[i + 1] = sam.extend(p[i], s[i]);
    }
        std::vector<int> freq(sam.size());
    for (int i = 1; i <= n; i++) {
        freq[p[i]]++;
    }
    std::vector<std::vector<int>> adj(sam.size());
    for (int i = 2; i < sam.size(); i++) {
        adj[sam.link(i)].push_back(i);
    }
    std::function<void(int)> dfs = [&](int x) {
        for (auto y : adj[x]) {
            dfs(y);
            freq[x] += freq[y];
        }
    };
    dfs(1);
        int q;
    std::cin >> q;
    while (q--) {
        std::string x;
        std::cin >> x;
                int m = x.size();
                std::vector<int> f(m + 1);
        for (int i = 1, j = 0; i < m; i++) {
            while (j && x[i] != x[j]) {
                j = f[j];
            }
            j += (x[i] == x[j]);
            f[i + 1] = j;
        }
        int T = m % (m - f[m]) ? m : m - f[m];
                i64 ans = 0;
        int p = 1, len = 0;
        for (auto c : x) {
            while (!sam.next(p, c)) {
                p = sam.link(p);
                len = sam.len(p);
            }
            p = sam.next(p, c);
            len++;
        }
        for (int i = 0; i < T; i++) {
            char c = x[i];
            while (!sam.next(p, c)) {
                p = sam.link(p);
                len = sam.len(p);
            }
            p = sam.next(p, c);
            len++;
            while (len > m) {
                len--;
                if (len <= sam.len(sam.link(p))) {
                    p = sam.link(p);
                }
            }
            if (len == m) {
                ans += freq[p];
            }
        }
                std::cout << ans << "\n";
    }
        return 0;
}