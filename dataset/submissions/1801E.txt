#include <bits/stdc++.h>
 using i64 = long long;
 template<class T>
constexpr T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 template<int P>
struct MInt {
    int x;
    constexpr MInt() : x{} {}
    constexpr MInt(i64 x) : x{norm(x % P)} {}
        constexpr int norm(int x) const {
        if (x < 0) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
    constexpr int val() const {
        return x;
    }
    explicit constexpr operator int() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(P - x);
        return res;
    }
    constexpr MInt inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    constexpr MInt &operator*=(MInt rhs) {
        x = 1LL * x * rhs.x % P;
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<int V, int P>
constexpr MInt<P> CInv = MInt<P>(V).inv();
 constexpr int P = 1000000007;
using Z = MInt<P>;
 constexpr i64 M = i64(1E18) + 9;
 struct Fenwick {
    int n;
    std::vector<i64> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, i64());
    }
        void add(int x, i64 v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
            if (a[i - 1] >= M) {
                a[i - 1] -= M;
            }
        }
    }
        i64 sum(int x) {
        auto ans = i64();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
            if (ans >= M) {
                ans -= M;
            }
        }
        return ans;
    }
        i64 rangeSum(int l, int r) {
        i64 res = sum(r) - sum(l);
        if (res < 0) {
            res += M;
        }
        return res;
    }
};
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedChild(int u, int v) {
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedChild(v, u)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
i64 mul(i64 a, i64 b) {
    i64 res = a * b - i64(1.L * a * b / M + .5L) * M;
    res %= M;
    if (res < 0) {
        res += M;
    }
    return res;
}
 i64 power(i64 a, i64 b) {
    i64 res = 1;
    for (; b; b /= 2, a = mul(a, a)) {
        if (b % 2) {
            res = mul(res, a);
        }
    }
    return res;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> p(n, -1);
    HLD t(n);
    for (int i = 1; i < n; i++) {
        std::cin >> p[i];
        p[i] -= 1;
        t.addEdge(p[i], i);
    }
    t.work();
    std::vector<int> l(n), r(n);
    for (int i = 0; i < n; i++) {
        std::cin >> l[i] >> r[i];
        l[i] -= 1;
    }
        std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
    const i64 B = 100000000 + rng() % 1000000000;
        std::vector<i64> pw(n + 1);
    pw[0] = 1;
    for (int i = 1; i <= n; i++) {
        pw[i] = mul(pw[i - 1], B);
    }
        auto inv = power(B, M - 2);
    std::vector<i64> invpw(n + 1);
    invpw[0] = 1;
    for (int i = 1; i <= n; i++) {
        invpw[i] = mul(invpw[i - 1], inv);
    }
        int m;
    std::cin >> m;
        std::vector<int> bel(n);
    std::vector<std::vector<int>> arr(n);
    Z ans = 1;
    for (int i = 0; i < n; i++) {
        bel[i] = i;
        arr[i] = {i};
        ans *= (r[i] - l[i]);
    }
        Fenwick f1(n), f2(n);
    for (int i = 0; i < n; i++) {
        f1.add(t.in[i], mul(bel[i], pw[t.in[i]]));
        f2.add(t.in[i], mul(bel[i], invpw[t.in[i]]));
    }
        auto getPath = [&](int a, int b) {
        std::vector<std::array<int, 3>> l, r;
        while (t.top[a] != t.top[b]) {
            if (t.dep[t.top[a]] > t.dep[t.top[b]]) {
                l.push_back({t.in[t.top[a]], t.in[a] + 1, 0});
                a = t.parent[t.top[a]];
            } else {
                r.push_back({t.in[t.top[b]], t.in[b] + 1, 1});
                b = t.parent[t.top[b]];
            }
        }
        if (t.dep[a] < t.dep[b]) {
            r.push_back({t.in[a], t.in[b] + 1, 1});
        } else {
            l.push_back({t.in[b], t.in[a] + 1, 0});
        }
        std::reverse(r.begin(), r.end());
        l.insert(l.end(), r.begin(), r.end());
        return l;
    };
        auto getHash = [&](int l, int r, int t, int len) {
        // std::cerr << "query " << l << " " << r << " " << t << " " << len << "\n";
        if (t == 0) {
            l = r - len;
            return mul(f1.rangeSum(l, r), invpw[l]);
        } else {
            r = l + len;
            return mul(f2.rangeSum(l, r), pw[r - 1]);
        }
    };
        auto merge = [&](int x, int y) {
        x = bel[x];
        y = bel[y];
        // std::cerr << "(" << x << ", " << y << ")\n";
        if (arr[x].size() < arr[y].size()) {
            std::swap(x, y);
        }
        for (auto i : arr[y]) {
            i64 dif = x - y;
            if (dif < 0) {
                dif += M;
            }
            f1.add(t.in[i], mul(dif, pw[t.in[i]]));
            f2.add(t.in[i], mul(dif, invpw[t.in[i]]));
            // f1.add(t.in[i], mul(x, pw[t.in[i]]));
            // f2.add(t.in[i], mul(x, invpw[t.in[i]]));
            // f1.add(t.in[i], mul(M - y, pw[t.in[i]]));
            // f2.add(t.in[i], mul(M - y, invpw[t.in[i]]));
            // std::cerr << i << " " << y << " => " << x << "\n";
            bel[i] = x;
        }
        if (l[x] < r[x]) {
            ans /= r[x] - l[x];
        }
        if (l[y] < r[y]) {
            ans /= r[y] - l[y];
        }
        l[x] = std::max(l[x], l[y]);
        r[x] = std::min(r[x], r[y]);
        ans *= std::max(0, r[x] - l[x]);
        arr[x].insert(arr[x].end(), arr[y].begin(), arr[y].end());
        arr[y].clear();
    };
        for (int i = 0; i < m; i++) {
        int a, b, c, d;
        std::cin >> a >> b >> c >> d;
        a--, b--, c--, d--;
                auto u = getPath(a, b);
        auto v = getPath(c, d);
                int x = 0, y = 0;
        while (x < u.size()) {
            int len = std::min(u[x][1] - u[x][0], v[y][1] - v[y][0]);
                        auto hu = getHash(u[x][0], u[x][1], u[x][2], len);
            auto hv = getHash(v[y][0], v[y][1], v[y][2], len);
            if (hu != hv) {
                // std::cerr << hu << " != " << hv << "\n";
                int lo = 0, hi = len - 1;
                while (lo < hi) {
                    int m = (lo + hi + 1) / 2;
                    auto hu = getHash(u[x][0], u[x][1], u[x][2], m);
                    auto hv = getHash(v[y][0], v[y][1], v[y][2], m);
                    if (hu == hv) {
                        lo = m;
                    } else {
                        hi = m - 1;
                    }
                }
                int idu, idv;
                if (u[x][2] == 0) {
                    idu = u[x][1] - lo - 1;
                } else {
                    idu = u[x][0] + lo;
                }
                if (v[y][2] == 0) {
                    idv = v[y][1] - lo - 1;
                } else {
                    idv = v[y][0] + lo;
                }
                // std::cerr << "(" << t.seq[idu] << ", " << t.seq[idv] << ")\n";
                merge(t.seq[idu], t.seq[idv]);
                len = lo;
            }
            if (u[x][2] == 0) {
                u[x][1] -= len;
            } else {
                u[x][0] += len;
            }
            if (v[y][2] == 0) {
                v[y][1] -= len;
            } else {
                v[y][0] += len;
            }
            x += (u[x][0] == u[x][1]);
            y += (v[y][0] == v[y][1]);
        }
                std::cout << ans << "\n";
    }
        return 0;
}