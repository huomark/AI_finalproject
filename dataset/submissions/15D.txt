#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m, a, b;
    std::cin >> n >> m >> a >> b;
        std::vector h(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> h[i][j];
        }
    }
        std::vector sum(n + 1, std::vector<i64>(m + 1));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + h[i][j];
        }
    }
        std::vector cost(n, std::vector<i64>(m - b + 1));
    for (int i = 0; i < n; i++) {
        std::deque<int> q;
        for (int j = 0; j < m; j++) {
            while (!q.empty() && h[i][j] < h[i][q.back()]) {
                q.pop_back();
            }
            q.push_back(j);
            while (j - q.front() > b - 1) {
                q.pop_front();
            }
            if (j >= b - 1) {
                cost[i][j - (b - 1)] = h[i][q.front()];
            }
        }
    }
    for (int i = 0; i < m - b + 1; i++) {
        std::deque<int> q;
        for (int j = 0; j < n; j++) {
            while (!q.empty() && cost[j][i] < cost[q.back()][i]) {
                q.pop_back();
            }
            q.push_back(j);
            while (j - q.front() > a - 1) {
                q.pop_front();
            }
            if (j >= a - 1) {
                cost[j - (a - 1)][i] = cost[q.front()][i];
            }
        }
    }
    cost.resize(n - a + 1);
        std::vector<std::tuple<i64, int, int>> q;
    q.reserve((n - a + 1) * (m - b + 1));
    for (int i = 0; i < n - a + 1; i++) {
        for (int j = 0; j < m - b + 1; j++) {
            cost[i][j] = sum[i + a][j + b] - sum[i + a][j] - sum[i][j + b] + sum[i][j] - cost[i][j] * a * b;
            q.emplace_back(cost[i][j], i, j);
        }
    }
    std::sort(q.begin(), q.end());
        std::vector<std::tuple<int, int, i64>> ans;
    ans.reserve((n - a + 1) * (m - b + 1));
    std::vector bad(n - a + 1, std::vector<bool>(m - b + 1));
    for (auto [v, x, y] : q) {
        if (bad[x][y]) {
            continue;
        }
        ans.emplace_back(x + 1, y + 1, v);
        int xl = std::max(0, x - a + 1);
        int yl = std::max(0, y - b + 1);
        int xr = std::min(n - a, x + a - 1);
        int yr = std::min(m - b, y + b - 1);
        for (int i = xl; i <= xr; i++) {
            for (int j = yl; j <= yr; j++) {
                bad[i][j] = true;
            }
        }
    }
        std::cout << ans.size() << "\n";
    for (auto [x, y, v] : ans) {
        std::cout << x << " " << y << " " << v << "\n";
    }
        return 0;
}