#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
struct DSU {
    std::vector<int> f, siz;
    DSU(int n) : f(n), siz(n, 1) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        while (x != f[x]) x = f[x] = f[f[x]];
        return x;
    }
    bool same(int x, int y) { return leader(x) == leader(y); }
    bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) return false;
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
    int size(int x) { return siz[leader(x)]; }
};
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i] += i;
    }
        int x = 0;
    i64 ans = 0;
        DSU dsu(n);
    std::vector<bool> vis(n);
    std::vector<int> b;
    while (0 <= x && x < n && !vis[x]) {
        b.push_back(x);
        vis[x] = true;
        x = a[x];
    }
        std::vector<bool> cyc(n);
    for (int i = 0; i < n; i++) {
        if (0 <= a[i] && a[i] < n && !vis[i]) {
            if (!dsu.merge(i, a[i])) {
                cyc[i] = true;
            }
        }
    }
    int sum = 0;
    for (int i = 0; i < n; i++) {
        if (cyc[i]) {
            sum += dsu.size(i);
        }
    }
        if (0 <= x && x < n) {
        for (int i = 0; i < n; i++) {
            if (0 <= a[i] && a[i] < n && vis[i]) {
                if (!dsu.merge(i, a[i])) {
                    cyc[i] = true;
                }
            }
        }
        sum += dsu.size(0);
        ans = 1LL * b.size() * sum;
        ans += 1LL * (n - b.size()) * (2 * n + 1);
    } else {
        for (auto x : b) {
            ans += sum + dsu.size(0);
            if (0 <= a[x] && a[x] < n) {
                dsu.merge(x, a[x]);
            }
        }
    }
        ans = 1LL * n * (2 * n + 1) - ans;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}