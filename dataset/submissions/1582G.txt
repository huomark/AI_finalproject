#include <bits/stdc++.h>
 using i64 = long long;
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 constexpr int V = 1E6;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    sieve(V);
        std::string b;
    std::cin >> b;
        i64 ans = 0;
    std::vector<std::vector<int>> stk(V + 1);
    std::vector<int> m(n);
    std::iota(m.begin(), m.end(), 0);
    for (int i = n - 1; i >= 0; i--) {
        int x = a[i];
        while (x > 1) {
            int p = minp[x];
            x /= p;
            if (b[i] == '/') {
                stk[p].push_back(i);
            } else if (!stk[p].empty()) {
                m[stk[p].back()] = std::min(m[stk[p].back()], i);
                stk[p].pop_back();
            }
        }
    }
    for (int p = 1; p <= V; p++) {
        for (auto i : stk[p]) {
            m[i] = -1;
        }
    }
        std::vector<int> s;
    for (int i = n - 1; i >= 0; i--) {
        while (!s.empty() && m[i] <= m[s.back()]) {
            s.pop_back();
        }
        if (m[i] == i) {
            ans += (s.empty() ? n : s.back()) - i;
        }
        s.push_back(i);
    }
        std::cout << ans << "\n";
        return 0;
}