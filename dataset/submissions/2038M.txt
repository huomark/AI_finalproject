#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 using F = long double;
 F ans[5] = {0, 3.5982905983, 8.0671713085, 12.4230759346, 16.6366423608};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::cout << std::fixed << std::setprecision(10);
        int n;
    std::cin >> n;
        std::cout << ans[n] << "\n";
    return 0;
        std::vector<int> s(2 * (n + 1));
    for (int i = 0; i < n; i++) {
        s[i] = 5;
    }
    s[n] = 8 * n;
        std::map<std::vector<int>, F> f;
    auto rec = [&](this auto &&self, const std::vector<int> &s) -> F {
        if (f.contains(s)) {
            return f[s];
        }
        F &res = f[s] = 0;
        int hand = 0;
        for (int i = n + 1; i < 2 * (n + 1); i++) {
            hand += s[i];
        }
        int deck = 0;
        for (int i = 0; i < n + 1; i++) {
            deck += s[i];
        }
        if (hand < 5) {
            if (deck == 0) {
                return res = INFINITY;
            }
            for (int i = 0; i < n + 1; i++) {
                if (s[i]) {
                    auto ns = s;
                    ns[i]--;
                    ns[i + n + 1]++;
                    res += self(ns) * s[i] / deck;
                }
            }
            return res;
        }
        for (int i = 0; i < n; i++) {
            if (s[n + 1 + i] == 5) {
                return res = 0;
            }
        }
        std::vector<int> discard(n + 1);
        res = INFINITY;
        auto dfs = [&](this auto &&dfs, int i) {
            if (i == n + 1) {
                auto ns = s;
                bool ok = false;
                for (int j = 0; j < n + 1; j++) {
                    if (discard[j]) {
                        ok = true;
                        ns[n + 1 + j] -= discard[j];
                    }
                }
                if (ok) {
                    res = std::min(res, F(1) + self(ns));
                }
                return;
            }
            for (int j = 0; j <= s[n + 1 + i]; j++) {
                discard[i] = j;
                dfs(i + 1);
            }
        };
        dfs(0);
        return res;
    };
        F ans = rec(s);
    std::cout << ans << "\n";
        return 0;
}