#include <bits/stdc++.h>
 using i64 = long long;
 std::mt19937 rng;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<std::pair<int, int>>> adj(n);
    std::vector<std::array<int, 3>> ver(m);
    std::vector f(m, std::array<int, 3>{});
    for (int i = 0; i < m; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        u--, v--, w--;
        // do {
        //     u = rng() % n;
        //     v = rng() % n;
        //     w = rng() % n;
        // } while (u == v || v == w || u == w);
        ver[i] = {u, v, w};
        adj[u].push_back({i, 0});
        adj[v].push_back({i, 1});
        adj[w].push_back({i, 2});
        std::array<int, 3> b{0, 1, 2};
        std::sort(b.begin(), b.end(), [&](int x, int y) {
            return ver[i][x] < ver[i][y];
        });
        for (int j = 0; j < 3; j++) {
            a[ver[i][b[j]]] += j + 3;
            f[i][b[j]] += j + 3;
        }
    }
        std::priority_queue<std::pair<int, int>> h;
    for (int i = 0; i < n; i++) {
        h.emplace(-a[i], i);
    }
        while (!h.empty()) {
        auto [v, x] = h.top();
        h.pop();
                if (a[x] != -v) {
            continue;
        }
                for (auto [j, t] : adj[x]) {
            int y = ver[j][(t + 1) % 3];
            int z = ver[j][(t + 2) % 3];
            if (a[x] == a[y] && a[x] == a[z]) {
                a[y] += 1;
                f[j][(t + 1) % 3] += 1;
                h.emplace(-a[y], y);
                a[z] += 1;
                f[j][(t + 2) % 3] += 1;
                h.emplace(-a[z], z);
            } else if (a[x] == a[y]) {
                a[y] += 2;
                f[j][(t + 1) % 3] += 2;
                h.emplace(-a[y], y);
            } else if (a[x] == a[z]) {
                a[z] += 2;
                f[j][(t + 2) % 3] += 2;
                h.emplace(-a[z], z);
            }
        }
    }
        for (int i = 0; i < m; i++) {
        auto [u, v, w] = ver[i];
        assert(a[u] != a[v]);
        assert(a[u] != a[w]);
        assert(a[v] != a[w]);
        int a = (f[i][0] + f[i][1] - f[i][2]) / 2;
        int b = (f[i][1] + f[i][2] - f[i][0]) / 2;
        int c = (f[i][2] + f[i][0] - f[i][1]) / 2;
        // std::cerr << f[i][0] << " " << f[i][1] << " " << f[i][2] << "\n";
        assert(1 <= a && a <= 4);
        assert(1 <= b && b <= 4);
        assert(1 <= c && c <= 4);
        std::cout << a << " " << b << " " << c << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}