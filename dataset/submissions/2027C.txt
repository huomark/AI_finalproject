#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::array<i64, 2>> e;
    for (int i = 0; i < n; i++) {
        i64 a;
        std::cin >> a;
                if (a + i >= n && i > 0) {
            e.push_back({a + i, a + i + i});
        }
    }
    std::sort(e.begin(), e.end(), std::greater());
    std::map<i64, i64> dp;
    dp[n] = n;
    for (auto [x, y] : e) {
        if (!dp.contains(x)) {
            dp[x] = x;
        }
        i64 &res = dp[x];
        dp[x] = std::max(dp[x], dp.contains(y) ? dp[y] : y);
    }
    std::cout << dp[n] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}