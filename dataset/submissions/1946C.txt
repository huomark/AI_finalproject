#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        auto check = [&](int x) {
        int res = 0;
        auto dfs = [&](auto self, int u, int p = -1) -> int {
            int ans = 1;
            for (auto v : adj[u]) {
                if (v == p) {
                    continue;
                }
                ans += self(self, v, u);
            }
            if (ans >= x) {
                res++;
                return 0;
            }
            return ans;
        };
        dfs(dfs, 0);
        return res > k;
    };
        int lo = 1, hi = n;
    while (lo < hi) {
        int x = (lo + hi + 1) / 2;
        if (check(x)) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
    std::cout << lo << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}