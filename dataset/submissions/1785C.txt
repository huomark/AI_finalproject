#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int inf = 1E9;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        auto v = a;
    std::sort(v.begin(), v.end());
    int last = 0;
    for (int i = 0; i < n; i++) {
        v[i] = std::min(v[i], last + 1);
        last = v[i];
    }
        std::multiset<std::pair<int, int>> s;
    i64 res = 0;
    for (int i = 0; i < n; i++) {
        s.emplace(v[i], v[i]);
        res += a[i] - v[i];
    }
    s.emplace(0, 0);
        std::vector<i64> ans(n);
        for (int i = n - 1; i >= 0; i--) {
        ans[i] = res;
        res -= a[i];
                auto it = std::prev(s.upper_bound({a[i], inf}));
        auto [l, r] = *it;
        s.erase(it);
        if (a[i] >= r) {
            res += r;
            r--;
            if (l <= r) {
                s.emplace(l, r);
            }
        } else {
            res += a[i];
            if (a[i] < r) {
                s.emplace(a[i] + 1, r);
            }
            if (l <= a[i] - 1) {
                s.emplace(l, a[i] - 1);
            }
        }
        it = s.lower_bound({a[i], 0});
        // for (auto [l, r] : s) {
        //     std::cerr << "(" << l << "," << r << ")";
        // }
        // std::cerr << "\n";
        while (it != s.end() && it->first > std::prev(it)->second + 1) {
            auto l = std::prev(it);
            auto [x, y] = *l;
            auto [a, b] = *it;
            res += b - a + 1;
            s.erase(l);
            it = s.erase(it);
            s.emplace(x, y + 1 + b - a);
        }
    }
    for (int i = 0; i < n; i++) {
        std::cout << ans[i] << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}