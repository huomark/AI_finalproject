#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 namespace ranges = std::ranges;
namespace views = std::views;
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 void solve() {
    int n;
    std::cin >> n;
        sieve(n);
        int p = std::max(1, n / 3);
    while (minp[p] != p) {
        p++;
    }
        std::vector<int> a {p};
    int l = p, r = p;
    while (l > 1 && r < n) {
        l--;
        r++;
        a.push_back(l);
        a.push_back(r);
    }
    for (int i = 1; i < l; i++) {
        a.push_back(i);
    }
    for (int i = r + 1; i <= n; i++) {
        a.push_back(i);
    }
    for (int i = 0; i < n; i++) {
        std::cout << a[i] << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}