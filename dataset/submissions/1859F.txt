#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, T;
    std::cin >> n >> T;
        std::vector<std::vector<std::array<int, 2>>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        u--, v--;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }
        std::string s;
    std::cin >> s;
        int q;
    std::cin >> q;
        std::vector<std::vector<std::array<int, 3>>> qry(n);
    for (int i = 0; i < q; i++) {
        int a, b;
        std::cin >> a >> b;
        a--, b--;
        qry[0].push_back({a, b, i});
    }
    std::vector<i64> ans(q, inf);
        std::vector<bool> vis(n);
    std::vector<int> siz(n), bel(n);
    std::vector<i64> dep1(n), dep2(n), dp1(n), dp2(n);
    auto solve = [&](auto self, int r) -> void {
        auto Q = std::move(qry[r]);
                auto find = [&](auto self, int x, int p, int s) -> int {
            for (auto [y, _] : adj[x]) {
                if (y == p || vis[y] || 2 * siz[y] <= s) {
                    continue;
                }
                return self(self, y, x, s);
            }
            return x;
        };
        r = find(find, r, -1, siz[r]);
        vis[r] = true;
                for (int k = 1; k <= 20; k++) {
            auto dfs = [&](auto self, int x, int p, int t) -> void {
                siz[x] = 1;
                for (auto [y, w] : adj[x]) {
                    if (y == p || vis[y]) {
                        continue;
                    }
                    int wk = ((w - 1) >> k) + 1;
                    if (t == 0) {
                        bel[y] = x == r ? y : bel[x];
                        dep1[y] = dep1[x] + w;
                        dep2[y] = dep2[x] + wk;
                        dp1[y] = dp1[x] + wk;
                        dp2[y] = dp2[x] + w;
                    } else {
                        dp1[y] = std::min(dp1[y], dp1[x] + w);
                        dp2[y] = std::min(dp2[y], dp2[x] + wk);
                    }
                    self(self, y, x, t);
                    siz[x] += siz[y];
                }
                if (t == 0) {
                    dp1[x] = (s[x] == '1' ? dp1[x] : inf);
                    dp2[x] = (s[x] == '1' ? dp2[x] : inf);
                    for (auto [y, w] : adj[x]) {
                        if (y == p || vis[y]) {
                            continue;
                        }
                        int wk = ((w - 1) >> k) + 1;
                        dp1[x] = std::min(dp1[x], dp1[y] + w);
                        dp2[x] = std::min(dp2[x], dp2[y] + wk);
                    }
                }
            };
            dep1[r] = 0;
            dep2[r] = 0;
            bel[r] = r;
            dp1[r] = 0;
            dp2[r] = 0;
            dfs(dfs, r, -1, 0);
            dfs(dfs, r, -1, 1);
            for (auto [a, b, i] : Q) {
                ans[i] = std::min(ans[i], std::min(dep1[a] + dp2[b], dp1[a] + dep2[b]) + T * k);
            }
        }
        for (auto [a, b, i] : Q) {
            ans[i] = std::min(ans[i], dep1[a] + dep1[b]);
            if (bel[a] == bel[b]) {
                qry[bel[a]].push_back({a, b, i});
            }
        }
        for (auto [y, _] : adj[r]) {
            if (!vis[y]) {
                self(self, y);
            }
        }
    };
    solve(solve, 0);
        for (int i = 0; i < q; i++) {
        std::cout << ans[i] << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}