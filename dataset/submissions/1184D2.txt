#include <bits/stdc++.h>
 using i64 = long long;
template<class T>
constexpr T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 constexpr i64 mul(i64 a, i64 b, i64 p) {
    i64 res = a * b - i64(1.L * a * b / p) * p;
    res %= p;
    if (res < 0) {
        res += p;
    }
    return res;
}
template<i64 P>
struct MLong {
    i64 x;
    constexpr MLong() : x{} {}
    constexpr MLong(i64 x) : x{norm(x % getMod())} {}
        static i64 Mod;
    constexpr static i64 getMod() {
        if (P > 0) {
            return P;
        } else {
            return Mod;
        }
    }
    constexpr static void setMod(i64 Mod_) {
        Mod = Mod_;
    }
    constexpr i64 norm(i64 x) const {
        if (x < 0) {
            x += getMod();
        }
        if (x >= getMod()) {
            x -= getMod();
        }
        return x;
    }
    constexpr i64 val() const {
        return x;
    }
    explicit constexpr operator i64() const {
        return x;
    }
    constexpr MLong operator-() const {
        MLong res;
        res.x = norm(getMod() - x);
        return res;
    }
    constexpr MLong inv() const {
        assert(x != 0);
        return power(*this, getMod() - 2);
    }
    constexpr MLong &operator*=(MLong rhs) & {
        x = mul(x, rhs.x, getMod());
        return *this;
    }
    constexpr MLong &operator+=(MLong rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MLong &operator-=(MLong rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MLong &operator/=(MLong rhs) & {
        return *this *= rhs.inv();
    }
    friend constexpr MLong operator*(MLong lhs, MLong rhs) {
        MLong res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MLong operator+(MLong lhs, MLong rhs) {
        MLong res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MLong operator-(MLong lhs, MLong rhs) {
        MLong res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MLong operator/(MLong lhs, MLong rhs) {
        MLong res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MLong &a) {
        i64 v;
        is >> v;
        a = MLong(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MLong &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MLong lhs, MLong rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MLong lhs, MLong rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<>
i64 MLong<0LL>::Mod = i64(1E18) + 9;
 template<int P>
struct MInt {
    int x;
    constexpr MInt() : x{} {}
    constexpr MInt(i64 x) : x{norm(x % getMod())} {}
        static int Mod;
    constexpr static int getMod() {
        if (P > 0) {
            return P;
        } else {
            return Mod;
        }
    }
    constexpr static void setMod(int Mod_) {
        Mod = Mod_;
    }
    constexpr int norm(int x) const {
        if (x < 0) {
            x += getMod();
        }
        if (x >= getMod()) {
            x -= getMod();
        }
        return x;
    }
    constexpr int val() const {
        return x;
    }
    explicit constexpr operator int() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(getMod() - x);
        return res;
    }
    constexpr MInt inv() const {
        assert(x != 0);
        return power(*this, getMod() - 2);
    }
    constexpr MInt &operator*=(MInt rhs) & {
        x = 1LL * x * rhs.x % getMod();
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) & {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<>
int MInt<0>::Mod = 998244353;
 template<int V, int P>
constexpr MInt<P> CInv = MInt<P>(V).inv();
 constexpr int P = 1000000007;
using Z = MInt<P>;
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        m = std::min(m, Z::getMod() - 1);
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, k, m;
    std::cin >> n >> k >> m;
        if (m == 1) {
        std::cout << 1 << "\n";
        return 0;
    }
        std::vector f(m, std::vector(m, std::vector<Z>(m - 1)));
    for (int i = 1; i + 1 < m; i++) {
        f[1][i][i - 1] = 1;
    }
    for (int i = 0; i < m; i++) {
        f[0][i][m - 2] = f[i][0][m - 2] = i + 1;
    }
    std::vector<std::vector<Z>> a;
    std::vector<Z> inv(m + 1);
    for (int i = 1; i <= m; i++) {
        inv[i] = comb.inv(i);
    }
        auto si = f;
    auto sj = f;
    for (int i = 1; i < m; i++) {
        for (int j = 1; i + j < m; j++) {
            if (i + j < m - 1) {
                int l = i + j + 1;
                auto v = inv[i + 1] * (l + 1) * inv[m - l] * m;
                for (int x = 0; x < m - 1; x++) {
                    f[i + 1][j][x] += f[i][j][x];
                    f[i + 1][j][x] -= (1 - l * inv[m]) * (j + 1) * inv[l + 1] * f[i][j + 1][x];
                    f[i + 1][j][x] -= l * inv[m] * inv[l - 1] * si[i - 1][j][x];
                    f[i + 1][j][x] -= l * inv[m] * inv[l - 1] * sj[i][j - 1][x];
                    f[i + 1][j][x] *= v;
                }
            } else {
                std::vector<Z> r(m - 1);
                for (int x = 0; x < m - 1; x++) {
                    r[x] += f[i][j][x];
                    r[x] -= inv[m - 1] * si[i - 1][j][x];
                    r[x] -= inv[m - 1] * sj[i][j - 1][x];
                }
                a.push_back(r);
            }
            for (int x = 0; x < m - 1; x++) {
                si[i][j][x] = si[i - 1][j][x] + f[i][j][x];
                sj[i][j][x] = sj[i][j - 1][x] + f[i][j][x];
            }
        }
    }
        assert(a.size() == m - 2);
    for (int i = 0; i < m - 2; i++) {
        for (int j = i; j < m - 2; j++) {
            if (a[j][i] != 0) {
                std::swap(a[i], a[j]);
                break;
            }
        }
        auto inv = a[i][i].inv();
        for (int j = 0; j < m - 1; j++) {
            a[i][j] *= inv;
        }
        for (int j = 0; j < m - 2; j++) {
            if (j == i) {
                continue;
            }
            auto x = a[j][i];
            for (int k = i; k < m - 1; k++) {
                a[j][k] -= a[i][k] * x;
            }
        }
    }
        int i = k - 1, j = n - k;
    Z ans = f[i][j][m - 2];
    for (int x = 0; x < m - 2; x++) {
        ans -= f[i][j][x] * a[x][m - 2];
    }
    std::cout << ans << "\n";
        return 0;
}