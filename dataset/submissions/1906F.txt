#include <bits/stdc++.h>
 using i64 = long long;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr i64 inf = 1E18;
struct Info {
    i64 sum = 0;
    i64 ans = -inf;
    i64 pre = -inf;
    i64 suf = -inf;
};
Info operator+(const Info &a, const Info &b) {
    Info c;
    c.sum = a.sum + b.sum;
    c.ans = std::max({a.ans, b.ans, a.suf + b.pre});
    c.pre = std::max(a.pre, a.sum + b.pre);
    c.suf = std::max(a.suf + b.sum, b.suf);
    return c;
}
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int N, M;
    std::cin >> N >> M;
        std::vector<std::vector<std::pair<int, int>>> modify(N);
    for (int i = 0; i < M; i++) {
        int L, R, X;
        std::cin >> L >> R >> X;
        L--;
        modify[L].emplace_back(i, X);
        if (R < N) {
            modify[R].emplace_back(i, 0);
        }
    }
        int Q;
    std::cin >> Q;
        std::vector<i64> ans(Q);
    std::vector<std::vector<std::array<int, 3>>> query(N);
    for (int i = 0; i < Q; i++) {
        int K, S, T;
        std::cin >> K >> S >> T;
        K--, S--;
        query[K].push_back({i, S, T});
    }
        SegmentTree<Info> seg(std::vector(M, Info{0, 0, 0, 0}));
        for (int i = 0; i < N; i++) {
        for (auto [j, x] : modify[i]) {
            seg.modify(j, {x, x, x, x});
        }
        for (auto [j, l, r] : query[i]) {
            ans[j] = seg.rangeQuery(l, r).ans;
        }
    }
    for (int i = 0; i < Q; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}