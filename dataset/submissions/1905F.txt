#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n), invp(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
        invp[p[i]] = i;
    }
        std::vector<std::array<int, 2>> pre(n, {-1, -1}), suf(n, {n, n});
    for (int i = 1; i < n; i++) {
        pre[i] = pre[i - 1];
        int x = p[i - 1];
        for (int j = 0; j < 2; j++) {
            if (x > pre[i][j]) {
                std::swap(x, pre[i][j]);
            }
        }
    }
    for (int i = n - 2; i >= 0; i--) {
        suf[i] = suf[i + 1];
        int x = p[i + 1];
        for (int j = 0; j < 2; j++) {
            if (x < suf[i][j]) {
                std::swap(x, suf[i][j]);
            }
        }
    }
        std::vector<int> bad(n);
    int cnt = 0;
    int ans = 0;
    std::map<std::pair<int, int>, int> mp;
    for (int i = 0; i < n; i++) {
        if (p[i] == i) {
            if (pre[i][0] < i && suf[i][0] > i) {
                bad[i] = 1;
                cnt += 1;
            } else if (pre[i][1] < i && suf[i][1] > i) {
                mp[{invp[pre[i][0]], invp[suf[i][0]]}] += 1;
            }
        } else if (invp[i] < i) {
            if (suf[i][0] > i && pre[i][0] == i) {
                mp[{invp[i], i}] += 1;
            }
        } else {
            if (suf[i][0] == i && pre[i][0] < i) {
                mp[{i, invp[i]}] += 1;
            }
        }
    }
    ans = cnt - 2;
    if (cnt < n) {
        ans = cnt - 1;
    }
    for (int i = 1; i < n; i++) {
        if (!bad[i] && !bad[i - 1]) {
            ans = cnt;
        }
    }
    for (int i = 1; i < n; i++) {
        bad[i] += bad[i - 1];
    }
    for (auto [s, c] : mp) {
        auto [x, y] = s;
        int v = bad[y];
        if (x) {
            v -= bad[x - 1];
        }
        ans = std::max(ans, cnt - v + c);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}