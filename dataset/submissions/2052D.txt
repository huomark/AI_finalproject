#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> type(n), result(n);
    for (int i = 0; i < n; i++) {
        std::string t, r;
        std::cin >> t >> r;
        type[i] = (t == "set");
        result[i] = (r == "true");
    }
        int m;
    std::cin >> m;
    std::vector<std::vector<int>> adj(n);
    std::vector<int> deg(n);
    for (int i = 0; i < m; i++) {
        int a, b;
        std::cin >> a >> b;
        a--;
        b--;
        adj[a].push_back(b);
        deg[b]++;
    }
        std::queue<int> q[2][2];
    for (int i = 0; i < n; i++) {
        if (deg[i] == 0) {
            q[type[i]][result[i]].push(i);
        }
    }
        std::vector<int> ans;
        int cur = 0;
        for (auto [t, r] : {std::array {0, 0}, {1, 1}, {1, 0}, {0, 1}, {0, 0}}) {
        while (!q[t][r].empty()) {
            int x = q[t][r].front();
            q[t][r].pop();
            if ((t ^ cur) != r) {
                std::cout << -1 << "\n";
                return 0;
            }
            cur = t;
            ans.push_back(x);
                        for (auto y : adj[x]) {
                if (--deg[y] == 0) {
                    q[type[y]][result[y]].push(y);
                }
            }
        }
    }
        if (ans.size() != n) {
        std::cout << -1 << "\n";
        return 0;
    }
    for (int i = 0; i < n; i++) {
        std::cout << ans[i] + 1 << " \n"[i == n - 1];
    }
        return 0;
}