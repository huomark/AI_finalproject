#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int q;
    std::cin >> q;
        std::vector<int> f(2 * q);
    std::vector<i64> val(2 * q);
    int tot = q;
    std::iota(f.begin(), f.end(), 0);
        std::vector<i64> ans(q);
    std::vector<std::vector<std::pair<int, int>>> add(n);
    std::vector<std::vector<int>> del(n);
    for (int i = 0; i < q; i++) {
        int l, r, x;
        std::cin >> l >> r >> x;
        l--, r--;
        add[r].emplace_back(x, i);
        del[l].push_back(i);
    }
        auto find = [&](auto self, int x) -> int {
        if (f[x] == f[f[x]]) {
            return f[x];
        }
        auto y = self(self, f[x]);
        val[x] += val[f[x]];
        f[x] = y;
        return f[x];
    };
        auto get = [&](i64 x) {
        find(find, x);
        i64 ans = val[x];
        if (x != f[x]) {
            ans += val[f[x]];
        }
        return ans;
    };
        auto merge = [&](int &x, int y) {
        int z = tot++;
        f[x] = z;
        f[y] = z;
        x = z;
    };
        std::map<int, int> mp;
    for (int i = n - 1; i >= 0; i--) {
        for (auto [x, j] : add[i]) {
            if (mp.contains(x)) {
                merge(mp[x], j);
            } else {
                mp[x] = j;
            }
        }
        for (auto it = mp.upper_bound(a[i]); it != mp.end(); it = mp.erase(it)) {
            auto [x, j] = *it;
            int y = (x + a[i]) / 2;
            val[j] += 1LL * (i + 1) * (x - y);
            if (mp.contains(y)) {
                merge(mp[y], j);
            } else {
                mp[y] = j;
            }
        }
        for (auto j : del[i]) {
            ans[j] = get(j);
        }
    }
        for (int i = 0; i < q; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}