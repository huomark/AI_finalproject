#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
            std::vector<int> parent(n, -1);
    std::vector<int> dis(n);
    auto bfs = [&](int s) {
        std::queue<int> q;
        q.push(s);
        dis.assign(n, -1);
        parent.assign(n, -1);
        dis[s] = 0;
        while (!q.empty()) {
            int x = q.front();
            q.pop();
            for (auto y : adj[x]) {
                if (dis[y] == -1) {
                    dis[y] = dis[x] + 1;
                    parent[y] = x;
                    q.push(y);
                }
            }
        }
        return std::max_element(dis.begin(), dis.end()) - dis.begin();
    };
        int t = bfs(0);
    int s = bfs(t);
        std::vector<int> a;
    std::vector<bool> path(n);
    for (int i = s; i != -1; i = parent[i]) {
        path[i] = true;
        a.push_back(i);
    }
        for (int x = 0; x < n; x++) {
        if (!path[x] && adj[x].size() != 1) {
            std::cout << "No\n";
            return 0;
        }
    }
        std::cout << "Yes\n";
        int m = a.size();
    std::vector<int> ans;
    for (int i = 0; i < m; i++) {
        int x = 2 * i;
        int y = 2 * i + 2;
        if (x >= m) {
            x = 2 * m - 1 - x;
        }
        if (y >= m) {
            y = 2 * m - 1 - y;
        }
        ans.push_back(a[x]);
        if (std::abs(x - y) == 2) {
            int z = (x + y) / 2;
            for (auto v : adj[a[z]]) {
                if (!path[v]) {
                    ans.push_back(v);
                }
            }
        }
    }
        for (auto x : ans) {
        std::cout << x + 1 << " \n"[x == ans.back()];
    }
        return 0;
}