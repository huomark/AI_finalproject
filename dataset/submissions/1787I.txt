#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
 using i64 = long long;
 constexpr int P = 998244353;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x)) {}
    Z(i64 x) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend std::istream &operator>>(std::istream &is, Z &a) {
        i64 v;
        is >> v;
        a = Z(v);
        return is;
    }
    friend std::ostream &operator<<(std::ostream &os, const Z &a) {
        return os << a.val();
    }
};
 template<class Info, class Tag>
struct LazySegmentTree {
    const int n;
    std::vector<Info> info;
    std::vector<Tag> tag;
    LazySegmentTree(int n) : n(n), info(4 << std::__lg(n)), tag(4 << std::__lg(n)) {}
    LazySegmentTree(std::vector<Info> init) : LazySegmentTree(init.size()) {
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void apply(int p, const Tag &v) {
        info[p].apply(v);
        tag[p].apply(v);
    }
    void push(int p) {
        apply(2 * p, tag[p]);
        apply(2 * p + 1, tag[p]);
        tag[p] = Tag();
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        push(p);
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        push(p);
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {
        if (l >= y || r <= x) {
            return;
        }
        if (l >= x && r <= y) {
            apply(p, v);
            return;
        }
        int m = (l + r) / 2;
        push(p);
        rangeApply(2 * p, l, m, x, y, v);
        rangeApply(2 * p + 1, m, r, x, y, v);
        pull(p);
    }
    void rangeApply(int l, int r, const Tag &v) {
        return rangeApply(1, 0, n, l, r, v);
    }
        int search(int p, int l, int r, int x, int y, i64 v) {
        if (l >= y || r <= x) return y;
        if (info[p].min >= v) return y;
        if (r - l == 1) return l;
        int m = (l + r) / 2;
        push(p);
        int res = search(2 * p, l, m, x, y, v);
        if (res == y) res = search(2 * p + 1, m, r, x, y, v);
        return res;
    }
        int search(int l, int r, i64 v) {
        return search(1, 0, n, l, r, v);
    }
};
 constexpr i64 inf = 1E18;
 struct Tag {
    i64 set;
    i64 add;
    Tag(i64 s = -1, i64 a = 0) : set(s), add{a} {}
        void apply(const Tag &t) {
        if (t.set != -1) {
            set = t.set;
            add = 0;
        }
        add += t.add;
    }
};
 struct Info {
    i64 max;
    i64 min;
    Z sum;
    int n;
    Info() : max{-inf}, min{inf}, sum{0}, n{0} {}
    Info(i64 x) : max{x}, min{x}, sum{x}, n{1} {}
        void apply(const Tag &t) {
        if (t.set != -1) {
            max = t.set;
            min = t.set;
            sum = Z(t.set) * n;
        }
        if (t.add) {
            max += t.add;
            min += t.add;
            sum += Z(t.add) * n;
        }
    }
};
 Info operator+(const Info &a, const Info &b) {
    Info c;
    c.n = a.n + b.n;
    c.max = std::max(a.max, b.max);
    c.min = std::min(a.min, b.min);
    c.sum = a.sum + b.sum;
    return c;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        Z ans = 0;
    std::vector<i64> s(n + 1);
    for (int i = 0; i < n; i++) {
        s[i + 1] = s[i] + a[i];
    }
        LazySegmentTree<Info, Tag> seg(n + 1);
    std::vector<int> h{-1, 0};
    seg.modify(0, Info(0));
    Z sum = 0;
    for (int i = 1; i <= n; i++) {
        while (h.size() > 1 && s[i] > s[h.back()]) {
            int r = h.back();
            h.pop_back();
            int l = h.back();
            sum -= Z(s[r]) * (r - l);
            i64 d;
            if (l == -1) d = s[i];
            else d = std::min(s[i], s[l]);
            d -= s[r];
            seg.rangeApply(l + 1, i, Tag(-1, d));
                        if (l + 1 < i) {
                i64 v = seg.rangeQuery(l + 1, l + 2).max;
                int j = seg.search(0, l + 1, v);
                seg.rangeApply(j, l + 1, Tag(v, 0));
            }
        }
        sum += Z(s[i]) * (i - h.back());
        h.push_back(i);
        ans += seg.rangeQuery(0, i).sum;
        seg.modify(i, Info(0));
        ans += sum;
    }
        for (int i = 0; i <= n; i++) {
        ans -= Z(s[i]) * (n - i + 1);
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}