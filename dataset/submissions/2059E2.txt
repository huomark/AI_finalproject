#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
template<class Info, class Tag>
struct LazySegmentTree {
    int n;
    std::vector<Info> info;
    std::vector<Tag> tag;
    LazySegmentTree() : n(0) {}
    LazySegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    LazySegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        tag.assign(4 << std::__lg(n), Tag());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void apply(int p, const Tag &v) {
        info[p].apply(v);
        tag[p].apply(v);
    }
    void push(int p) {
        apply(2 * p, tag[p]);
        apply(2 * p + 1, tag[p]);
        tag[p] = Tag();
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        push(p);
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        push(p);
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {
        if (l >= y || r <= x) {
            return;
        }
        if (l >= x && r <= y) {
            apply(p, v);
            return;
        }
        int m = (l + r) / 2;
        push(p);
        rangeApply(2 * p, l, m, x, y, v);
        rangeApply(2 * p + 1, m, r, x, y, v);
        pull(p);
    }
    void rangeApply(int l, int r, const Tag &v) {
        return rangeApply(1, 0, n, l, r, v);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        push(p);
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F &&pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        push(p);
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F &&pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 1E9;
 struct Tag {
    int add = 0;
        void apply(const Tag &t) {
        add += t.add;
    }
};
 struct Info {
    int min = inf;
        void apply(const Tag &t) {
        min += t.add;
    }
};
 Info operator+(const Info &a, const Info &b) {
    return {std::min(a.min, b.min)};
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        const int N = n * m;
    std::vector<int> a(N), b(N), ia(2 * N, -1), ib(2 * N, -1);
    for (int i = 0; i < N; i++) {
        std::cin >> a[i];
        a[i]--;
        ia[a[i]] = i;
    }
    for (int i = 0; i < N; i++) {
        std::cin >> b[i];
        b[i]--;
        ib[b[i]] = i;
    }
        int ans = 0;
        LazySegmentTree<Info, Tag> seg(N);
    for (int i = 0; i < N; i++) {
        seg.modify(i, {i - i % m});
    }
    for (int i = 0, lst = -1; i < N; i++) {
        int x = ib[a[i]];
        if (x <= lst) {
            break;
        }
        lst = x;
        seg.modify(x, {inf});
        seg.rangeApply(x, N, {-1});
                if (seg.rangeQuery(0, N).min >= 0) {
            ans = std::max(ans, i + 1);
        }
    }
        for (int i = 0; i < N; i++) {
        seg.modify(i, {i % m});
    }
    for (int i = 0; i < ans; i++) {
        int x = ib[a[i]];
        seg.modify(x, {inf});
    }
    std::vector<std::array<int, 2>> ops;
    for (int i = 0; i < N - ans; i++) {
        int x = seg.findLast(0, N,
            [&](const auto &p) {
                return p.min == 0;
            });
        assert(x != -1);
        ops.push_back({x / m, b[x]});
        seg.modify(x, {inf});
        seg.rangeApply(x, N, {-1});
    }
    std::cout << N - ans << "\n";
    std::reverse(ops.begin(), ops.end());
    for (auto [x, y] : ops) {
        std::cout << x + 1 << " " << y + 1 << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}