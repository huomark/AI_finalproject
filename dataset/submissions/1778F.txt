#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 1000;
 int gcd[N + 1][N + 1];
std::vector<int> divs[N + 1];
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<std::vector<int>> dp(n);
        auto dfs = [&](auto self, int x, int p) -> void {
        dp[x].resize(divs[a[x]].size());
        for (auto y : adj[x]) {
            if (y == p) continue;
            self(self, y, x);
                        for (int i = 0; i < dp[x].size(); i++) {
                int res = k + 1;
                for (int j = 0; j < dp[y].size(); j++) {
                    if (divs[a[y]][j] % divs[a[x]][i] == 0) {
                        res = std::min(res, dp[y][j]);
                    }
                    if (divs[a[y]][j] * divs[a[y]][j] % divs[a[x]][i] == 0) {
                        res = std::min(res, dp[y][j] + 1);
                    }
                }
                dp[x][i] = std::min(dp[x][i] + res, k + 1);
            }
        }
        dp[x][0] = 0;
    };
    dfs(dfs, 0, -1);
        int ans = 1;
    for (int i = 0; i < dp[0].size(); i++) {
        if (dp[0][i] < k) {
            ans = divs[a[0]][i];
        }
    }
    ans *= a[0];
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            gcd[i][j] = std::gcd(i, j);
        }
        for (int j = i; j <= N; j += i) {
            divs[j].push_back(i);
        }
    }
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}