#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector a(k, std::vector<int>(n));
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> a[i][j];
            a[i][j]--;
        }
    }
        std::vector<int> p(n);
    if (k == 1) {
        p = a[0];
    } else {
        int l = 1, r = n;
        while (a[0][l] == a[1][l]) {
            p[l - 1] = a[0][l];
            l++;
        }
        while (a[0][r - 1] == a[1][r - 1]) {
            p[r - 1] = a[0][r - 1];
            r--;
        }
        if (a[0][l] == a[1][0]) {
            for (int i = l; i < r; i++) {
                p[i - 1] = a[0][i];
            }
            p[r - 1] = a[0][0];
        } else {
            p[l - 1] = a[0][0];
            for (int i = l; i < r; i++) {
                p[i] = a[0][i];
            }
        }
        if (r - l == 1 && k > 2) {
            for (int i = 0; i < n; i++) {
                if (a[2][i] == a[0][0]) {
                    std::swap(p[l - 1], p[r - 1]);
                    break;
                }
                if (a[2][i] == a[1][0]) {
                    break;
                }
            }
        }
    }
        bool ok = true;
    for (int i = 0; i < k; i++) {
        auto q = p;
        int j = std::find(q.begin(), q.end(), a[i][0]) - q.begin();
        std::rotate(q.begin(), q.begin() + j, q.begin() + j + 1);
        if (a[i] != q) {
            ok = false;
            break;
        }
    }
    std::cout << (ok ? "YES" : "NO") << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}