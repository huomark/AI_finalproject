#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int P = 1000000007;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x)) {}
    Z(i64 x) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend std::istream &operator>>(std::istream &is, Z &a) {
        i64 v;
        is >> v;
        a = Z(v);
        return is;
    }
    friend std::ostream &operator<<(std::ostream &os, const Z &a) {
        return os << a.val();
    }
};
 void solve() {
    int n, m, h;
    std::cin >> n >> m >> h;
        std::vector<std::vector<std::pair<int, int>>> adj(n + m);
        for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x;
            std::cin >> x;
                        if (x != -1) {
                adj[i].emplace_back(n + j, x);
                adj[n + j].emplace_back(i, x);
            }
        }
    }
        std::vector<int> val(n + m, -1);
        Z ans = 1;
        for (int i = 0; i < n + m; i++) {
        if (val[i] != -1) {
            continue;
        }
                val[i] = 0;
        std::queue<int> q;
        q.push(i);
        while (!q.empty()) {
            int x = q.front();
            q.pop();
                        for (auto [y, w] : adj[x]) {
                int v = (w - val[x] + h) % h;
                if (val[y] != -1 && val[y] != v) {
                    std::cout << 0 << "\n";
                    return;
                }
                if (val[y] == -1) {
                    val[y] = v;
                    q.push(y);
                }
            }
        }
                ans *= h;
    }
        ans /= h;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}