#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 2001;
 void solve() {
    int n, d;
    std::cin >> n >> d;
        std::vector<int> l(n);
    for (int i = 0; i < n; i++) {
        std::cin >> l[i];
    }
        std::sort(l.begin(), l.end());
    std::vector<std::bitset<N>> suf(n + 1);
    suf[n].set(0);
        for (int i = n - 1; i >= 0; i--) {
        suf[i] = suf[i + 1] | suf[i + 1] << l[i];
    }
        int sum = std::accumulate(l.begin(), l.end(), 0);
        if (sum == d) {
        std::cout << "Yes\n";
        return;
    }
        std::vector<std::bitset<N>> dp(d + 1);
    dp[0].set(0);
    for (int i = 0; i < n; i++) {
        for (int j = d; j >= 0; j--) {
            dp[j] |= dp[j] << l[i];
            if (j >= l[i]) {
                dp[j] |= dp[j - l[i]];
            }
        }
        sum -= l[i];
        if (sum <= d) {
            for (int x = 0; x <= d - sum; x++) {
                int y = d - sum - x;
                if (dp[x][y]) {
                    int j = 0;
                    if (x < l[i]) {
                        j = suf[i + 1]._Find_next(l[i] - x - 1);
                        if (j == N) {
                            continue;
                        }
                    }
                    if (y + sum - j >= l[i]) {
                        std::cout << "Yes\n";
                        return;
                    }
                }
            }
        }
    }
    std::cout << "No\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}