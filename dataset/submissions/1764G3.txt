#include <bits/stdc++.h>
 using i64 = long long;
 std::map<std::tuple<int, int, int>, int> F;
 int n;
int Q(int l, int r, int k) {
    if (l == r) {
        return 0;
    }
    if (r - l == n) {
        int s = 0;
        for (int i = 1; i <= n; i++) {
            s += i / k;
        }
        return s;
    }
    if (F.count({l, r, k})) {
        return F[{l, r, k}];
    }
    std::cout << "? " << l + 1 << " " << r << " " << k << std::endl;
    int res;
    std::cin >> res;
    return F[{l, r, k}] = res;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::cin >> n;
        int pn = -1;
    int s = n / 2 + 1;
        int l = 0, r = n;
    while (r - l > 1 + (n % 2 == 0 && n > 500)) {
        int m = (l + r) / 2;
                        if (n % 2 == 1 || pn != -1) {
            int ql = Q(0, m, 2);
            int qr = Q(m, n, 2);
            int lenl = m;
            int lenr = n - m;
            if (0 <= pn && pn < m) {
                ql--;
                lenl--;
            }
            if (m <= pn && pn < n) {
                qr--;
                lenr--;
            }
            int both = ql + qr - s;
            assert((lenl - both) % 2 != (lenr - both) % 2);
            // std::cerr << lenl - both - (ql - both) * 2 << " " << lenr - both - (qr - both) * 2 << "\n";
            if ((lenl - both) % 2 != 0) {
                r = m;
            } else {
                l = m;
            }
        } else {
            int ql = Q(0, m, 2);
            int qr = Q(m, n, 2);
            int lenl = m;
            int lenr = n - m;
            int both = ql + qr - s;
            int vl = lenl + both - ql * 2;
            int vr = lenr + both - qr * 2;
            assert(vl <= 0);
            assert(vr <= 0);
            assert(vl + vr == -2);
            if (vl == -2) {
                r = m;
                continue;
            }
            if (vr == -2) {
                l = m;
                continue;
            }
            int t = 0;
            if (m >= 2) {
                if (Q(0, m, n) == 1) {
                    t = 1;
                }
            } else {
                if (Q(m, n, n) == 2) {
                    t = 1;
                }
            }
            if (t == 0) {
                pn = l;
                l = m;
            } else {
                pn = m;
                r = m;
            }
            s--;
        }
    }
        if (r - l == 2) {
        int m = l + 1;
        if (pn == -1) {
            if (m >= 2 ? Q(0, m, n) == 1 : Q(m, n, n) == 2) {
                r = m;
            } else {
                l = m;
            }
        } else {
            if (Q(0, r, 2) - Q(0, l, 2) == 2) {
                if (Q(m, n, 2) == Q(r, n, 2)) {
                    r = m;
                } else {
                    l = m;
                }
            } else {
                if (Q(0, m, 2) == Q(0, l, 2)) {
                    l = m;
                } else {
                    r = m;
                }
            }
        }
    }
        std::cout << "! " << l + 1 << std::endl;
        return 0;
}