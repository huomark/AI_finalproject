#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int V = 2E5;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> h(n), a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> h[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    std::map<std::pair<int, int>, int> id;
    for (int i = 0; i < n; i++) {
        id[{h[i], a[i]}] = i;
    }
        std::vector<std::array<std::pair<int, int>, 2>> f(V + 1);
    for (int i = 0; i < n; i++) {
        auto v = std::make_pair(h[i], a[i]);
        for (auto &y : f[a[i]]) {
            if (v > y) {
                std::swap(v, y);
            }
        }
    }
    for (int i = V - 1; i >= 0; i--) {
        for (auto v : f[i + 1]) {
            for (auto &y : f[i]) {
                if (v > y) {
                    std::swap(v, y);
                }
            }
        }
    }
        std::vector<i64> ans(n);
    for (int x = 1; x <= V; x++) {
        i64 mx = 0;
        int l = 0;
        for (int i = 1; i <= V; i += x) {
            i64 res = 1LL * (i + x - 1) / x * f[i][0].first;
            if (res > mx) {
                mx = res;
                l = i;
            }
        }
        auto v = f[l][0];
        i64 sec = 0;
        for (int i = 1; i <= V; i += x) {
            i64 res = 1LL * (i + x - 1) / x * f[i][i <= l && f[i][0] == v].first;
            if (res > sec) {
                sec = res;
            }
        }
        if (sec < mx) {
            int i = id[v];
            ans[i] = std::max(ans[i], mx - sec);
        }
    }
    for (int i = 0; i < n; i++) {
        std::cout << ans[i] << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}