#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, k, x;
    std::cin >> n >> k >> x;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector dp(k + 1, std::array<i64, 3>{-inf, -inf, -inf});
    dp[0] = {};
        for (int i = 0; i < n; i++) {
        std::vector g(k + 1, std::array<i64, 3>{-inf, -inf, -inf});
        for (int j = 0; j <= k; j++) {
            for (int t = 0; t < 3; t++) {
                g[j][t] = std::max(g[j][t], dp[j][t] + (t == 1 ? a[i] - x : 0));
                if (j < k) {
                    g[j + 1][t] = std::max(g[j + 1][t], dp[j][t] + (t == 1 ? a[i] + x : 0));
                }
            }
        }
        for (int j = 0; j <= k; j++) {
            for (int t = 1; t < 3; t++) {
                g[j][t] = std::max(g[j][t], g[j][t - 1]);
            }
        }
        dp = g;
    }
        auto ans = dp[k][2];
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}