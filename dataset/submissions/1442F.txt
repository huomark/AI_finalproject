#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int N, M, T;
    std::cin >> N >> M >> T;
        std::vector<std::vector<int>> adj(N);
    std::vector<int> deg(N);
    for (int i = 0; i < M; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        deg[v]++;
    }
        std::vector<int> q;
    for (int i = 0; i < N; i++) {
        std::sort(adj[i].begin(), adj[i].end());
        if (deg[i] == 0) {
            q.push_back(i);
        }
    }
        for (int i = 0; i < N; i++) {
        int x = q[i];
                for (auto y : adj[x]) {
            if (--deg[y] == 0) {
                q.push_back(y);
            }
        }
    }
        std::reverse(q.begin(), q.end());
        const int k = std::min(N, 20);
        std::vector<std::tuple<char, int, int>> ans;
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < i; j++) {
            if (!std::binary_search(adj[q[i]].begin(), adj[q[i]].end(), q[j])) {
                ans.push_back({'+', q[i], q[j]});
            }
        }
    }
        std::vector<int> vis(1 << k, -1);
    std::vector<int> tm(1 << k, -1);
    for (int i = k; i < N; i++) {
        int mask = 0;
        for (int j = 0; j < k; j++) {
            if (std::binary_search(adj[q[i]].begin(), adj[q[i]].end(), q[j])) {
                mask |= 1 << j;
            }
        }
                int nmask;
        {
            tm[mask] = i;
            std::queue<int> q;
            q.push(mask);
            while (!q.empty()) {
                int s = q.front();
                q.pop();
                                if (vis[s] == -1) {
                    nmask = s;
                    break;
                }
                                for (int j = 0; j < k; j++) {
                    int t = s ^ 1 << j;
                    if (tm[t] != i) {
                        tm[t] = i;
                        q.push(t);
                    }
                }
            }
        }
                vis[nmask] = q[i];
        for (int j = 0; j < k; j++) {
            if ((mask & ~nmask) >> j & 1) {
                ans.push_back({'-', q[i], q[j]});
            }
            if ((~mask & nmask) >> j & 1) {
                ans.push_back({'+', q[i], q[j]});
            }
        }
        ans.push_back({'+', q[i], q[i]});
    }
        std::cout << ans.size() << "\n";
    for (auto [o, x, y] : ans) {
        std::cout << o << " " << x + 1 << " " << y + 1 << "\n";
    }
    std::cout.flush();
        auto work = [&]() {
        int mask = 0;
        for (int i = 0; i < k; i++) {
            std::cout << "? 1 " << q[i] + 1 << std::endl;
            std::string result;
            std::cin >> result;
            if (result == "Lose") {
                return q[i];
            }
            if (result == "Win") {
                mask |= 1 << i;
            }
        }
        return vis[mask];
    };
        for (int t = 0; t < T; t++) {
        int ans = work();
        std::cout << "! " << ans + 1 << std::endl;
                std::string result;
        std::cin >> result;
        assert(result == "Correct");
    }
        return 0;
}