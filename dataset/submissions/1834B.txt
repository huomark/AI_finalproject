#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    std::string L, R;
    std::cin >> L >> R;
        std::reverse(L.begin(), L.end());
    std::reverse(R.begin(), R.end());
        L.resize(100, '0');
    R.resize(100, '0');
        std::vector dp(2, std::vector(2, std::vector(2, std::vector(2, -1))));
    dp[0][0][0][0] = 0;
        for (int i = 99; i >= 0; i--) {
        std::vector ndp(2, std::vector(2, std::vector(2, std::vector(2, -1))));
        int dl = L[i] - '0', dr = R[i] - '0';
        for (int l1 = 0; l1 <= 1; l1++) {
            for (int r1 = 0; r1 <= 1; r1++) {
                for (int l2 = 0; l2 <= 1; l2++) {
                    for (int r2 = 0; r2 <= 1; r2++) {
                        if (dp[l1][r1][l2][r2] == -1) {
                            continue;
                        }
                        for (int x = 0; x <= 9; x++) {
                            for (int y = 0; y <= 9; y++) {
                                if ((l1 || x >= dl) && (r1 || x <= dr) && (l2 || y >= dl) && (r2 || y <= dr)) {
                                    int &res = ndp[l1 || x > dl][r1 || x < dr][l2 || y > dl][r2 || y < dr];
                                    res = std::max(res, dp[l1][r1][l2][r2] + std::abs(x - y));
                                }
                            }
                        }
                    }
                }
            }
        }
        std::swap(dp, ndp);
    }
        int ans = 0;
    for (auto &a : dp) {
        for (auto &b : a) {
            for (auto &c : b) {
                for (auto &d : c) {
                    ans = std::max(ans, d);
                }
            }
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}