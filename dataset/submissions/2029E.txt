#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 bool check(int x, int a) {
    if (a % x == 0) {
        return true;
    }
    if (a < 2 * x) {
        return false;
    }
    if (a % 2 == 0) {
        return true;
    }
    return a - minp[a] >= 2 * x;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int i = 0;
    while (i < n && (minp[a[i]] != a[i] || a[i] == 2)) {
        i++;
    }
        if (i == n) {
        std::cout << 2 << "\n";
        return;
    }
        int x = a[i];
        for (int i = 0; i < n; i++) {
        if (!check(x, a[i])) {
            std::cout << -1 << "\n";
            return;
        }
    }
    std::cout << x << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(4E5);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}