#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, m, k, d;
    std::cin >> n >> m >> k >> d;
    d++;
        std::vector<i64> cost(n);
    for (int i = 0; i < n; i++) {
        std::vector<int> a(m);
        for (int j = 0; j < m; j++) {
            std::cin >> a[j];
            a[j]++;
        }
        std::vector<i64> dp(m, inf);
        dp[0] = 1;
        std::deque<int> q;
        for (int j = 1; j < m; j++) {
            while (!q.empty() && dp[j - 1] < dp[q.back()]) {
                q.pop_back();
            }
            q.push_back(j - 1);
            while (q.front() < j - d) {
                q.pop_front();
            }
            dp[j] = a[j] + dp[q.front()];
        }
        cost[i] = dp[m - 1];
    }
        i64 ans = inf;
    for (int i = 0; i + k <= n; i++) {
        i64 sum = 0;
        for (int j = 0; j < k; j++) {
            sum += cost[i + j];
        }
        ans = std::min(ans, sum);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}