#include <bits/stdc++.h>
 using i64 = long long;
 struct MCFGraph {
    struct Edge {
        int v, c, f;
        Edge(int v, int c, int f) : v(v), c(c), f(f) {}
    };
    const int n;
    std::vector<Edge> e;
    std::vector<std::vector<int>> g;
    std::vector<i64> h, dis;
    std::vector<int> pre;
    bool dijkstra(int s, int t) {
        dis.assign(n, std::numeric_limits<i64>::max());
        pre.assign(n, -1);
        std::priority_queue<std::pair<i64, int>, std::vector<std::pair<i64, int>>, std::greater<std::pair<i64, int>>> que;
        dis[s] = 0;
        que.emplace(0, s);
        while (!que.empty()) {
            i64 d = que.top().first;
            int u = que.top().second;
            que.pop();
            if (dis[u] < d) continue;
            for (int i : g[u]) {
                int v = e[i].v;
                int c = e[i].c;
                int f = e[i].f;
                if (c > 0 && dis[v] > d + h[u] - h[v] + f) {
                    dis[v] = d + h[u] - h[v] + f;
                    pre[v] = i;
                    que.emplace(dis[v], v);
                }
            }
        }
        return dis[t] != std::numeric_limits<i64>::max();
    }
    MCFGraph(int n) : n(n), g(n) {}
    void addEdge(int u, int v, int c, int f) {
        if (f < 0) {
            g[u].push_back(e.size());
            e.emplace_back(v, 0, f);
            g[v].push_back(e.size());
            e.emplace_back(u, c, -f);
        } else {
            g[u].push_back(e.size());
            e.emplace_back(v, c, f);
            g[v].push_back(e.size());
            e.emplace_back(u, 0, -f);
        }
    }
    std::pair<int, i64> flow(int s, int t) {
        int flow = 0;
        i64 cost = 0;
        h.assign(n, 0);
        while (dijkstra(s, t)) {
            for (int i = 0; i < n; ++i) h[i] += dis[i];
            int aug = std::numeric_limits<int>::max();
            for (int i = t; i != s; i = e[pre[i] ^ 1].v) aug = std::min(aug, e[pre[i]].c);
            for (int i = t; i != s; i = e[pre[i] ^ 1].v) {
                e[pre[i]].c -= aug;
                e[pre[i] ^ 1].c += aug;
            }
            flow += aug;
            cost += i64(aug) * h[t];
        }
        return std::make_pair(flow, cost);
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        MCFGraph g(n + 2);
        std::vector<int> out(n), par(m);
    for (int i = 0; i < m; i++) {
        int x, y, c, w;
        std::cin >> x >> y >> c >> w;
        par[i] = c % 2;
        x--, y--;
                out[x] += c % 2;
        out[y] -= c % 2;
                g.addEdge(x, y, c / 2, w);
        if (w < 0) {
            out[x] += c / 2 * 2;
            out[y] -= c / 2 * 2;
        }
    }
        for (int i = 1; i < n - 1; i++) {
        if (out[i] % 2) {
            std::cout << "Impossible\n";
            return 0;
        }
    }
        g.addEdge(n - 1, 0, 1E9, 0);
    if (out[0] % 2) {
        out[0]++;
        out[n - 1]--;
    }
        int tot = 0;
    for (int i = 0; i < n; i++) {
        if (out[i] > 0) {
            tot += out[i] / 2;
            g.addEdge(i, n + 1, out[i] / 2, 0);
        } else g.addEdge(n, i, -out[i] / 2, 0);
    }
        if (g.flow(n, n + 1).first < tot) {
        std::cout << "Impossible\n";
        return 0;
    }
        std::cout << "Possible\n";
    for (int i = 0; i < m; i++) {
        std::cout << g.e[2 * i + 1].c * 2 + par[i] << " \n"[i == m - 1];
    }
        return 0;
}