#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::string> s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
    }
        std::map<std::pair<char, char>, std::vector<int>> a;
        std::vector<std::tuple<int, char, int, char>> ans;
        for (int i = 0; i < n; i++) {
        std::map<char, int> cnt;
        for (auto x : s[i]) {
            cnt[x]++;
        }
                std::vector<char> need;
        std::vector<char> give;
        for (auto x : {'w', 'i', 'n'}) {
            if (cnt[x] == 0) {
                need.push_back(x);
            } else {
                for (int i = 1; i < cnt[x]; i++) {
                    give.push_back(x);
                }
            }
        }
                for (int j = 0; j < need.size(); j++) {
            char x = need[j], y = give[j];
            if (!a[{y, x}].empty()) {
                ans.emplace_back(i, y, a[{y, x}].back(), x);
                a[{y, x}].pop_back();
            } else {
                a[{x, y}].push_back(i);
            }
        }
    }
        char ch[3] = {'w', 'i', 'n'};
    if (a[{ch[0], ch[1]}].empty()) {
        std::swap(ch[0], ch[1]);
    }
        for (int i = 0; i < a[{ch[0], ch[1]}].size(); i++) {
        int x = a[{ch[0], ch[1]}][i];
        int y = a[{ch[1], ch[2]}][i];
        int z = a[{ch[2], ch[0]}][i];
        ans.emplace_back(x, ch[1], y, ch[2]);
        ans.emplace_back(x, ch[2], z, ch[0]);
    }
        std::cout << ans.size() << "\n";
    for (auto [a, b, c, d] : ans) {
        std::cout << a + 1 << " " << b << " " << c + 1 << " " << d << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}