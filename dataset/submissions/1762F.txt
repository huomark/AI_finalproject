#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        T ans = 0;
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 Fenwick<int> fen(5E5 + 1);
i64 work(std::vector<int> a, int k) {
    int n = a.size();
        std::vector<int> nxt(n, -1);
    std::vector<std::pair<int, int>> t;
    for (int i = 0; i < n; i++) {
        t.emplace_back(a[i], i);
    }
    std::sort(t.begin(), t.end());
    int j = 0;
    for (int i = 0; i < n; i++) {
        while (j < n && t[j].first <= t[i].first + k) {
            fen.add(t[j].second, 1);
            j++;
        }
        int s = fen.sum(t[i].second + 1);
        if (s < j - i) nxt[t[i].second] = fen.kth(s);
        fen.add(t[i].second, -1);
    }
        std::vector<int> gr(n), bad(n);
    for (int i = n - 1; i >= 0; i--) {
        fen.add(a[i], 1);
        gr[i] = fen.rangeSum(a[i] + 1, 5E5 + 1);
        if (nxt[i] == -1) {
            bad[i] = gr[i];
        } else {
            bad[i] = bad[nxt[i]] + fen.rangeSum(a[nxt[i]] + 1, 5E5 + 1) - gr[nxt[i]];
        }
    }
    for (int i = 0; i < n; i++) {
        fen.add(a[i], -1);
    }
    return std::accumulate(bad.begin(), bad.end(), 0LL);
}
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        auto ans = 1LL * n * (n + 1) / 2;
        ans -= work(a, k);
    for (auto &x : a) x = 1E5 + 1 - x;
    ans -= work(a, k);
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}