#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        int S = 0;
    std::vector<bool> ed(n);
    std::vector dis(n, std::vector<int>(n, 1E9));
    int ans = 0;
    for (int i = 0; i < m; i++) {
        int a, b, c;
        std::cin >> a >> b >> c;
        a--, b--;
        ans += c;
        S ^= 1 << a;
        S ^= 1 << b;
        ed[a] = ed[b] = true;
        dis[a][b] = dis[b][a] = std::min(dis[a][b], c);
    }
    for (int i = 0; i < n; i++) {
        dis[i][i] = 0;
    }
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dis[i][j] = std::min(dis[i][j], dis[i][k] + dis[k][j]);
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (dis[0][i] == 1E9 && ed[i]) {
            std::cout << -1 << "\n";
            return 0;
        }
    }
        int min = 1E9;
    std::function<void(int, int)> dfs = [&](int s, int sum) {
        if (s == 0) {
            min = std::min(min, sum);
            return;
        }
        int x = __builtin_ctz(s);
        for (int i = x + 1; i < n; i++) {
            if (s >> i & 1) {
                dfs(s ^ (1 << x) ^ (1 << i), sum + dis[x][i]);
            }
        }
    };
    dfs(S, 0);
    ans += min;
        std::cout << ans << "\n";
        return 0;
}