#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 constexpr int inf = 1E9;
struct Min {
    int x;
    Min(int x = inf) : x(x) {}
     Min &operator+=(Min a) {
        x = std::min(a.x, x);
        return *this;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
        int lg = std::__lg(n) + 1;
        std::vector p(lg + 1, std::vector<std::vector<int>>(n));
        std::vector<std::vector<std::pair<int, int>>> qry(n);
    for (int i = 0; i < q; i++) {
        int l, r;
        std::cin >> l >> r;
        l--;
        qry[l].emplace_back(r, i);
    }
        Fenwick<Min> fen(n);
    std::vector<int> ans(q);
        for (int l = n - 1; l >= 0; l--) {
        for (int t = lg; t >= 0; t--) {
            int x = a[l] >> t;
            for (auto y : {x - 1, x, x + 1}) {
                if (0 <= y && y < n && !p[t][y].empty()) {
                    int s = 0;
                    for (int i = 0; i < p[t][y].size(); i++) {
                        int j = p[t][y][i];
                        int d = std::abs(a[l] - a[j]);
                        fen.add(j, d);
                        if (d * 2 <= (1 << t)) {
                            s = i + 1;
                        }
                    }
                    p[t][y].erase(p[t][y].begin(), p[t][y].begin() + s);
                }
            }
            p[t][x].push_back(l);
        }
                for (auto [r, i] : qry[l]) {
            ans[i] = fen.sum(r).x;
        }
    }
        for (int i = 0; i < q; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}