#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int leader(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return leader(x) == leader(y);
    }
        bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[leader(x)];
    }
};
void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        int k = std::sqrt(n);
        if (k * k != n || m != k * (k + 1)) {
        std::cout << "NO\n";
        return;
    }
        int x = -1;
    for (int i = 0; i < n; i++) {
        if (adj[i].size() != 2 && adj[i].size() != 4) {
            std::cout << "NO\n";
            return;
        }
        if (adj[i].size() == 4) {
            x = i;
        }
    }
        std::vector<int> e4(n), e2(n);
    DSU d4(n), d2(n);
    int m4 = 0;
    for (int x = 0; x < n; x++) {
        for (auto y : adj[x]) {
            if (x > y) {
                continue;
            }
            if (adj[x].size() == 4 && adj[y].size() == 4) {
                e4[x] += 1;
                e4[y] += 1;
                m4 += 1;
                d4.merge(x, y);
            } else {
                e2[x] += 1;
                e2[y] += 1;
                d2.merge(x, y);
            }
        }
    }
        if (m4 != k || d4.size(x) != k) {
        std::cout << "NO\n";
        return;
    }
        for (int i = 0; i < n; i++) {
        if (e2[i] != 2) {
            std::cout << "NO\n";
            return;
        }
    }
    for (int i = 0; i < n; i++) {
        if (d2.size(i) != k) {
            std::cout << "NO\n";
            return;
        }
    }
    std::set<int> s;
    for (int i = 0; i < n; i++) {
        if (adj[i].size() == 4) {
            s.insert(d2.leader(i));
        }
    }
    if (s.size() != k) {
        std::cout << "NO\n";
        return;
    }
        std::cout << "YES\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}