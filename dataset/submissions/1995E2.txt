#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F &&pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F &&pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 2E9 + 10;
struct Info {
    std::array<std::array<int, 2>, 2> a {0, inf, inf, 0};
};
 Info operator+(const Info &a, const Info &b) {
    Info c {.a {inf, inf, inf, inf}};
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                c.a[i][k] = std::min(c.a[i][k], std::max(a.a[i][j], b.a[j][k]));
            }
        }
    }
    return c;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(2 * n);
    for (int i = 0; i < 2 * n; i++) {
        std::cin >> a[i];
    }
        if (n % 2 == 0) {
        int min = inf, max = 0;
        for (int i = 0; i < n; i += 2) {
            int A = a[i], B = a[i + 1], C = a[i + n], D = a[i + n + 1];
            if (std::abs(A + B - C - D) > std::abs(A + D - B - C)) {
                std::swap(B, D);
            }
            min = std::min({min, A + B, C + D});
            max = std::max({max, A + B, C + D});
        }
        std::cout << max - min << "\n";
    } else {
        std::vector<int> b;
        b.reserve(2 * n + 2);
        for (int i = 0, t = 0; t < n; t++) {
            b.push_back(a[i]);
            b.push_back(a[i + 1]);
            i += n + 1;
            if (i >= 2 * n) {
                i -= 2 * n;
            }
        }
        int ans = inf;
        b.insert(b.begin(), b.back());
        b.push_back(b[1]);
                std::vector<Info> m(n);
        std::vector<std::array<int, 4>> e;
        e.reserve(4 * n);
        for (int i = 0; i < n; i++) {
            int A = b[2 * i];
            int B = b[2 * i + 1];
            int C = b[2 * i + 2];
            int D = b[2 * i + 3];
            m[i] = Info {.a {B + C, B + D, A + C, A + D}};
            e.push_back({B + C, i, 0, 0});
            e.push_back({B + D, i, 0, 1});
            e.push_back({A + C, i, 1, 0});
            e.push_back({A + D, i, 1, 1});
        }
        SegmentTree<Info> seg {m};
        std::sort(e.begin(), e.end());
        for (auto [v, i, j, k] : e) {
            Info q = seg.rangeQuery(0, n);
            int res = std::min(q.a[0][0], q.a[1][1]);
            if (res == inf) {
                break;
            }
            ans = std::min(ans, res - v);
            m[i].a[j][k] = inf;
            seg.modify(i, m[i]);
        }
        std::cout << ans << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int T;
    std::cin >> T;
        while (T--) {
        solve();
    }
        return 0;
}