#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 P = i64(1E18) + 9;
 i64 mul(i64 a, i64 b) {
    return __int128(a) * b % P;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
    const int X = rng() % 1000000000 + 123456;
        std::vector<i64> p(n);
    p[0] = 1;
    for (int i = 1; i < n; i++) {
        p[i] = mul(p[i - 1], X);
    }
        i64 sum = 0;
    std::vector<int> a(n - 1);
    for (int i = 0; i < n - 1; i++) {
        std::cin >> a[i];
        sum = (sum + p[a[i]]) % P;
    }
        std::vector<i64> cand;
    for (int i = 0; i < n; i++) {
        cand.push_back((sum + p[i]) % P);
    }
    std::sort(cand.begin(), cand.end());
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<i64> dp(n), up(n);
    std::vector<int> parent(n, -1);
    auto dfs1 = [&](auto self, int x) -> void {
        dp[x] = 1;
        for (auto y : adj[x]) {
            if (y == parent[x]) {
                continue;
            }
            parent[y] = x;
            self(self, y);
            dp[x] = (dp[x] + mul(X, dp[y])) % P;
        }
    };
    dfs1(dfs1, 0);
        auto dfs2 = [&](auto self, int x) -> void {
        i64 sum = 0;
        for (auto y : adj[x]) {
            if (y == parent[x]) {
                continue;
            }
            sum = (sum + dp[y]) % P;
        }
        for (auto y : adj[x]) {
            if (y == parent[x]) {
                continue;
            }
            up[y] = (1 + mul((sum - dp[y] + P + up[x]) % P, X)) % P;
            self(self, y);
        }
    };
    dfs2(dfs2, 0);
        std::vector<int> ans;
    for (int x = 0; x < n; x++) {
        i64 res = 1;
        for (auto y : adj[x]) {
            if (y == parent[x]) {
                res = (res + mul(up[x], X)) % P;
            } else {
                res = (res + mul(dp[y], X)) % P;
            }
        }
        if (std::binary_search(cand.begin(), cand.end(), res)) {
            ans.push_back(x);
        }
    }
    std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x + 1 << " \n"[x == ans.back()];
    }
        return 0;
}