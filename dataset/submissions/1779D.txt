#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
    DSU(int n) : f(n), siz(n, 1) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        while (x != f[x]) x = f[x] = f[f[x]];
        return x;
    }
    bool same(int x, int y) { return leader(x) == leader(y); }
    bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) return false;
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
    int size(int x) { return siz[leader(x)]; }
};
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        int m;
    std::cin >> m;
        std::map<int, int> cnt;
    for (int i = 0; i < m; i++) {
        int x;
        std::cin >> x;
        cnt[x]++;
    }
        for (int i = 0; i < n; i++) {
        if (a[i] < b[i]) {
            std::cout << "NO\n";
            return;
        }
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(), [&](int i, int j) {
       return b[i] < b[j];
    });
        DSU dsu(n);
    std::vector<int> mx(n);
    for (int i = 0; i < n; i++) {
        mx[i] = a[i] == b[i] ? -1 : b[i];
    }
        std::map<int, int> need;
    for (int i = 0; i < n; i++) {
        need[mx[i]]++;
    }
    auto merge = [&](int x, int y, int v) {
        if (x < 0 || x >= n) return;
        x = dsu.leader(x);
        y = dsu.leader(y);
        if (b[x] > v || b[y] > v) return;
                if (x == y) return;
                need[mx[x]]--;
        need[mx[y]]--;
        dsu.merge(x, y);
        mx[x] = std::max(mx[x], mx[y]);
        need[mx[x]]++;
    };
        for (int i = 0, j = 0; i < n; i = j) {
        while (j < n && b[p[i]] == b[p[j]]) j++;
                for (int k = i; k < j; k++) {
            merge(p[k] - 1, p[k], b[p[i]]);
            merge(p[k] + 1, p[k], b[p[i]]);
        }
                if (cnt[b[p[i]]] < need[b[p[i]]]) {
            std::cout << "NO\n";
            return;
        }
    }
        std::cout << "YES\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}