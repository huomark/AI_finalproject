#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 void solve() {
    int n, q;
    std::cin >> n >> q;
        std::vector<int> w(n);
    for (int i = 0; i < n; i++) {
        std::cin >> w[i];
    }
        std::vector<std::array<int, 30>> left(n);
    std::vector<std::array<int, 30>> pre(n);
    for (int i = 0; i < n; i++) {
        if (i) {
            left[i] = left[i - 1];
            pre[i] = pre[i - 1];
        } else {
            left[i].fill(-1);
        }
        int d = std::__lg(w[i]);
        for (int j = 0; j <= d; j++) {
            left[i][j] = i;
            pre[i][j] = 0;
        }
        for (int j = d + 1; j < 30; j++) {
            pre[i][j] ^= w[i];
        }
    }
        for (int i = 0; i < q; i++) {
        int x;
        std::cin >> x;
                int j = n - 1;
        while (x > 0 && j >= 0) {
            int d = std::__lg(x);
            int k = left[j][d];
            x ^= pre[j][d];
            j = k;
            if (j == -1) {
                break;
            }
            if (x < w[j]) {
                break;
            }
            x ^= w[j];
            j--;
        }
                std::cout << n - 1 - j << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}