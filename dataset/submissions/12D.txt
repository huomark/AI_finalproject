#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 struct Max {
    int x = 0;
        Max &operator+=(Max a) & {
        x = std::max(x, a.x);
        return *this;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n), b(n), c(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> c[i];
    }
        auto v = b;
    std::sort(v.begin(), v.end());
        for (auto &x : b) {
        x = std::lower_bound(v.begin(), v.end(), x) - v.begin();
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
        std::sort(p.begin(), p.end(), [&](int i, int j) {
        if (a[i] != a[j]) {
            return a[i] > a[j];
        }
        return b[i] < b[j];
    });
        int ans = 0;
    Fenwick<Max> fen(n);
    for (auto i : p) {
        fen.add(n - 1 - b[i], {c[i]});
        if (fen.sum(n - 1 - b[i]).x > c[i]) {
            ans += 1;
        }
    }
    std::cout << ans << "\n";
        return 0;
}