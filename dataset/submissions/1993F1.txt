#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 i64 exgcd(i64 a, i64 b, i64 &x, i64 &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    i64 g = exgcd(b, a % b, y, x);
    y -= a / b * x;
    return g;
}
 // ax + b = 0 (mod m)
std::pair<i64, i64> sol(i64 a, i64 b, i64 m) {
    assert(m > 0);
    b *= -1;
    i64 x, y;
    i64 g = exgcd(a, m, x, y);
    if (g < 0) {
        g *= -1;
        x *= -1;
        y *= -1;
    }
    if (b % g != 0) {
        return {-1, -1};
    }
    x = x * (b / g) % (m / g);
    if (x < 0) {
        x += m / g;
    }
    return {x, m / g};
}
 void solve() {
    int n, w, h;
    i64 k;
    std::cin >> n >> k >> w >> h;
        w *= 2;
    h *= 2;
        std::string s;
    std::cin >> s;
        std::vector<int> x(n + 1), y(n + 1);
    for (int i = 0; i < n; i++) {
        x[i + 1] = x[i];
        y[i + 1] = y[i];
        if (s[i] == 'L') {
            x[i + 1]--;
        } else if (s[i] == 'R') {
            x[i + 1]++;
        } else if (s[i] == 'D') {
            y[i + 1]--;
        } else {
            y[i + 1]++;
        }
    }
        i64 ans = 0;
    for (int i = 1; i <= n; i++) {
        auto [a1, m1] = sol(x[n], x[i], w);
        auto [a2, m2] = sol(y[n], y[i], h);
        if (a1 == -1 || a2 == -1) {
            continue;
        }
        auto [x, m] = sol(m1, a1 - a2, m2);
        if (x == -1) {
            continue;
        }
        m *= m1;
        x = (x * m1 + a1) % m;
        if (k > x) {
            ans += (k - 1 - x) / m + 1;
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}