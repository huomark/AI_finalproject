#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<i64> dp(n);
    i64 ans = 0;
    auto dfs = [&](auto self, int x, int p) -> void {
        dp[x] = a[x];
        std::array<i64, 3> max;
        max.fill(-1E18);
        i64 pos = 0;
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
            dp[x] = std::max(dp[x], dp[y]);
            i64 v = dp[y];
            for (int i = 0; i < 3; i++) {
                if (v > max[i]) {
                    std::swap(v, max[i]);
                }
            }
            pos += std::max(0LL, v);
        }
        dp[x] = std::max(dp[x], max[0] + max[1] + std::max(0LL, max[2]) + pos + a[x]);
        ans = std::max(ans, max[0] + a[x]);
        ans = std::max(ans, 1LL * a[x]);
        ans = std::max(ans, max[0] + max[1]);
        ans = std::max(ans, max[0] + max[1] + max[2] + pos + a[x]);
    };
    dfs(dfs, 0, -1);
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}