#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<std::vector<std::pair<int, int>>> adj(n);
    for (int i = 0; i < m; i++) {
        int x, y, w;
        std::cin >> x >> y >> w;
        x--, y--;
        adj[x].emplace_back(y, w);
        adj[y].emplace_back(x, w);
    }
        std::vector<i64> dis(n, -1);
    std::vector<int> s(n, -1);
        std::priority_queue<std::tuple<i64, int, int>, std::vector<std::tuple<i64, int, int>>, std::greater<>> h;
        int k;
    std::cin >> k;
        std::vector<int> p(k);
    for (int i = 0; i < k; i++) {
        std::cin >> p[i];
        p[i]--;
        h.emplace(0LL, p[i], p[i]);
    }
        while (!h.empty()) {
        auto [d, x, l] = h.top();
        h.pop();
                if (dis[x] != -1) {
            continue;
        }
        dis[x] = d;
        s[x] = l;
                for (auto [y, w] : adj[x]) {
            h.emplace(d + w, y, s[x]);
        }
    }
        i64 ans = dis[0];
        DSU dsu(n);
    std::vector<std::tuple<i64, int, int>> e;
    for (int i = 0; i < n; i++) {
        for (auto [j, w] : adj[i]) {
            if (s[i] != s[j]) {
                e.emplace_back(dis[i] + dis[j] + w, s[i], s[j]);
            }
        }
    }
    std::sort(e.begin(), e.end());
    for (auto [w, x, y] : e) {
        if (dsu.merge(x, y)) {
            ans += w;
        }
    }
    std::cout << ans << "\n";
        return 0;
}