#include <bits/stdc++.h>
 using i64 = long long;
template<class T>
constexpr T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 template<int P>
struct MInt {
    int x;
    constexpr MInt() : x{} {}
    constexpr MInt(i64 x) : x{norm(x % P)} {}
        constexpr int norm(int x) const {
        if (x < 0) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
    constexpr int val() const {
        return x;
    }
    explicit constexpr operator int() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(P - x);
        return res;
    }
    constexpr MInt inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    constexpr MInt &operator*=(MInt rhs) {
        x = 1LL * x * rhs.x % P;
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<int V, int P>
constexpr MInt<P> CInv = MInt<P>(V).inv();
 constexpr int P = 998244353;
using Z = MInt<P>;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
    }
        std::vector<int> sum(s[n - 1] + 1), ex(s[n - 1] + 1);
    for (int i = 0; i < n; i++) {
        ex[s[i]] = 1;
    }
    for (int i = 1; i <= s[n - 1]; i++) {
        sum[i] = sum[i - 1] + ex[i];
    }
        Z ans = 0;
    for (int x = 1; x <= s[n - 1]; x++) {
        int a = s[n - 1] / x, b = (s[n - 1] + x - 1) / x;
        Z res = 0;
        if (a == b) {
            for (int i = a; i <= s[n - 1]; i += a) {
                res += ex[i];
            }
        } else {
            for (int i = 1; i * a <= s[n - 1]; i++) {
                if (i >= a) {
                    res += sum[s[n - 1]] - sum[i * a - 1];
                    break;
                } else {
                    res += sum[std::min(s[n - 1], i * a + i)] - sum[i * a - 1];
                }
            }
        }
        ans += res * x;
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}