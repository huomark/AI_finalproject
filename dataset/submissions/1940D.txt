#include <bits/stdc++.h>
 using i64 = long long;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 1E9;
 struct Info {
    int sum = 0;
    int min = 0;
    int ans = 0;
    int maxa = -inf;
    int minb = inf;
};
 Info operator+(const Info &a, const Info &b) {
    Info c;
    c.sum = a.sum + b.sum;
    c.min = std::min(a.min, a.sum + b.min);
    c.ans = std::max(a.ans, b.ans);
    c.maxa = a.maxa;
    c.minb = b.minb;
    if (a.min == a.sum + b.min) {
        c.ans = std::max(c.ans, b.maxa - a.minb);
    } else if (a.min < a.sum + b.min) {
        c.minb = a.minb;
    } else {
        c.maxa = b.maxa;
    }
    return c;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        std::vector<std::pair<int, int>> p(2 * n);
    for (int i = 0; i < n; i++) {
        p[i] = {a[i], i + n};
        p[n + i] = {b[i], i};
    }
    std::sort(p.begin(), p.end());
    std::vector<int> invp(2 * n);
    for (int i = 0; i < 2 * n; i++) {
        invp[p[i].second] = i;
    }
        SegmentTree<Info> seg(2 * n);
        i64 sum = 0;
    for (int k = 1; k <= n; k++) {
        sum += a[k - 1] - b[k - 1];
        seg.modify(invp[k - 1], {1, 0, 0, -inf, b[k - 1]});
        seg.modify(invp[k - 1 + n], {-1, -1, 0, a[k - 1], inf});
        i64 ans = sum - seg.rangeQuery(0, 2 * n).ans;
        std::cout << ans << " \n"[k == n];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}