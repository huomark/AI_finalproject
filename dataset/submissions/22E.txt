#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int leader(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return leader(x) == leader(y);
    }
        bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[leader(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> f(n), in(n);
    DSU dsu(n);
    for (int i = 0; i < n; i++) {
        std::cin >> f[i];
        f[i]--;
        in[f[i]] += 1;
        dsu.merge(i, f[i]);
    }
        std::vector<int> a(n);
    std::vector<int> vis(n, -1);
    for (int i = 0; i < n; i++) {
        int j = i;
        while (vis[j] == -1) {
            vis[j] = i;
            j = f[j];
        }
        if (vis[j] == i) {
            a[dsu.leader(j)] = j;
        }
    }
        bool conn = true;
    for (int i = 0; i < n; i++) {
        if (!dsu.same(0, i) || in[i] != 1) {
            conn = false;
            break;
        }
    }
    if (conn) {
        std::cout << 0 << "\n";
        return 0;
    }
        std::vector<bool> used(n);
    std::vector<std::array<int, 2>> ed;
    std::vector<std::array<int, 2>> ans;
    for (int i = 0; i < n; i++) {
        if (in[i] == 0) {
            if (!used[dsu.leader(i)]) {
                ed.push_back({a[dsu.leader(i)], i});
                used[dsu.leader(i)] = true;
            } else {
                ans.push_back({a[dsu.leader(i)], i});
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (!used[dsu.leader(i)]) {
            ed.push_back({i, i});
            used[dsu.leader(i)] = true;
        }
    }
    for (int i = 0; i < ed.size(); i++) {
        ans.push_back({ed[i][0], ed[(i + 1) % ed.size()][1]});
    }
        std::cout << ans.size() << "\n";
    for (auto [x, y] : ans) {
        std::cout << x + 1 << " " << y + 1 << "\n";
    }
        return 0;
}