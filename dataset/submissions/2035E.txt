#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    i64 x, y, z, k;
    std::cin >> x >> y >> z >> k;
        i64 ans = 1E18;
    for (i64 s = 0; ; s++) {
        i64 cost = 0;
        cost += x * s * k;
        cost += y * s;
        i64 r = z - s * (s + 1) / 2 * k;
        if (r <= 0) {
            ans = std::min(ans, cost);
            break;
        }
        i64 d = s * k;
                for (i64 l = std::max<i64>(1, d); l <= d + k; ) {
            i64 t = (r + l - 1) / l;
            ans = std::min(ans, cost + (l - d) * x + t * y);
            if (t == 1) {
                break;
            }
            l = (r + t - 2) / (t - 1);
        }
        // for (i64 i = 0; i <= k; i++) {
        //     if (d + i > 0) {
        //         ans = std::min(ans, cost + i * x + (r + d + i - 1) / (d + i) * y);
        //     }
        // }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}