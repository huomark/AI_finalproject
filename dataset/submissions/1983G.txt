#include <bits/stdc++.h>
 using i64 = long long;
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedParent(int u, int v) {
        std::swap(u, v);
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedParent(u, v)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
 void solve() {
    int n;
    std::cin >> n;
        HLD t(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        t.addEdge(u, v);
    }
    t.work();
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<i64> s(n);
    std::vector c(30, std::vector<int>(n));
    std::vector ac(30, std::vector<int>(n));
    std::vector<int> stk;
    auto dfs = [&](auto self, int x) -> void {
        stk.push_back(x);
        s[x] += a[x];
        for (int i = 0; i < 30; i++) {
            c[i][x] += a[x] >> i & 1;
            if (t.dep[x] >= (2 << i)) {
                ac[i][x] = ac[i][stk[t.dep[x] - (2 << i)]];
                ac[i][x] += c[i][stk[t.dep[x] - (1 << i)]];
                ac[i][x] -= c[i][stk[t.dep[x] - (2 << i)]];
            } else if (t.dep[x] >= (1 << i)) {
                ac[i][x] = c[i][stk[t.dep[x] - (1 << i)]];
            }
        }
        for (auto y : t.adj[x]) {
            s[y] += s[x];
            for (int i = 0; i < 30; i++) {
                c[i][y] = c[i][x];
            }
            self(self, y);
        }
        stk.pop_back();
    };
    dfs(dfs, 0);
        int q;
    std::cin >> q;
        auto get = [&](int i, int x, int off) -> i64 {
        if (off > t.dep[x]) {
            if (off <= (1 << i)) {
                return i64(c[i][x]) << i;
            }
            if (t.dep[x] >= off - (1 << i)) {
                return i64(c[i][t.jump(x, off - (1 << i))]) << i;
            }
            return 0;
        }
        off = std::min(off, t.dep[x] + 1);
        i64 ans = 0;
        if (off > (1 << i)) {
            x = t.jump(x, off - (1 << i));
            off = 1 << i;
        }
        ans += c[i][x];
        if (off <= t.dep[x]) {
            x = t.jump(x, off);
            ans -= c[i][x];
            ans += ac[i][x];
        }
        return ans << i;
    };
        while (q--) {
        int x, y;
        std::cin >> x >> y;
        x--;
        y--;
        int l = t.lca(x, y);
        i64 ans = s[x] + s[y] - s[l] - (l > 0 ? s[t.parent[l]] : 0);
        int d = t.dist(x, y);
        ans += 1LL * d * (d + 1) / 2;
        i64 sand = 0;
        int dxl = t.dep[x] - t.dep[l];
        int dyl = t.dep[y] - t.dep[l];
        for (int i = 0; i < 30; i++) {
            sand += get(i, x, 0);
            sand += get(i, y, (d + (1 << i) + 1) % (2 << i));
            sand -= get(i, l, (2 << i) - dxl % (2 << i));
            sand -= get(i, l, (d + (3 << i) + 1 - dyl % (2 << i)) % (2 << i));
        }
        sand += dxl & a[l];
        ans -= 2 * sand;
        std::cout << ans << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}