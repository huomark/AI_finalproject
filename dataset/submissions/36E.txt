#include <bits/stdc++.h>
 using i64 = long long;
    #ifdef ONLINE_JUDGE
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
#else
    #define fin std::cin
    #define fout std::cout
#endif
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int leader(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return leader(x) == leader(y);
    }
        bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[leader(x)];
    }
};
int main() {
        int m;
    fin >> m;
        std::vector<int> a(m), b(m);
    std::vector<int> v;
    for (int i = 0; i < m; i++) {
        fin >> a[i] >> b[i];
        v.push_back(a[i]);
        v.push_back(b[i]);
    }
    std::sort(v.begin(), v.end());
    v.erase(std::unique(v.begin(), v.end()), v.end());
        if (m == 1) {
        fout << -1 << "\n";
        return 0;
    }
        for (int i = 0; i < m; i++) {
        a[i] = std::lower_bound(v.begin(), v.end(), a[i]) - v.begin();
        b[i] = std::lower_bound(v.begin(), v.end(), b[i]) - v.begin();
    }
        int n = v.size();
    std::vector<int> deg(n);
    for (int i = 0; i < m; i++) {
        deg[a[i]] += 1;
        deg[b[i]] += 1;
    }
        DSU dsu(n);
    std::vector<int> p;
    int comp = n;
    for (int i = 0; i < n; i++) {
        if (deg[i] % 2) {
            p.push_back(i);
        }
    }
    for (int i = 0; i < m; i++) {
        comp -= dsu.merge(a[i], b[i]);
    }
    if (p.size() > 4) {
        fout << -1 << "\n";
        return 0;
    }
    if (comp > 2) {
        fout << -1 << "\n";
        return 0;
    }
        std::vector<std::vector<std::pair<int, int>>> adj(n);
    if (comp == 1) {
        if (p.size() == 4) {
            adj[p[0]].emplace_back(p[1], m);
            adj[p[1]].emplace_back(p[0], m);
            deg[p[0]] += 1, deg[p[1]] += 1;
        }
    } else {
        if (p.size() == 4) {
            bool ok = false;
            for (int i = 1; i < 4; i++) {
                if (!dsu.same(p[0], p[i])) {
                    adj[p[0]].emplace_back(p[i], m);
                    adj[p[i]].emplace_back(p[0], m);
                    deg[p[0]] += 1, deg[p[i]] += 1;
                    ok = true;
                    break;
                }
            }
            if (!ok) {
                fout << -1 << "\n";
                return 0;
            }
        } else if (p.size() == 2) {
            for (int i = 0; i < n; i++) {
                if (!dsu.same(p[0], i)) {
                    adj[p[0]].emplace_back(i, m);
                    adj[i].emplace_back(p[0], m);
                    deg[p[0]] += 1, deg[i] += 1;
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (!dsu.same(0, i)) {
                    adj[0].emplace_back(i, m);
                    adj[i].emplace_back(0, m);
                    deg[0] += 1, deg[i] += 1;
                    break;
                }
            }
        }
    }
        int x = 0;
    while (x < n - 1 && deg[x] % 2 == 0) {
        x++;
    }
        std::vector<int> e;
    std::vector<bool> vis(m + 1);
    for (int i = 0; i < m; i++) {
        adj[a[i]].emplace_back(b[i], i);
        adj[b[i]].emplace_back(a[i], i);
    }
        std::function<void(int, int)> dfs = [&](int x, int p) {
        while (!adj[x].empty()) {
            auto [y, i] = adj[x].back();
            adj[x].pop_back();
            if (vis[i]) {
                continue;
            }
            vis[i] = true;
            dfs(y, i);
        }
        if (p != -1) {
            e.push_back(p);
        }
    };
    dfs(x, -1);
        auto it = std::find(e.begin(), e.end(), m);
    std::vector<int> A, B;
    if (it != e.end()) {
        A.assign(e.begin(), it);
        B.assign(it + 1, e.end());
    } else {
        A.assign(e.begin(), e.begin() + 1);
        B.assign(e.begin() + 1, e.end());
    }
        fout << A.size() << "\n";
    for (auto x : A) {
        fout << x + 1 << " \n"[x == A.back()];
    }
    fout << B.size() << "\n";
    for (auto x : B) {
        fout << x + 1 << " \n"[x == B.back()];
    }
        return 0;
}