#include <bits/stdc++.h>
 using i64 = long long;
 void gen(i64 n, i64 k, std::vector<i64> &d) {
    d.clear();
    while (n) {
        d.push_back(n % k);
        n /= k;
    }
    std::reverse(d.begin(), d.end());
}
 void solve() {
    i64 n, k;
    std::cin >> n >> k;
        std::vector<i64> dn, dx;
    gen(n, k, dn);
        const int d = dn.size();
    std::vector<i64> pw(d);
    pw[0] = 1;
    for (int i = 1; i < d; i++) {
        pw[i] = pw[i - 1] * k;
    }
    auto spw = pw;
    for (int i = 1; i < d; i++) {
        spw[i] += spw[i - 1];
    }
        auto get = [&](i64 x) {
        gen(x, k, dx);
        i64 ans = dx.size();
        for (int i = 0; i < dx.size(); i++) {
            i64 v = dx[i] - (i == 0);
            if (d - 2 - i >= 0) {
                ans += v * spw[d - 2 - i];
            }
        }
        if (dx > dn) {
            ans += n - pw[d - 1] + 1;
        } else {
            ans += x * pw[d - dx.size()] - pw[d - 1];
        }
        return ans;
    };
        i64 ans = 0;
    for (int i = 0; i < d; i++) {
        i64 l = pw[i], r = i < d - 1 ? pw[i + 1] - 1 : n;
        i64 lo = l, hi = r + 1;
        while (lo < hi) {
            i64 m = (lo + hi) / 2;
            if (get(m) >= m) {
                hi = m;
            } else {
                lo = m + 1;
            }
        }
        i64 L = lo;
        lo = l, hi = r + 1;
        while (lo < hi) {
            i64 m = (lo + hi) / 2;
            if (get(m) > m) {
                hi = m;
            } else {
                lo = m + 1;
            }
        }
        ans += lo - L;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}