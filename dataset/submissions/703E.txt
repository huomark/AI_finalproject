#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    i64 k;
    std::cin >> n >> k;
        int sqrtk = std::sqrt(k) + 1;
        std::vector<int> id1(sqrtk + 1), id2(sqrtk + 1);
        std::vector<i64> d;
    for (i64 i = 1; i * i <= k; i++) {
        if (k % i == 0) {
            d.push_back(i);
            if (i * i != k) {
                d.push_back(k / i);
            }
        }
    }
    std::sort(d.begin(), d.end());
        int m = d.size();
    for (int i = 0; i < m; i++) {
        if (d[i] <= sqrtk) {
            id1[d[i]] = i;
        } else {
            id2[k / d[i]] = i;
        }
    }
        auto id = [&](i64 x) {
        if (x <= sqrtk) {
            return id1[x];
        } else {
            return id2[k / x];
        }
    };
        std::vector dp(n + 1, std::vector(m, std::pair(int(1E9), i64(1E18))));
    dp[0][m - 1] = {0, 0};
        std::vector<i64> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        if (k == 1) {
        std::cout << 1 << "\n";
        std::cout << std::min_element(a.begin(), a.end()) - a.begin() + 1 << "\n";
        return 0;
    }
        std::vector f(n, std::vector<int>(m));
        for (int i = 0; i < n; i++) {
        dp[i + 1] = dp[i];
        i64 x = std::gcd(a[i], k);
        for (int j = 0; j < m; j++) {
            f[i][j] = id(d[j] / std::gcd(x, d[j]));
            auto &res = dp[i + 1][f[i][j]];
            res = std::min(res, std::pair(dp[i][j].first + 1, dp[i][j].second + a[i]));
        }
    }
        if (dp[n][0].first == 1E9) {
        std::cout << -1 << "\n";
        return 0;
    }
        std::cout << dp[n][0].first << "\n";
    int p = 0;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < m; j++) {
            if (f[i][j] == p && dp[i + 1][p].first == dp[i][j].first + 1
                && dp[i + 1][p].second == dp[i][j].second + a[i]) {
                p = j;
                std::cout << i + 1 << " \n"[j == m - 1];
                break;
            }
        }
    }
        return 0;
}