#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n), b(m);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
    for (int i = 0; i < m; i++) {
        std::cin >> b[i];
        b[i]--;
    }
        std::vector<std::vector<int>> adj(m);
    for (int i = 0; i < m; i++) {
        adj[b[i]].push_back(i);
    }
        std::vector<int> vis(m, -1);
    std::vector<int> dep(m), pos(m, -1), rt(m), bel(m), len(m);
    for (int i = 0; i < m; i++) {
        int j = i;
        while (vis[j] == -1) {
            vis[j] = i;
            j = b[j];
        }
        if (vis[j] == i) {
            int k = j;
            int cur = 0;
            do {
                bel[k] = j;
                rt[k] = k;
                pos[k] = cur++;
                k = b[k];
            } while (k != j);
            len[j] = cur;
        }
    }
        int cur = 0;
    std::vector<int> in(m), out(m);
    auto dfs = [&](auto self, int x) -> void {
        in[x] = cur++;
        for (auto y : adj[x]) {
            if (pos[y] != -1) {
                continue;
            }
            rt[y] = rt[x];
            bel[y] = bel[x];
            dep[y] = dep[x] + 1;
            self(self, y);
        }
        out[x] = cur;
    };
    for (int i = 0; i < m; i++) {
        if (pos[i] != -1) {
            dfs(dfs, i);
        }
    }
        auto reachable = [&](int x, int y, int k) {
        if (bel[x] != bel[y]) {
            return false;
        }
        if (in[y] <= in[x] && in[x] < out[y] && dep[x] - dep[y] <= k) {
            return true;
        }
        if (pos[y] == -1) {
            return false;
        }
        int r = rt[x];
        int dis = dep[x];
        int l = len[bel[y]];
        dis += (pos[y] - pos[r] + l) % l;
        return dis <= k;
    };
        auto check = [&](int k) {
        for (int i = 0, j = 0; i < n; i++) {
            while (j < m && !reachable(a[i], j, k)) {
                j++;
            }
            if (j == m) {
                return false;
            }
        }
        return true;
    };
        int lo = 0, hi = m;
    while (lo < hi) {
        int x = (lo + hi) / 2;
        if (check(x)) {
            hi = x;
        } else {
            lo = x + 1;
        }
    }
    int ans = lo;
    if (ans == m) {
        ans = -1;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}