#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, k;
    std::cin >> n >> k;
        if (n == 1) {
        std::cout << "ACCEPTED\n";
        return 0;
    }
        std::vector<u64> s(k);
    for (int i = 0; i < k; i++) {
        int l;
        std::cin >> l;
        for (int j = 0; j < l; j++) {
            int a;
            std::cin >> a;
            a--;
            s[i] |= 1ULL << a;
        }
    }
        auto dfs = [&](this auto &&self, int i, u64 t0, u64 t1) {
        if (i == k) {
            int l = std::popcount(t0);
            if (t0 != (1ULL << l) - 1 || t1 != (1ULL << n) - (1ULL << l)) {
                std::cout << "REJECTED\n";
                std::exit(0);
            }
            return;
        }
                int cnt0 = std::popcount(t0 & s[i]);
        int cnt1 = std::popcount(t1 & s[i]);
        int free = std::popcount(s[i]) - cnt0 - cnt1;
        t0 &= ~s[i];
        t1 |= s[i];
                i64 tmp = s[i];
        for (int j = 0; j <= cnt0 + free; j++) {
            if (j) {
                u64 x = tmp & -tmp;
                tmp ^= x;
                t0 ^= x;
                t1 ^= x;
            }
            if (j >= cnt0) {
                self(i + 1, t0, t1);
            }
        }
    };
    dfs(0, 0, 0);
        std::cout << "ACCEPTED\n";
        return 0;
}