#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
    DSU(int n) : f(n), siz(n, 1) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        while (x != f[x]) x = f[x] = f[f[x]];
        return x;
    }
    bool same(int x, int y) { return leader(x) == leader(y); }
    bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) return false;
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
    int size(int x) { return siz[leader(x)]; }
};
 int f(int x) {
    int ans = 0;
    while (x > 0) {
        ans += x % 10;
        x /= 10;
    }
    return ans;
}
 void solve() {
    int n, q;
    std::cin >> n >> q;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        DSU dsu(n + 1);
    for (int i = 0; i < q; i++) {
        int o;
        std::cin >> o;
                if (o == 1) {
            int l, r;
            std::cin >> l >> r;
            l--;
                        int x = dsu.leader(l);
            while (x < r) {
                a[x] = f(a[x]);
                if (a[x] < 10) {
                    dsu.merge(x + 1, x);
                }
                x = dsu.leader(x + 1);
            }
        } else {
            int x;
            std::cin >> x;
            x--;
            std::cout << a[x] << "\n";
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}