#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> r(n);
    for (int i = 0; i < n; i++) {
        std::cin >> r[i];
        r[i]--;
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < n; i++) {
        adj[r[i]].push_back(i);
    }
        std::vector<bool> vis(n), cyc(n);
    for (int i = 0; i < n; i++) {
        if (vis[i]) {
            continue;
        }
        std::vector<int> a;
        int j = i;
        while (!vis[j]) {
            a.push_back(j);
            vis[j] = true;
            j = r[j];
        }
        for (auto it = std::find(a.begin(), a.end(), j); it != a.end(); it++) {
            cyc[*it] = true;
        }
    }
        int ans = 0;
        std::vector<int> siz(n), dep(n);
    auto dfs = [&](this auto &&self, int x) -> void {
        siz[x] = 1;
        for (auto y : adj[x]) {
            if (cyc[y]) {
                continue;
            }
            dep[y] = dep[x] + 1;
            self(y);
            siz[x] += siz[y];
        }
        if (!cyc[x]) {
            ans = std::max(ans, dep[x] + siz[x] - 1);
        }
    };
    for (int i = 0; i < n; i++) {
        if (cyc[i]) {
            dfs(i);
        }
    }
    std::cout << ans + 2 << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}