#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int dx[] = {-1, 1, 0, 0};
constexpr int dy[] = {0, 0, -1, 1};
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<std::string> s(n);
    int vx = 0, vy = 0;
    int empty = 0;
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
        for (int j = 0; j < m; j++) {
            if (s[i][j] == 'V') {
                vx = i, vy = j;
            }
            if (s[i][j] == '.') {
                empty += 1;
            }
        }
    }
    int ans = empty;
        std::vector dis(n, std::vector(m, -1));
    std::queue<std::pair<int, int>> q;
    q.emplace(vx, vy);
    dis[vx][vy] = 0;
        int cnt = 0;
    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();
                if (x == 0 || y == 0 || x == n - 1 || y == m - 1) {
            cnt += 1;
        }
                for (int k = 0; k < 4; k++) {
            int nx = x + dx[k];
            int ny = y + dy[k];
            if (0 <= nx && nx < n && 0 <= ny && ny < m && dis[nx][ny] == -1 && s[nx][ny] != '#') {
                dis[nx][ny] = dis[x][y] + 1;
                q.emplace(nx, ny);
            }
        }
    }
        if (cnt == 0) {
        ans = 0;
    } else if (cnt == 1) {
        for (int x = 0; x < n; x++) {
            for (int y = 0; y < m; y++) {
                if ((x == 0 || y == 0 || x == n - 1 || y == m - 1) && dis[x][y] != -1) {
                    ans = std::min(ans, dis[x][y]);
                }
            }
        }
    } else {
        std::queue<std::array<int, 4>> q;
        std::vector dise(n, std::vector(m, std::array{-1, -1}));
        std::vector ex(n, std::vector(m, std::array{-1, -1}));
        for (int x = 0; x < n; x++) {
            for (int y = 0; y < m; y++) {
                if ((x == 0 || y == 0 || x == n - 1 || y == m - 1) && s[x][y] != '#') {
                    q.push({x, y, 0, x * m + y});
                }
            }
        }
        while (!q.empty()) {
            auto [x, y, d, e] = q.front();
            q.pop();
                        if (dise[x][y][0] == -1) {
                dise[x][y][0] = d;
                ex[x][y][0] = e;
            } else if (dise[x][y][1] == -1 && e != ex[x][y][0]) {
                dise[x][y][1] = d;
                ex[x][y][1] = e;
            } else {
                continue;
            }
                        for (int k = 0; k < 4; k++) {
                int nx = x + dx[k];
                int ny = y + dy[k];
                if (0 <= nx && nx < n && 0 <= ny && ny < m && s[nx][ny] != '#') {
                    q.push({nx, ny, d + 1, e});
                }
            }
        }
                for (int x = 0; x < n; x++) {
            for (int y = 0; y < m; y++) {
                if (dis[x][y] != -1 && dise[x][y][1] != -1) {
                    ans = std::min(ans, dis[x][y] + dise[x][y][0] + dise[x][y][1]);
                }
            }
        }
    }
        ans = empty - ans;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}