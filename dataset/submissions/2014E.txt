#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, m, h;
    std::cin >> n >> m >> h;
        std::vector<bool> horse(n);
    for (int i = 0; i < h; i++) {
        int a;
        std::cin >> a;
        a--;
        horse[a] = true;
    }
        std::vector<std::vector<std::array<int, 2>>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        u--;
        v--;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }
        auto dijkstra = [&](int s) {
        std::vector<i64> dis(2 * n, inf);
        std::priority_queue<std::pair<i64, int>, std::vector<std::pair<i64, int>>, std::greater<>> pq;
        pq.emplace(0LL, 2 * s);
                while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
                        if (dis[u] != inf) {
                continue;
            }
            dis[u] = d;
                        int x = u / 2;
            int t = u % 2;
                        if (!t && horse[x]) {
                pq.emplace(d, 2 * x + 1);
            }
                        for (auto [y, w] : adj[x]) {
                pq.emplace(d + (t ? w / 2 : w), 2 * y + t);
            }
        }
                std::vector<i64> d(n, inf);
        for (int i = 0; i < n; i++) {
            d[i] = std::min(dis[2 * i], dis[2 * i + 1]);
        }
        return d;
    };
        auto d1 = dijkstra(0);
    auto dn = dijkstra(n - 1);
        i64 ans = inf;
    for (int i = 0; i < n; i++) {
        ans = std::min(ans, std::max(d1[i], dn[i]));
    }
        if (ans == inf) {
        ans = -1;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}