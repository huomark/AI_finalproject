#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        i64 k;
    std::cin >> k;
        constexpr int N = 2025;
    constexpr int M = 30;
    std::vector ans(N, std::string(N, '#'));
    i64 tot = 1LL * N * (N - 1) / 2 * N * (N - 1) / 2;
    for (int i = 0; i <= M; i++) {
        for (int j = 0; j <= M; j++) {
            tot -= (N - 1 - i) * (N - 1 - j);
            ans[i][j] = '.';
        }
    }
        int lastx = -1, lasty = -1;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (ans[i][j] == '#' && tot > k) {
                tot -= (N - 1 - i) * (N - 1 - j);
                ans[i][j] = '.';
                lastx = i;
                lasty = j;
            }
        }
    }
    // std::cerr << lastx << " " << lasty << "\n";
        auto work = [&](int x, int y) {
        while (tot < k - N) {
            int len = 0;
            while (tot + 1LL * len * (len + 1) / 2 * (N - 1 - x) <= k) {
                len++;
            }
            tot += 1LL * len * (len - 1) / 2 * (N - 1 - x);
            y--;
            for (int i = 0; i < len; i++) {
                ans[x][y--] = '#';
            }
        }
    };
        if (lasty > 300) {
        work(lastx, lasty);
    } else {
        work(lastx - 1, N - 1);
    }
        k -= tot;
    // std::cerr << "k : " << k << "\n";
        int curx = 0;
    int cury = 0;
    while (k >= M * (M - 1) / 2) {
        int len = 2;
        while (len * (len + 1) / 2 * M * (M - 1) / 2 <= k) {
            len++;
        }
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < M; j++) {
                ans[curx + i][cury + j] = '#';
            }
        }
        k -= len * (len - 1) / 2 * M * (M - 1) / 2;
        curx += len + 1;
    }
    while (k) {
        int len = 2;
        while (len * (len + 1) / 2 <= k) {
            len++;
        }
        if (cury + len > M) {
            curx += 3;
            cury = 0;
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < len; j++) {
                ans[curx + i][cury + j] = '#';
            }
        }
        k -= len * (len - 1) / 2;
        cury += len + 1;
    }
        std::cout << N << " " << N << "\n";
    for (int i = 0; i < N; i++) {
        std::cout << ans[i] << "\n";
    }
    // for (int i = 0; i < M; i++) {
    //     std::cerr << ans[i].substr(0, M) << "\n";
    // }
        return 0;
}