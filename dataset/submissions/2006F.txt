#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
// TODO: Dynamic ModInt
 template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x {0} {}
        template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x {norm(x_ % T {P})} {}
        constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
        constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
        friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
        friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
 template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 constexpr u32 P = 998244353;
using Z = ModInt<P>;
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> degr(n, n), degc(n);
    std::vector<int> x(m), y(m);
    for (int i = 0; i < m; i++) {
        std::cin >> x[i] >> y[i];
        x[i]--;
        y[i]--;
        degr[x[i]]--;
        degc[y[i]]++;
    }
        std::vector<int> fr(n + 1), fc(n + 1);
    for (int i = 0; i < n; i++) {
        fr[degr[i]]++;
        fc[degc[i]]++;
    }
        int cnt = 0;
    std::vector<int> idr(2 * n, -1), idc(2 * n, -1);
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j < fr[i]; j++) {
            idr[cnt + i] = i;
            cnt++;
        }
    }
    cnt = 0;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j < fc[i]; j++) {
            idc[cnt + i] = i;
            cnt++;
        }
    }
        // for (int i = 0; i < 2 * n; i++) {
    //     std::cerr << idr[i] << " \n"[i == 2 * n - 1];
    // }
    // for (int i = 0; i < 2 * n; i++) {
    //     std::cerr << idc[i] << " \n"[i == 2 * n - 1];
    // }
        int bad = -1;
    for (int i = 0; i < 2 * n; i++) {
        if (idr[i] != -1 && idc[i] != -1) {
            bad = i;
        }
    }
        Z res = 1;
    for (int i = 0; i <= n; i++) {
        res *= comb.fac(fr[i]);
        res *= comb.fac(fc[i]);
    }
        Z ans = 0;
        if (bad == -1) {
        for (int i = 1; i < 2 * n; i++) {
            if (idr[i - 1] != -1 && idc[i] != -1) {
                int r = idr[i - 1];
                int c = idc[i];
                Z ways = Z(fr[r]) * fc[c];
                Z v = res;
                v *= comb.inv(fr[r]);
                v *= comb.inv(fc[c]);
                fr[r]--;
                fr[r + 1]++;
                fc[c]--;
                fc[c - 1]++;
                v *= fr[r + 1];
                v *= fc[c - 1];
                ans += v * comb.invfac(fr[0]) * comb.invfac(fc[0]) * ways;
                fr[r]++;
                fr[r + 1]--;
                fc[c]++;
                fc[c - 1]--;
            }
            if (idc[i - 1] != -1 && idr[i] != -1) {
                int c = idc[i - 1];
                int r = idr[i];
                Z ways = Z(fr[r]) * fc[c];
                Z v = res;
                v *= comb.inv(fr[r]);
                v *= comb.inv(fc[c]);
                fr[r]--;
                fr[r - 1]++;
                fc[c]--;
                fc[c + 1]++;
                v *= fr[r - 1];
                v *= fc[c + 1];
                ans += v * comb.invfac(fr[0]) * comb.invfac(fc[0]) * ways;
                fr[r]++;
                fr[r - 1]--;
                fc[c]++;
                fc[c + 1]--;
            }
        }
    } else {
        std::vector<int> a, b;
        for (int i = 0; i < 2 * n; i++) {
            if (idr[i] != -1 && idc[i] != -1) {
                a.push_back(i);
            }
            if (idr[i] == -1 && idc[i] == -1) {
                b.push_back(i);
            }
        }
        assert(a.size() == b.size());
        if (a.size() == 2) {
            if (std::abs(a[0] - b[0]) == 1 && std::abs(a[1] - b[1]) == 1) {
                for (int t = 0; t < 2; t++) {
                    int r = idr[a[0]];
                    int c = idc[a[1]];
                    int nr = r + (a[0] > b[0] ? -1 : 1);
                    int nc = c + (a[1] > b[1] ? -1 : 1);
                    if (r != -1 && c != -1 && (r > nr) != (c > nc)) {
                    // std::cerr << "r : " << r << ", c : " << c << " " << nr << " " << nc << "\n";
                        Z ways = (r < nr ? 0 : Z(fr[r]) * fc[c]);
                        for (int i = 0; i < m; i++) {
                            if (degr[x[i]] == r && degc[y[i]] == c) {
                                ways += (r < nr ? 1 : -1);
                            }
                        }
                        Z v = res;
                        v *= comb.inv(fr[r]);
                        v *= comb.inv(fc[c]);
                        fr[r]--;
                        fr[nr]++;
                        fc[c]--;
                        fc[nc]++;
                        v *= fr[nr];
                        v *= fc[nc];
                        ans += v * comb.invfac(fr[0]) * comb.invfac(fc[0]) * ways;
                        fr[r]++;
                        fr[nr]--;
                        fc[c]++;
                        fc[nc]--;
                    }
                    std::swap(a[0], a[1]);
                    std::swap(b[0], b[1]);
                }
            }
        }
    }
        ans /= n;
    ans /= n;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}