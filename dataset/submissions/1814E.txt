#include <bits/stdc++.h>
 using i64 = long long;
template<class Info,
    class Merge = std::plus<Info>>
struct SegmentTree {
    const int n;
    const Merge merge;
    std::vector<Info> info;
    SegmentTree(int n) : n(n), merge(Merge()), info(4 << std::__lg(n)) {}
    SegmentTree(std::vector<Info> init) : SegmentTree(init.size()) {
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = merge(info[2 * p], info[2 * p + 1]);
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
};
 constexpr i64 inf = 1E18;
 struct Info {
    i64 a[2][2];
        Info() : a{} {
        a[0][1] = a[1][0] = inf;
    }
        Info(int x) {
        a[0][0] = inf;
        a[0][1] = x;
        a[1][0] = 0;
        a[1][1] = x;
    }
};
 Info operator+(Info a, Info b) {
    Info c;
    c.a[0][0] = c.a[1][1] = inf;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                c.a[i][j] = std::min(c.a[i][j], a.a[i][k] + b.a[k][j]);
            }
        }
    }
    return c;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n - 1);
    SegmentTree<Info> seg(n - 1);
    for (int i = 0; i < n - 1; i++) {
        std::cin >> a[i];
        seg.modify(i, a[i]);
    }
        int q;
    std::cin >> q;
    while (q--) {
        int x, y;
        std::cin >> x >> y;
        x--;
        seg.modify(x, y);
                std::cout << 2 * seg.rangeQuery(0, n - 1).a[0][1] << "\n";
    }
        return 0;
}