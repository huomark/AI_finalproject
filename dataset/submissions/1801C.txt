#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 struct Max {
    int x = -1E9;
    Max &operator+=(Max a) {
        x = std::max(x, a.x);
        return *this;
    }
};
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> a(n);
    std::vector<int> val;
    for (int i = 0; i < n; i++) {
        int k;
        std::cin >> k;
                for (int j = 0; j < k; j++) {
            int x;
            std::cin >> x;
                        if (a[i].empty() || x > a[i].back()) {
                a[i].push_back(x);
                val.push_back(x);
            }
        }
    }
        std::sort(a.begin(), a.end(), [&](auto &a, auto &b) {
        return a.back() < b.back();
    });
        std::sort(val.begin(), val.end());
        Fenwick<Max> fen(val.size());
        int ans = 0;
    for (auto &v : a) {
        for (auto &x : v) {
            x = std::lower_bound(val.begin(), val.end(), x) - val.begin();
        }
        int res = v.size();
        for (int i = 0; i < v.size(); i++) {
            res = std::max(res, int(v.size()) - i + fen.sum(v[i]).x);
        }
        fen.add(v.back(), {res});
        ans = std::max(ans, res);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}