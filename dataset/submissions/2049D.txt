#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, m, K;
    std::cin >> n >> m >> K;
        std::vector a(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> a[i][j];
        }
    }
        std::vector<i64> dp(m, inf);
    dp[0] = 0;
    for (int i = 0; i < n; i++) {
        std::vector<i64> ndp(m, inf);
        for (int j = 0; j < m; j++) {
            auto g = dp;
            for (int k = 0; k < m; k++) {
                if (k) {
                    g[k] = std::min(g[k], g[k - 1]);
                }
                g[k] += a[i][(j + k) % m];
                ndp[k] = std::min(ndp[k], g[k] + 1LL * j * K);
            }
        }
        dp = std::move(ndp);
    }
        std::cout << dp[m - 1] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}