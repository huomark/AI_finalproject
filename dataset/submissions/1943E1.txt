#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int m, k;
    std::cin >> m >> k;
        m++;
    std::vector<int> f(m);
    for (int i = 0; i < m; i++) {
        std::cin >> f[i];
    }
        auto check = [&](int n) {
        std::vector<int> g(f.begin(), f.begin() + n);
        std::sort(g.begin(), g.end());
        for (int i = 1; i <= n; i++) {
            std::vector<int> a(g.begin(), g.begin() + i);
            for (int t = 1; t < a.size(); t++) {
                int res = k;
                for (int i = a.size() - 1; i >= t; i--) {
                    int v = a[i] - (i > t ? a[i - 1] : 0);
                    i64 need = 1LL * v * (a.size() - i);
                    if (need > res) {
                        int base = a[i];
                        for (int j = i; j < a.size(); j++) {
                            a[j] = base - res / (a.size() - i) - (j - i < res % (a.size() - i));
                        }
                        break;
                    } else {
                        res -= need;
                        if (i == t) {
                            std::fill(a.begin() + t, a.end(), 0);
                        }
                    }
                }
            }
            if (a.back() == 0) {
                return false;
            }
        }
        return true;
    };
        int lo = 0, hi = m;
    while (lo < hi) {
        int x = (lo + hi + 1) / 2;
        if (check(x)) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
    std::cout << lo << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}