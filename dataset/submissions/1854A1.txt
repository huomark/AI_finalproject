#include <bits/stdc++.h>
 using i64 = long long;
 std::vector<std::pair<int, int>> work(std::vector<int> a) {
    int n = a.size();
        auto [mn, mx] = std::minmax_element(a.begin(), a.end());
    if (*mx + *mn < 0) {
        for (auto &x : a) {
            x = -x;
        }
        std::reverse(a.begin(), a.end());
        auto ans = work(a);
        for (auto &[x, y] : ans) {
            x = n - 1 - x;
            y = n - 1 - y;
        }
        return ans;
    }
        std::vector<std::pair<int, int>> ans;
    int k = mx - a.begin();
        int cntneg = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] < 0) {
            cntneg++;
        }
    }
    if (cntneg <= 12) {
        for (int i = 0; i < n; i++) {
            if (a[i] < 0) {
                a[i] += a[k];
                ans.emplace_back(i, k);
            }
        }
        for (int i = 1; i < n; i++) {
            a[i] += a[i - 1];
            ans.emplace_back(i, i - 1);
        }
        return ans;
    }
    int x = mn - a.begin();
    for (int i = 0; i < 5; i++) {
        a[x] += a[x];
        ans.emplace_back(x, x);
    }
    for (int i = 0; i < n; i++) {
        if (a[i] > 0) {
            a[i] += a[x];
            ans.emplace_back(i, x);
        }
    }
    for (int i = n - 2; i >= 0; i--) {
        a[i] += a[i + 1];
        ans.emplace_back(i, i + 1);
    }
    return ans;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        auto ans = work(a);
    std::cout << ans.size() << "\n";
    for (auto [x, y] : ans) {
        std::cout << x + 1 << " " << y + 1 << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}