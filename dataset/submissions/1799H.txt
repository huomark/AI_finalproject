#include <bits/stdc++.h>
 using i64 = long long;
 template<class T>
constexpr T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 template<int P>
struct MInt {
    int x;
    constexpr MInt() : x{} {}
    constexpr MInt(i64 x) : x{norm(x % P)} {}
        constexpr int norm(int x) const {
        if (x < 0) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
    constexpr int val() const {
        return x;
    }
    explicit constexpr operator int() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(P - x);
        return res;
    }
    constexpr MInt inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    constexpr MInt &operator*=(MInt rhs) {
        x = 1LL * x * rhs.x % P;
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
};
 template<int V, int P>
constexpr MInt<P> CInv = MInt<P>(V).inv();
 constexpr int P = 998244353;
using Z = MInt<P>;
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        int k;
    std::cin >> k;
        std::vector<int> s(k + 1);
    s[0] = n;
    for (int i = 1; i <= k; i++) {
        std::cin >> s[i];
    }
        for (int i = 0; i < k; i++) {
        s[i] -= s[i + 1];
    }
        k += 1;
        std::vector<int> sum(1 << k);
    for (int mask = 1; mask < (1 << k); mask++) {
        int x = __builtin_ctz(mask);
        sum[mask] = sum[mask ^ (1 << x)] + s[x];
    }
        std::vector dp(n, std::vector(k, std::vector(1 << k, std::array<Z, 2>{})));
    std::vector<int> siz(n);
        auto dfs = [&](auto self, int x, int p) -> void {
        for (int i = 0; i < k; i++) {
            dp[x][i][0][0] = 1;
        }
        siz[x] = 1;
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
                        siz[x] += siz[y];
                        for (int S = (1 << k) - 1; S >= 0; S--) {
                for (int i = 0; i < k; i++) {
                    if (S >> i & 1) {
                        continue;
                    }
                    int other = (1 << k) - 1 - S - (1 << i);
                    auto val = dp[x][i][S];
                    dp[x][i][S] = {};
                    for (int T = other; ; T = (T - 1) & other) {
                        for (int j = 0; j < k; j++) {
                            if (~T >> j & 1) {
                                continue;
                            }
                            if (siz[y] == sum[T]) {
                                if (i > j) {
                                    dp[x][i][S | T][0] += val[0] * dp[y][j][T ^ (1 << j)][0];
                                    dp[x][i][S | T][1] += val[1] * dp[y][j][T ^ (1 << j)][0];
                                }
                                if (i < j) {
                                    dp[x][i][S | T][1] += val[0] * dp[y][j][T ^ (1 << j)][j < k - 1];
                                }
                            }
                        }
                        dp[x][i][S | T][0] += val[0] * dp[y][i][T][0];
                        dp[x][i][S | T][1] += val[0] * dp[y][i][T][1];
                        dp[x][i][S | T][1] += val[1] * dp[y][i][T][0];
                        if (T == 0) {
                            break;
                        }
                    }
                }
            }
        }
    };
    dfs(dfs, 0, -1);
        Z ans = 0;
    for (int i = 0; i < k; i++) {
        ans += dp[0][i][(1 << k) - 1 - (1 << i)][i < k - 1];
    }
    std::cout << ans << "\n";
        return 0;
}