#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 5E5;
std::vector<int> divs[N + 1];
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n + 1), q(n + 1);
    std::vector<std::pair<int, int>> a, b;
    i64 ans = 0;
    for (int i = 1; i <= n; i++) {
        std::cin >> p[i];
        q[i] = i;
        int g = std::gcd(p[i], q[i]);
        p[i] /= g;
        q[i] /= g;
        for (auto x : divs[p[i]]) {
            a.emplace_back(x, q[i]);
            b.emplace_back(q[i], x);
        }
        if (q[i] == 1) {
            ans--;
        }
    }
    std::sort(a.begin(), a.end());
    std::sort(b.begin(), b.end());
        for (int i = 0, l = 0, r = 0; i < a.size(); i++) {
        while (l < b.size() && b[l] < a[i]) {
            l++;
        }
        while (r < b.size() && b[r] <= a[i]) {
            r++;
        }
        ans += r - l;
    }
    ans /= 2;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        for (int i = 1; i <= N; i++) {
        for (int j = i; j <= N; j += i) {
            divs[j].push_back(i);
        }
    }
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}