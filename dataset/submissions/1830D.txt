#include <bits/stdc++.h>
 using i64 = long long;
constexpr int inf = 1E9;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    // std::mt19937 rng;
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        // u = i + 1;
        // v = rng() % i + 1;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        i64 ans = 1LL * n * (n + 1);
        std::vector dp(n, std::vector(2, std::vector<int>{}));
    std::function<void(int, int)> dfs = [&](int x, int p) {
        dp[x][0] = dp[x][1] = {0, 0};
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            dfs(y, x);
            for (int i = 0; i < 2; i++) {
                std::vector<int> g(dp[x][i].size() + dp[y][i].size() - 1, inf);
                for (int a = 1; a < dp[x][i].size(); a++) {
                    for (int b = 0; b < dp[y][i].size(); b++) {
                        g[a + b] = std::min(g[a + b], dp[x][i][a] + dp[y][i][b]);
                    }
                }
                int s = g.size() - 1;
                while (s > 1 && g[s] + 1LL * s * (s + 1) / 2 * (i + 1) >= g[s - 1] + 1LL * (s - 1) * s / 2 * (i + 1)) {
                    g.pop_back();
                    s--;
                }
                dp[x][i] = std::move(g);
            }
        }
        for (int i = 0; i < 2; i++) {
            i64 res = 1E18;
            for (int j = 1; j < dp[x][!i].size(); j++) {
                res = std::min(res, dp[x][!i][j] + 1LL * j * (j + 1) / 2 * (!i + 1));
            }
            dp[x][i][0] = res;
        }
    };
    dfs(0, -1);
        ans -= std::min(dp[0][0][0], dp[0][1][0]);
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}