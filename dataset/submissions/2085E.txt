#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 namespace ranges = std::ranges;
namespace views = std::views;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        ranges::sort(a);
    ranges::sort(b);
        if (a == b) {
        std::cout << int(1E9) << "\n";
        return;
    }
        i64 suma = std::accumulate(a.begin(), a.end(), 0LL);
    i64 sumb = std::accumulate(b.begin(), b.end(), 0LL);
        i64 diff = suma - sumb;
    if (diff <= 0) {
        std::cout << -1 << "\n";
        return;
    }
        auto na = a;
    auto check = [&](i64 k) {
        if (k > int(1E9)) {
            return false;
        }
        na = a;
        for (auto &x : na) {
            x %= k;
        }
        ranges::sort(na);
        return na == b;
    };
    for (i64 i = 1; i * i <= diff; i++) {
        if (diff % i == 0) {
            if (check(i)) {
                std::cout << i << "\n";
                return;
            }
            if (check(diff / i)) {
                std::cout << diff / i << "\n";
                return;
            }
        }
    }
    std::cout << -1 << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}