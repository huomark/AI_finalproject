#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<std::vector<int>> adj(n);
    std::map<std::pair<int, int>, int> id;
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
                u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
        id[std::minmax(u, v)] = i;
    }
        std::vector<int> c(n, -1), prev(n, -1);
    std::vector<int> cyc;
    for (int i = 0; i < n; i++) {
        if (c[i] == -1) {
            std::queue<int> q;
            q.push(i);
            c[i] = 0;
            while (!q.empty()) {
                int x = q.front();
                q.pop();
                for (auto y : adj[x]) {
                    if (c[y] == -1) {
                        c[y] = c[x] ^ 1;
                        prev[y] = x;
                        q.push(y);
                    } else if (c[x] == c[y] && cyc.empty()) {
                        std::vector<int> l, r;
                        for (int j = x; j != -1; j = prev[j]) {
                            l.push_back(j);
                        }
                        for (int j = y; j != -1; j = prev[j]) {
                            r.push_back(j);
                        }
                        int lst = -1;
                        while (!l.empty() && !r.empty() && l.back() == r.back()) {
                            lst = l.back();
                            l.pop_back();
                            r.pop_back();
                        }
                        l.push_back(lst);
                        std::reverse(r.begin(), r.end());
                        l.insert(l.end(), r.begin(), r.end());
                        cyc = l;
                    }
                }
            }
        }
    }
        if (cyc.empty()) {
        std::cout << m << "\n";
        for (int i = 0; i < m; i++) {
            std::cout << i + 1 << " \n"[i == m - 1];
        }
        return 0;
    }
        std::vector<int> pos(n, -1);
    int L = cyc.size();
    for (int i = 0; i < cyc.size(); i++) {
        pos[cyc[i]] = i;
    }
        c.assign(n, -1);
    std::vector<int> d(L + 1);
    for (int i = 0; i < n; i++) {
        if (c[i] == -1) {
            std::queue<int> q;
            q.push(i);
            c[i] = 0;
            int t = -1;
            while (!q.empty()) {
                int x = q.front();
                q.pop();
                if (pos[x] != -1) {
                    if (t == -1) {
                        t = x;
                    } else {
                        int a = t, b = x;
                        if (pos[a] > pos[b]) {
                            std::swap(a, b);
                        }
                        if ((pos[b] - pos[a]) % 2 == (c[a] ^ c[b])) {
                            d[pos[a]] += 1;
                            d[pos[b]] -= 1;
                        } else {
                            d[0] += 1;
                            d[pos[a]] -= 1;
                            d[pos[b]] += 1;
                        }
                    }
                }
                for (auto y : adj[x]) {
                    if (pos[x] != -1 && pos[y] != -1) {
                        if (pos[y] == (pos[x] + 1) % L) {
                            continue;
                        }
                        if (pos[x] == (pos[y] + 1) % L) {
                            continue;
                        }
                    }
                    if (c[y] == -1) {
                        c[y] = c[x] ^ 1;
                        q.push(y);
                    } else if (c[x] == c[y]) {
                        std::cout << 0 << "\n";
                        return 0;
                    }
                }
            }
        }
    }
        for (int i = 1; i <= L; i++) {
        d[i] += d[i - 1];
    }
        std::vector<int> ans;
    for (int i = 0; i < L; i++) {
        if (d[i] == 0) {
            ans.push_back(id[std::minmax(cyc[i], cyc[(i + 1) % L])] + 1);
        }
    }
    std::sort(ans.begin(), ans.end());
    std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x << " \n"[x == ans.back()];
    }
        return 0;
}