#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 namespace ranges = std::ranges;
namespace views = std::views;
 void solve() {
    int n;
    i64 k;
    std::cin >> n >> k;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
    std::vector<i64> pre(n + 1);
    for (int i = 0; i < n; i++) {
        pre[i + 1] = pre[i] + a[i] - b[i];
    }
        {
        int x = ranges::min_element(pre) - pre.begin();
        std::rotate(a.begin(), a.begin() + x, a.end());
        std::rotate(b.begin(), b.begin() + x, b.end());
    }
        int lo = 0, hi = n;
        // for (auto x : a) {
    //     std::cerr << x << " ";
    // }
    // std::cerr << "\n";
    // for (auto x : b) {
    //     std::cerr << x << " ";
    // }
    // std::cerr << "\n";
        std::vector<int> na, nb;
    auto check = [&](int x) {
        std::vector<int> stk;
        i64 sum = 0;
        na = a;
        nb = b;
        for (int i = 0; i < n; i++) {
            stk.push_back(i);
            while (!stk.empty() && nb[i] > 0) {
                int j = stk.back();
                if (i - j >= x) {
                    sum += na[j];
                    stk.pop_back();
                } else {
                    int t = std::min(na[j], nb[i]);
                    nb[i] -= t;
                    na[j] -= t;
                    if (na[j] == 0) {
                        stk.pop_back();
                    }
                }
            }
        }
        assert(stk.empty());
        // std::cerr << "x : " << x << ", sum : " << sum << "\n";
        return sum <= k;
    };
        while (lo < hi) {
        int x = (lo + hi) / 2;
        if (check(x)) {
            hi = x;
        } else {
            lo = x + 1;
        }
    }
        std::cout << lo << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}