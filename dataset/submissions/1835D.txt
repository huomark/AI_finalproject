#include <bits/stdc++.h>
 using i64 = long long;
struct SCC {
    int n;
    std::vector<std::vector<int>> adj;
    std::vector<int> stk;
    std::vector<int> dfn, low, bel;
    int cur, cnt;
        SCC() {}
    SCC(int n) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        adj.assign(n, {});
        dfn.assign(n, -1);
        low.resize(n);
        bel.assign(n, -1);
        stk.clear();
        cur = cnt = 0;
    }
        void addEdge(int u, int v) {
        adj[u].push_back(v);
    }
        void dfs(int x) {
        dfn[x] = low[x] = cur++;
        stk.push_back(x);
                for (auto y : adj[x]) {
            if (dfn[y] == -1) {
                dfs(y);
                low[x] = std::min(low[x], low[y]);
            } else if (bel[y] == -1) {
                low[x] = std::min(low[x], dfn[y]);
            }
        }
                if (dfn[x] == low[x]) {
            int y;
            do {
                y = stk.back();
                bel[y] = cnt;
                stk.pop_back();
            } while (y != x);
            cnt++;
        }
    }
        std::vector<int> work() {
        for (int i = 0; i < n; i++) {
            if (dfn[i] == -1) {
                dfs(i);
            }
        }
        return bel;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    i64 k;
    std::cin >> n >> m >> k;
        std::vector<std::vector<int>> adj(n);
    SCC scc(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        scc.addEdge(u, v);
    }
        auto bel = scc.work();
        std::vector<int> vis(n, -1);
    for (int i = 0; i < n; i++) {
        if (vis[i] == -1) {
            std::queue<int> q;
            q.push(i);
            vis[i] = 0;
            while (!q.empty()) {
                int x = q.front();
                q.pop();
                                for (auto y : adj[x]) {
                    if (vis[y] == -1 && bel[y] == bel[x]) {
                        q.push(y);
                        vis[y] = vis[x] + 1;
                    }
                }
            }
        }
    }
        i64 ans = 0;
        int cnt = scc.cnt;
    std::vector<std::vector<int>> v(cnt);
    for (int i = 0; i < n; i++) {
        v[bel[i]].push_back(i);
    }
        for (auto a : v) {
        int g = 0;
        for (auto x : a) {
            for (auto y : adj[x]) {
                if (bel[x] == bel[y]) {
                    g = std::gcd(g, vis[x] + 1 - vis[y]);
                }
            }
        }
        if (g == 0) {
            continue;
        }
        std::vector<int> cnt(g);
        for (auto x : a) {
            cnt[vis[x] % g]++;
        }
        if (k % g == 0) {
            ans += a.size();
            for (int i = 0; i < g; i++) {
                ans += 1LL * cnt[i] * (cnt[i] - 1) / 2;
            }
        } else if ((2 * k) % g == 0) {
            for (int i = 0; i < g / 2; i++) {
                ans += 1LL * cnt[i] * cnt[i + g / 2];
            }
        }
    }
        std::cout << ans << "\n";
        return 0;
}