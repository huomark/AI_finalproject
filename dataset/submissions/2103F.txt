#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector left(k, std::vector<int>(n));
    for (int j = 0; j < k; j++) {
        for (int i = 0; i < n; i++) {
            left[j][i] = (a[i] >> j & 1) ? i : i > 0 ? left[j][i - 1] : -1;
        }
    }
        auto get = [&](int l, int r) {
        int ans = 0;
        for (int i = 0; i < k; i++) {
            int j = left[i][r];
            int d;
            if (j < l) {
                d = (r - l) % 2;
            } else if (j == l) {
                d = (r - l + 1) % 2;
            } else {
                d = (r - j) % 2;
            }
            ans |= d << i;
        }
        return ans;
    };
        std::vector<std::vector<int>> add(n), del(n);
    for (int r = 0; r < n; r++) {
        std::vector<int> cand;
        for (int i = 0; i < k; i++) {
            int L = left[i][r];
            for (auto l : {L, L + 1, L + 2}) {
                if (l < 0 || l > r) {
                    continue;
                }
                cand.push_back(l);
            }
        }
        for (int l = 0; l <= r && l <= 2; l++) {
            cand.push_back(l);
        }
        std::sort(cand.begin(), cand.end());
        cand.erase(std::unique(cand.begin(), cand.end()), cand.end());
        for (auto l : cand) {
            int res = get(l, r);
            add[l].push_back(res);
            del[r].push_back(res);
        }
    }
        std::multiset<int> s;
    for (int i = 0; i < n; i++) {
        for (auto x : add[i]) {
            s.insert(x);
        }
        std::cout << *s.rbegin() << " \n"[i == n - 1];
        for (auto x : del[i]) {
            s.extract(x);
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}