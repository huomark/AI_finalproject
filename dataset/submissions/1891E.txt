#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int ans = 0;
    for (int i = 1; i < n; i++) {
        ans += std::gcd(a[i - 1], a[i]) == 1;
    }
        std::vector<int> b;
    for (int l = 0, r = 0; l < n; l = r + 1) {
        r = l;
        if (a[l] == 1) {
            continue;
        }
        while (r + 1 < n && a[r + 1] != 1 && std::gcd(a[r], a[r + 1]) == 1) {
            r += 1;
        }
        int t = (r - l) / 2;
        for (int i = 0; i < t; i++) {
            b.push_back(1);
        }
    }
    for (int l = 0, r = 0; l < n; l = r + 1) {
        r = l;
        if (a[l] != 1) {
            continue;
        }
        while (r + 1 < n && a[r + 1] == 1) {
            r += 1;
        }
        if (l != 0 && r != n - 1) {
            b.push_back(r - l + 1);
        }
    }
        if (a == std::vector(n, 1)) {
        ans = n - k;
    } else {
        ans -= k;
        std::sort(b.begin(), b.end());
        for (auto x : b) {
            if (k >= x) {
                k -= x;
                ans -= 1;
            }
        }
        ans = std::max(0, ans);
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}