#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 1 << 19;
 int ans[N];
int max[N];
 void build(int p, int l, int r) {
    max[p] = r - 1;
    if (r - l == 1) {
        return;
    }
    int m = (l + r) / 2;
    ans[p] = r - m;
    build(2 * p, l, m);
    build(2 * p + 1, m, r);
}
 int query(int p, int l, int r, int x, int y, int v) {
    if (l >= y || r <= x) {
        return 0;
    }
    if (v >= max[p]) {
        return 0;
    }
    if (r - l == 1) {
        v = max[p];
        return 1;
    }
    int m = (l + r) / 2;
    if (l >= x && r <= y) {
        if (v >= max[2 * p]) {
            return query(2 * p + 1, m, r, x, y, v);
        } else {
            int res = query(2 * p, l, m, x, y, v) + ans[p];
            v = max[p];
            return res;
        }
    }
    int res = query(2 * p, l, m, x, y, v);
    res += query(2 * p + 1, m, r, x, y, v);
    return res;
}
 void pull(int p, int l, int r) {
    max[p] = std::max(max[2 * p], max[2 * p + 1]);
    int v = max[2 * p];
    ans[p] = query(p, l, r, l, r, v);
}
 void modify(int p, int l, int r, int x, int v) {
    if (r - l == 1) {
        // std::cerr << "modify " << x << " " << v << "\n";
        max[p] = v;
        return;
    }
    int m = (l + r) / 2;
    if (x < m) {
        modify(2 * p, l, m, x, v);
    } else {
        modify(2 * p + 1, m, r, x, v);
    }
    pull(p, l, r);
}
template<class Info,
    class Merge = std::plus<Info>>
struct SegmentTree {
    const int n;
    const Merge merge;
    std::vector<Info> info;
    SegmentTree(int n) : n(n), merge(Merge()), info(4 << std::__lg(n)) {}
    SegmentTree(std::vector<Info> init) : SegmentTree(init.size()) {
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = merge(info[2 * p], info[2 * p + 1]);
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
};
 struct Max {
    int x;
    Max(int x = -1E9) : x(x) {}
};
 Max operator+(const Max &a, const Max &b) {
    return std::max(a.x, b.x);
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m, k;
    std::cin >> n >> m >> k;
        std::vector<int> l(2 * m), r(2 * m);
    for (int i = 0; i < m; i++) {
        std::cin >> l[i] >> r[i];
        l[i]--;
        l[i + m] = l[i];
        r[i + m] = r[i];
    }
        std::vector<std::vector<int>> adj(2 * m);
    std::vector<int> pre(2 * m);
        std::map<int, int> S;
    S[0] = -1;
    S[n] = -1;
        auto split = [&](int x) {
        auto it = std::prev(S.upper_bound(x));
        S[x] = it->second;
    };
        auto get = [&](int x) {
        auto it = std::prev(S.upper_bound(x));
        return it->second;
    };
        auto cover = [&](int l, int r, int x) {
        split(l);
        split(r);
                for (auto it = std::next(S.find(l)); it->first != r; ) {
            it = S.erase(it);
        }
        S[l] = x;
    };
        for (int i = 0; i < 2 * m; i++) {
        pre[i] = get(l[i]);
        if (pre[i] != -1 && i - pre[i] >= k) {
            pre[i] = -1;
        }
        if (pre[i] != -1) {
            adj[pre[i]].push_back(i);
        }
        cover(l[i], r[i], i);
    }
        build(1, 0, n);
        // auto f = r;
        const int M = 2 * m;
    int cur = 0;
    std::vector<int> in(M), out(M);
        std::function<void(int)> dfs = [&](int x) {
        in[x] = cur++;
        for (auto y : adj[x]) {
            dfs(y);
        }
        out[x] = cur;
    };
        S.clear();
    S[0] = -1;
    S[M] = -1;
        for (int i = 0; i < M; i++) {
        if (pre[i] == -1) {
            dfs(i);
            cover(in[i], out[i], i);
        }
    }
        SegmentTree<Max> seg(M);
        auto add = [&](int i) {
        // for (int j = i; j != -1; j = pre[j]) {
        //     if (f[j] < f[i] || i == j) {
        //         f[j] = f[i];
        //         if (pre[j] == -1) {
        //             modify(1, 0, n, l[j], f[j] - 1);
        //         }
        //     }
        // }
        int j = get(in[i]);
        int res = seg.rangeQuery(in[j], out[j]).x;
        seg.modify(in[i], r[i]);
        int nres = seg.rangeQuery(in[j], out[j]).x;
        if (nres > res) {
            modify(1, 0, n, l[j], nres - 1);
        }
        if (pre[i] == -1) {
            cover(in[i], out[i], i);
        }
    };
        auto rem = [&](int i) {
        modify(1, 0, n, l[i], l[i]);
        for (auto j : adj[i]) {
            modify(1, 0, n, l[j], seg.rangeQuery(in[j], out[j]).x - 1);
            cover(in[j], out[j], j);
        }
    };
        for (int i = 0; i < k; i++) {
        add(i);
    }
        auto query = [&]() {
        int v = -1;
        return ::query(1, 0, n, 0, n, v);
    };
        for (int i = 0; i < m; i++) {
        std::cout << query() << " \n"[i == m - 1];
        rem(i);
        add(i + k);
    }
        return 0;
}