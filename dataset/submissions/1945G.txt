#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, D;
    std::cin >> n >> D;
        std::vector<int> k(n), s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> k[i] >> s[i];
    }
        std::map<int, std::deque<int>> q;
    for (int i = n - 1; i >= 0; i--) {
        if (q.empty() || k[i] > k[q.rbegin()->second.front()]) {
            q[k[i]] = {i};
        } else {
            q.rbegin()->second.push_back(i);
        }
    }
        std::vector<int> vis(n);
    int ans = 0;
    int cnt = 0;
    std::vector<std::vector<int>> ret(D);
    for (int t = 0; t < D; t++) {
        if (!q.empty()) {
            int i = q.rbegin()->second.back();
            q.rbegin()->second.pop_back();
            if (q.rbegin()->second.empty()) {
                q.erase(q.rbegin()->first);
            }
            if (vis[i] == 0) {
                vis[i] = t + 1;
                ans = std::max(ans, t + 1);
                cnt++;
            }
            if (t + s[i] < D) {
                ret[t + s[i]].push_back(i);
            }
        }
        std::sort(ret[t].begin(), ret[t].end(),
            [&](int i, int j) {
                return s[i] < s[j];
            });
        for (auto i : ret[t]) {
            auto it = q.lower_bound(k[i]);
            if (it == q.end()) {
                q[k[i]] = {i};
            } else if (k[it->second.front()] == k[i]) {
                it->second.push_front(i);
            } else {
                q[k[i]] = {i};
            }
        }
    }
        if (cnt < n) {
        ans = -1;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}