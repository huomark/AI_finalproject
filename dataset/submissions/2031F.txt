#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 std::array<int, 2> query(std::vector<int> x) {
    std::cout << "? " << x.size();
    for (auto a : x) {
        std::cout << " " << a;
    }
    std::cout << std::endl;
        int m1, m2;
    std::cin >> m1 >> m2;
        return {m1, m2};
}
 std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
 void solve() {
    int n;
    std::cin >> n;
        int x, y;
    while (true) {
        x = rng() % n + 1;
        y = rng() % n + 1;
        if (x == y) {
            continue;
        }
        std::vector<int> p;
        for (int i = 1; i <= n; i++) {
            if (i != x && i != y) {
                p.push_back(i);
            }
        }
        auto [m1, m2] = query(p);
        if (m1 == n / 2 && m2 == n / 2 + 1) {
            break;
        }
    }
        std::vector<int> other;
    for (int i = 1; i <= n; i++) {
        if (i != x && i != y) {
            other.push_back(i);
        }
    }
        std::vector<int> cand;
    for (int i = 0; i < n - 2; i += 2) {
        auto [m1, m2] = query({x, y, other[i], other[i + 1]});
        if (m1 == n / 2 && m2 == n / 2 + 1) {
            std::cout << "! " << other[i] << " " << other[i + 1] << std::endl;
            return;
        }
        if (m1 == n / 2 || m2 == n / 2 + 1 || m1 == n / 2 + 1 || m2 == n / 2) {
            cand.push_back(other[i]);
            cand.push_back(other[i + 1]);
        }
    }
        assert(cand.size() == 4);
    for (int i = 0; i < 4; i++) {
        for (int j = i + 1; j < 4; j++) {
            auto [m1, m2] = query({x, y, cand[i], cand[j]});
            if (m1 == n / 2 && m2 == n / 2 + 1) {
                std::cout << "! " << cand[i] << " " << cand[j] << std::endl;
                return;
            }
        }
    }
    assert(false);
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}