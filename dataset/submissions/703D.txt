#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 struct Xor {
    int x = 0;
    Xor &operator+=(Xor a) & {
        x ^= a.x;
        return *this;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> s(n + 1);
    for (int i = 0; i < n; i++) {
        s[i + 1] = s[i] ^ a[i];
    }
        auto v = a;
    std::sort(v.begin(), v.end());
    std::vector<int> lst(n, -1), nxt(n, -1);
    for (int i = n - 1; i >= 0; i--) {
        a[i] = std::lower_bound(v.begin(), v.end(), a[i]) - v.begin();
        nxt[i] = lst[a[i]];
        lst[a[i]] = i;
    }
        int m;
    std::cin >> m;
        std::vector<int> ans(m);
        std::vector<std::vector<std::array<int, 2>>> qry(n);
        for (int i = 0; i < m; i++) {
        int l, r;
        std::cin >> l >> r;
        l--;
        qry[l].push_back({r, i});
    }
        Fenwick<Xor> fen(n);
    for (int l = n - 1; l >= 0; l--) {
        fen.add(l, {v[a[l]]});
        if (nxt[l] != -1) {
            fen.add(nxt[l], {v[a[l]]});
        }
        for (auto [r, i] : qry[l]) {
            ans[i] = s[l] ^ s[r] ^ fen.sum(r).x;
        }
    }
        for (int i = 0; i < m; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}