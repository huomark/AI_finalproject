#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        auto s = a;
    auto dfs = [&](auto self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
            s[x] ^= s[y];
        }
    };
    dfs(dfs, 0, -1);
        if (s[0] == 0) {
        std::cout << "YES\n";
        return;
    }
        if (k == 2) {
        std::cout << "NO\n";
        return;
    }
        int cnt = 1;
    auto dfs1 = [&](auto self, int x, int p) -> int {
        int sum = a[x];
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            sum ^= self(self, y, x);
        }
        if (sum == s[0]) {
            cnt += 1;
            return 0;
        }
        return sum;
    };
    dfs1(dfs1, 0, -1);
    if (cnt >= 3) {
        std::cout << "YES\n";
    } else {
        std::cout << "NO\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}