#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int m, k;
    std::cin >> m >> k;
        m++;
    std::vector<int> f(m);
    for (int i = 0; i < m; i++) {
        std::cin >> f[i];
    }
        auto check = [&](int n) {
        std::vector<int> a(f.begin(), f.begin() + n);
        std::sort(a.begin(), a.end());
        // for (int i = 1; i <= n; i++) {
        //     std::vector<int> a(g.begin(), g.begin() + i);
        //     i64 sum = std::accumulate(a.begin(), a.end(), 0LL);
        //     for (int t = 0; t < a.size() - 1; t++) {
        //         int v = std::min<i64>(a[t], sum / (a.size() - t));
        //         sum -= v;
        //         sum = std::max(0LL, sum - k);
        //     }
        //     if (sum == 0) {
        //         return false;
        //     }
        // }
                std::vector<i64> dp(n + 1);
        dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            dp[i] = std::min(inf, (dp[i - 1] + k) + (dp[i - 1] + k) / (i - 1));
        }
        i64 sum = 0;
        i64 s = 0;
        for (int i = 1, j = 0; i <= n; i++) {
            sum += a[i - 1];
            while (j < i - 1 && a[j] <= (sum - s) / (i - j)) {
                s += a[j] + k;
                j++;
            }
            if (sum - s <= dp[i - j]) {
                return false;
            }
        }
        return true;
    };
        int lo = 0, hi = m;
    while (lo < hi) {
        int x = (lo + hi + 1) / 2;
        if (check(x)) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
    std::cout << lo << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}