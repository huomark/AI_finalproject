#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> x(n - 1), y(n - 1);
    std::vector<int> cnt(n);
    for (int i = 0; i < n - 1; i++) {
        std::cin >> x[i] >> y[i];
        x[i]--, y[i]--;
        cnt[x[i]]++;
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return cnt[i] < cnt[j];
        });
        std::vector<int> invp(n);
    for (int i = 0; i < n; i++) {
        invp[p[i]] = i;
    }
        std::vector<int> lim(n, n);
    for (int i = 0; i < n - 1; i++) {
        lim[y[i]] = std::min(lim[y[i]], invp[x[i]]);
    }
        std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return lim[i] < lim[j];
        });
        std::vector<std::array<int, 3>> ans;
        for (int i = 0; i < n; i++) {
        while (i != invp[i]) {
            ans.push_back({1, i + 1, invp[i] + 1});
            std::swap(invp[i], invp[invp[i]]);
        }
    }
    for (int i = 0; i < n; i++) {
        invp[p[i]] = i;
    }
    for (int i = 0; i < n; i++) {
        while (i != invp[i]) {
            ans.push_back({2, i + 1, invp[i] + 1});
            std::swap(invp[i], invp[invp[i]]);
        }
    }
        std::cout << ans.size() << "\n";
    for (auto [t, i, j] : ans) {
        std::cout << t << " " << i << " " << j << "\n";
    }
        return 0;
}