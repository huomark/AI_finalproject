#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> p(n, -1), siz(n, 1);
    for (int i = 1; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
    }
        for (int i = n - 1; i; i--) {
        siz[p[i]] += siz[i];
    }
        i64 ans = 0;
    std::vector<std::vector<int>> a(n);
    for (int i = 1; i < n; i++) {
        a[p[i]].push_back(siz[i]);
    }
        for (int i = 0; i < n; i++) {
        if (a[i].empty()) {
            continue;
        }
        auto &v = a[i];
        std::sort(v.begin(), v.end(), std::greater());
        int sum = std::accumulate(v.begin() + 1, v.end(), 0);
        std::vector<int> dp(sum + 1);
        dp[0] = 1;
        for (int i = 1, j = i; i < v.size(); i = j) {
            while (j < v.size() && v[i] == v[j]) {
                j++;
            }
            int cnt = j - i;
            int k = 1;
            while (k < cnt) {
                int x = v[i] * k;
                for (int j = sum; j >= x; j--) {
                    dp[j] |= dp[j - x];
                }
                cnt -= k;
                k *= 2;
            }
            int x = v[i] * cnt;
            for (int j = sum; j >= x; j--) {
                dp[j] |= dp[j - x];
            }
        }
        i64 res = 0;
        for (int j = 0; j <= sum; j++) {
            if (dp[j]) {
                res = std::max(res, 1LL * j * (siz[i] - 1 - j));
                res = std::max(res, 1LL * (j + v[0]) * (siz[i] - 1 - (j + v[0])));
            }
        }
        ans += res;
    }
    std::cout << ans << "\n";
        return 0;
}