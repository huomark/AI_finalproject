#include <bits/stdc++.h>
 using i64 = long long;
 int lcp(std::vector<int> a, std::vector<int> b) {
    int i = 0;
    while (i < a.size() && a[i] == b[i]) {
        i++;
    }
    return i;
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector a(n, std::vector<int>(m)), b(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> a[i][j];
            a[i][j]--;
            b[i][a[i][j]] = j;
        }
    }
        std::sort(b.begin(), b.end());
    for (int i = 0; i < n; i++) {
        auto j = std::lower_bound(b.begin(), b.end(), a[i]) - b.begin();
        int ans = 0;
        if (j < n) ans = std::max(ans, lcp(a[i], b[j]));
        if (j > 0) ans = std::max(ans, lcp(a[i], b[j - 1]));
        std::cout << ans << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}