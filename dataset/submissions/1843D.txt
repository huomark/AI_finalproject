#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> siz(n);
    auto dfs = [&](auto self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y != p) {
                self(self, y, x);
                siz[x] += siz[y];
            }
        }
        if (siz[x] == 0) {
            siz[x] = 1;
        }
    };
    dfs(dfs, 0, -1);
        int q;
    std::cin >> q;
        while (q--) {
        int x, y;
        std::cin >> x >> y;
        x--, y--;
        std::cout << 1LL * siz[x] * siz[y] << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}