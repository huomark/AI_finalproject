#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 void solve() {
    int l, n, m;
    std::cin >> l >> n >> m;
        std::vector<int> a(l);
    for (int i = 0; i < l; i++) {
        std::cin >> a[i];
        a[i]--;
    }
        std::vector b(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> b[i][j];
            b[i][j]--;
        }
    }
        if (n > m) {
        std::swap(n, m);
        std::vector c(n, std::vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = b[j][i];
            }
        }
        std::swap(b, c);
    }
        std::vector<int> f(n);
        l = std::min(l, n);
    std::vector<std::vector<std::array<int, 2>>> vec(n * m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            vec[b[i][j]].push_back({i, j});
        }
    }
    for (int i = l - 1; i >= 0; i--) {
        int u = 0;
        for (int r = n - 1; r >= 0; r--) {
            auto it = std::lower_bound(vec[a[i]].begin(), vec[a[i]].end(), std::array {r + 1, 0});
            int v = r == n - 1 ? 0 : f[r + 1];
            if (it != vec[a[i]].begin()) {
                it--;
                if ((*it)[0] == r && (*it)[1] + 1 >= u) {
                    v = std::max(v, (*it)[1] + 1);
                }
            }
            u = f[r];
            f[r] = v;
        }
    }
        if (f[0] > 0) {
        std::cout << "T\n";
    } else {
        std::cout << "N\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}