#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<int> u(m), v(m), w(m);
    for (int i = 0; i < m; i++) {
        std::cin >> u[i] >> v[i] >> w[i];
        u[i]--, v[i]--;
    }
        const int V = *std::max_element(w.begin(), w.end()) + 1;
        std::vector<std::vector<int>> e(V);
    for (int i = 0; i < m; i++) {
        e[w[i]].push_back(i);
    }
        int q;
    std::cin >> q;
        std::vector<int> ans(q, 1);
    std::vector<std::vector<std::pair<int, std::vector<int>>>> qry(V);
        DSU dsu(n);
        for (int i = 0; i < q; i++) {
        int k;
        std::cin >> k;
                std::vector<int> a(k);
        for (int j = 0; j < k; j++) {
            std::cin >> a[j];
            a[j]--;
        }
                std::sort(a.begin(), a.end(),
            [&](int i, int j) {
                return w[i] < w[j];
            });
        for (int l = 0, r = 0; l < k; l = r) {
            while (r < k && w[a[l]] == w[a[r]]) {
                r++;
            }
            qry[w[a[l]]].emplace_back(i, std::vector(a.begin() + l, a.begin() + r));
        }
    }
        for (int c = 0; c < V; c++) {
        for (auto [i, a] : qry[c]) {
            int k = a.size();
            std::vector<std::array<int, 2>> e;
            e.reserve(k);
            for (auto j : a) {
                e.push_back({dsu.find(u[j]), dsu.find(v[j])});
            }
            for (auto [u, v] : e) {
                if (!dsu.merge(u, v)) {
                    ans[i] = 0;
                }
            }
            for (auto [u, v] : e) {
                dsu.f[u] = u;
                dsu.f[v] = v;
            }
        }
        for (auto i : e[c]) {
            dsu.merge(u[i], v[i]);
        }
    }
        for (int i = 0; i < q; i++) {
        std::cout << (ans[i] ? "YES" : "NO") << "\n";
    }
        return 0;
}