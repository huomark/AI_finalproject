#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 constexpr int N = 1 << 20;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int q;
    std::cin >> q;
        Fenwick<int> fen(q);
        std::vector<int> pos(N, q);
    int n = 0;
        std::vector<std::array<int, 4>> a;
    std::vector<int> b(q);
        for (int i = 0; i < q; i++) {
        char o;
        std::cin >> o;
        if (o == '+') {
            int x;
            std::cin >> x;
            a.push_back({x, pos[x], b[n], pos[b[n]]});
            if (pos[b[n]] == n) {
                fen.add(pos[b[n]], -1);
                pos[b[n]] = q;
                fen.add(pos[b[n]], 1);
            }
            if (pos[x] > n) {
                fen.add(pos[x], -1);
                pos[x] = n;
                fen.add(pos[x], 1);
            }
            b[n] = x;
            n += 1;
        } else if (o == '-') {
            int k;
            std::cin >> k;
            n -= k;
            a.push_back({-1, k});
        } else if (o == '?') {
            int ans = fen.sum(n);
            std::cout << ans << std::endl;
        } else {
            auto [x, y, z, w] = a.back();
            a.pop_back();
                        if (x == -1) {
                n += y;
            } else {
                n -= 1;
                b[n] = z;
                if (pos[x] != y) {
                    fen.add(pos[x], -1);
                    pos[x] = y;
                    fen.add(pos[x], 1);
                }
                if (pos[z] != w) {
                    fen.add(pos[z], -1);
                    pos[z] = w;
                    fen.add(pos[z], 1);
                }
            }
        }
    }
        return 0;
}