#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<i64> sum(n), dp(n);
    auto dfs1 = [&](this auto &&self, int x, int p) -> void {
        sum[x] = a[x];
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(y, x);
            sum[x] += sum[y];
            dp[x] += dp[y] + sum[y];
        }
    };
    dfs1(0, -1);
        auto dfs2 = [&](this auto &&self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            dp[y] = dp[x] + sum[0] - 2 * sum[y];
            self(y, x);
        }
    };
    dfs2(0, -1);
        i64 ans = *std::max_element(dp.begin(), dp.end());
    std::cout << ans << "\n";
        return 0;
}