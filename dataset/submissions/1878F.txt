#include <bits/stdc++.h>
 using i64 = long long;
 std::vector<int> minp, primes;
 constexpr int V = 1E6;
 int cnt[V + 1];
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 void solve() {
    int n, q;
    std::cin >> n >> q;
        std::vector<int> s;
    int d = 1;
    auto add = [&](int x, int t = 1) {
        while (x > 1) {
            int p = minp[x];
            x /= p;
            d /= cnt[p] + 1;
            cnt[p] += t;
            d *= cnt[p] + 1;
        }
    };
    s.push_back(n);
    add(n);
    while (q--) {
        int o;
        std::cin >> o;
                if (o == 1) {
            int x;
            std::cin >> x;
            s.push_back(x);
            add(x);
            int v = 1;
            for (auto x : s) {
                v = 1LL * v * x % d;
            }
            if (v == 0) {
                std::cout << "YES\n";
            } else {
                std::cout << "NO\n";
            }
        } else {
            while (s.size() > 1) {
                add(s.back(), -1);
                s.pop_back();
            }
        }
    }
    while (s.size() > 0) {
        add(s.back(), -1);
        s.pop_back();
    }
    std::cout << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(V);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}