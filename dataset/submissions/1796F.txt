#include <bits/stdc++.h>
 using i64 = long long;
 int bits(int n) {
    int k = 1;
    while (k <= n) {
        k *= 10;
    }
    return k;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int A, B, N;
    std::cin >> A >> B >> N;
        int ans = 0;
    for (int ln = 1, t = 9; ln <= 9; ln++, t = 10 * t + 9) {
        std::map<int, int> et;
        int x = t;
        for (int i = 2; i * i <= x; i++) {
            while (x % i == 0) {
                et[i] += 1;
                x /= i;
            }
        }
        if (x > 1) {
            et[x] += 1;
        }
        for (int b = 1; b < B; b++) {
            auto e = et;
            int x = b;
            for (int i = 2; i * i <= x; i++) {
                while (x % i == 0) {
                    e[i] += 2;
                    x /= i;
                }
            }
            if (x > 1) {
                e[x] += 2;
            }
            x = std::gcd(b, bits(b));
            int e2 = e[2] / 2;
            int e5 = e[5] / 2;
            for (int i = 2; i * i <= x; i++) {
                while (x % i == 0) {
                    e[i] += 1;
                    x /= i;
                }
            }
            if (x > 1) {
                e[x] += 1;
            }
            i64 init = 1;
                        e2 = e[2] - 2 * e2;
            e5 = e[5] - 2 * e5;
            init *= 1LL << e2;
            e[2] -= e2;
            e[5] -= e5;
            for (int j = 0; j < e5; j++) {
                init *= 5;
            }
            int bitsb = bits(b);
            int ctz = __builtin_ctz(bitsb);
            if (e2 < ctz) {
                e.erase(2);
            }
            if (e5 < ctz) {
                e.erase(5);
            }
            std::vector<std::pair<int, int>> p(e.begin(), e.end());
            std::reverse(p.begin(), p.end());
            i64 lim = 1LL * A * bitsb;
            auto dfs = [&](auto self, int i, i64 v) {
                if (i == p.size()) {
                    i64 a = v + b;
                    if (a % bitsb != 0) {
                        return;
                    }
                    a /= bitsb;
                    if (a >= A) {
                        return;
                    }
                    i64 u = a * b;
                    if (v < u) {
                        return;
                    }
                    i64 g = std::gcd(u, v);
                    u /= g;
                    v /= g;
                    if (t % v == 0) {
                        i64 n = t / v * u;
                        // std::cerr << a << " " << b << " " << u << " " << v << " " << n << "\n";
                        if (n < N) {
                            // std::cerr << a << " " << b << " " << n << "\n";
                            ans += 1;
                        }
                    }
                    return;
                }
                for (int j = 0; j <= p[i].second; j++) {
                    if (j > 0) {
                        v *= p[i].first;
                    }
                    if (v > lim) {
                        break;
                    }
                    self(self, i + 1, v);
                }
            };
            dfs(dfs, 0, init);
        }
    }
    // for (int a = 1; a < A; a++) {
    //     for (int b = 1; b < B; b++) {
    //         i64 x = 1LL * a * bits(b) - b;
    //         i64 y = 1LL * a * b;
                //         if (x < y) {
    //             continue;
    //         }
                //         for (int l = 1, t = 9; l <= 9; l++, t = 10 * t + 9) {
    //             i64 v = y * t;
    //             if (v % x == 0) {
    //                 i64 n = v / x;
    //                 if (n < N) {
    //                     ans += 1;
    //                 }
    //             }
    //         }
    //     }
    // }
        std::cout << ans << "\n";
        return 0;
}