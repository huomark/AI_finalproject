#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> p;
    while (true) {
        p.clear();
        for (int i = 0; i < n; i++) {
            int j = (i + 1) % n;
            a[j] = std::max(a[j] - a[i], 0);
        }
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                p.push_back(i);
            }
        }
        bool fin = !p.empty();
        for (int i = 0; i < p.size(); i++) {
            if ((p[(i + 1) % p.size()] - p[i] - 1 + n) % n > 2) {
                fin = false;
            }
        }
        if (fin) {
            break;
        }
    }
        assert(!p.empty());
    for (int i = 0; i < p.size(); i++) {
        int l = p[i] + 1, r = p[(i + 1) % p.size()];
        int len = (r - l + n) % n;
        assert(len <= 2);
        if (len == 2) {
            a[(l + 1) % n] = 0;
        } else if (len == 3) {
            int d = a[(l + 1) % n] / a[l % n] + 1;
            i64 tot = 1LL * (a[(l + 1) % n] * 2 - 1LL * a[l % n] * (d - 1)) * d / 2;
            if (tot >= a[(l + 2) % n]) {
                a[(l + 2) % n] = 0;
            }
            a[(l + 1) % n] = 0;
        }
    }
        std::vector<int> ans;
    for (int i = 0; i < n; i++) {
        if (a[i] > 0) {
            ans.push_back(i);
        }
    }
    std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x + 1 << " ";
    }
    std::cout << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}