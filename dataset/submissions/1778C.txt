#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::string a, b;
    std::cin >> a >> b;
        std::array<int, 26> f{};
    for (auto c : a) {
        f[c - 'a']++;
    }
        int cnt = 0;
    for (int i = 0; i < 26; i++) {
        if (f[i] > 0) {
            f[i] = cnt++;
        } else {
            f[i] = -1;
        }
    }
        k = std::min(k, cnt);
        i64 ans = 0;
    for (int mask = 0; mask < (1 << cnt); mask++) {
        if (__builtin_popcount(mask) != k) continue;
                int j = -1;
        i64 res = 0;
        for (int i = 0; i <= n; i++) {
            if (i == n || (a[i] != b[i] && (~mask >> f[a[i] - 'a'] & 1))) {
                res += 1LL * (i - j) * (i - j - 1) / 2;
                j = i;
            }
        }
        ans = std::max(ans, res);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}