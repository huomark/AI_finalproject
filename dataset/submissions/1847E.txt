#include <bits/stdc++.h>
 using i64 = long long;
 int area(int a, int b, int c) {
    if (a + b <= c) {
        return 0;
    }
    if (b + c <= a) {
        return 0;
    }
    if (c + a <= b) {
        return 0;
    }
    return (a + b + c) * (a + b - c) * (b + c - a) * (c + a - b);
}
 int query(int i, int j, int k) {
    std::array<int, 3> a{i, j, k};
    std::sort(a.begin(), a.end());
    std::cout << "? " << a[0] + 1 << " " << a[1] + 1 << " " << a[2] + 1 << std::endl;
    int ans;
    std::cin >> ans;
    return ans;
}
 int invarea(int a, int b, int c, int x) {
    for (int i = 1; i <= 4; i++) {
        if (area(a > 0 ? a : i, b > 0 ? b : i, c > 0 ? c : i) == x) {
            return i;
        }
    }
    return 0;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        if (n < 9) {
        std::vector<int> q;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    q.push_back(query(i, j, k));
                }
            }
        }
        int res = -1;
        for (int s = 0; s < (1 << (2 * n)); s++) {
            std::vector<int> a;
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    for (int k = j + 1; k < n; k++) {
                        int x = (s >> (2 * i) & 3) + 1;
                        int y = (s >> (2 * j) & 3) + 1;
                        int z = (s >> (2 * k) & 3) + 1;
                        a.push_back(area(x, y, z));
                    }
                }
            }
            if (a == q) {
                if (res != -1) {
                    std::cout << "! " << -1 << std::endl;
                    return 0;
                }
                res = s;
            }
        }
        std::cout << "!";
        for (int i = 0; i < n; i++) {
            int a = (res >> (2 * i) & 3) + 1;
            std::cout << " " << a;
        }
        std::cout << std::endl;
        return 0;
    }
        int i1, j1, k1;
    int C;
        [&]() {
        for (int i = 0; i < 9; i++) {
            for (int j = i + 1; j < 9; j++) {
                for (int k = j + 1; k < 9; k++) {
                    int res = query(i, j, k);
                    int a = invarea(0, 0, 0, res);
                    if (a != 0) {
                        C = a;
                        i1 = i, j1 = j, k1 = k;
                        return;
                    }
                }
            }
        }
    }();
        std::vector<int> ans(n);
    ans[i1] = ans[j1] = ans[k1] = C;
    if (C >= 2) {
        for (int i = 0; i < n; i++) {
            if (ans[i] == 0) {
                int res = query(i1, j1, i);
                ans[i] = invarea(C, C, 0, res);
            }
        }
        std::cout << "!";
        for (int i = 0; i < n; i++) {
            std::cout << " " << ans[i];
        }
        std::cout << std::endl;
        return 0;
    }
        int i2, j2;
    int D;
        std::vector<int> t;
        for (int i = 0; i < n && t.size() < 4; i++) {
        if (ans[i] == 0) {
            if (query(i1, j1, i) != 0) {
                ans[i] = 1;
            } else {
                t.push_back(i);
            }
        }
    }
        if (t.empty()) {
        std::cout << "!";
        for (int i = 0; i < n; i++) {
            std::cout << " " << ans[i];
        }
        std::cout << std::endl;
        return 0;
    }
        [&]() {
        for (int i = 0; i < t.size(); i++) {
            for (int j = 0; j < i; j++) {
                int res = query(i1, t[i], t[j]);
                if (res == 0 || res == area(1, 1, 1)) {
                    continue;
                }
                i2 = t[i], j2 = t[j];
                D = invarea(C, 0, 0, res);
                return;
            }
        }
        std::cout << "! " << -1 << std::endl;
        std::exit(0);
    }();
        ans[i2] = ans[j2] = D;
    for (int i = 0; i < n; i++) {
        if (ans[i] == 0) {
            int res = query(i2, j2, i);
            ans[i] = invarea(D, D, 0, res);
        }
    }
        std::cout << "!";
    for (int i = 0; i < n; i++) {
        std::cout << " " << ans[i];
    }
    std::cout << std::endl;
        return 0;
}