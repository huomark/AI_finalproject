#include <bits/stdc++.h>
 using i64 = long long;
 int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector a(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> a[i][j];
        }
    }
        int ans = 0;
    std::vector vis(n, std::vector<bool>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (!vis[i][j] && a[i][j] > 0) {
                int res = 0;
                std::queue<std::pair<int, int>> q;
                q.emplace(i, j);
                vis[i][j] = true;
                                while (!q.empty()) {
                    auto [x, y] = q.front();
                    q.pop();
                    res += a[x][y];
                                        for (int k = 0; k < 4; k++) {
                        int nx = x + dx[k];
                        int ny = y + dy[k];
                        if (0 <= nx && nx < n && 0 <= ny && ny < m && a[nx][ny] > 0 && !vis[nx][ny]) {
                            q.emplace(nx, ny);
                            vis[nx][ny] = true;
                        }
                    }
                }
                ans = std::max(ans, res);
            }
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}