#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedParent(int u, int v) {
        std::swap(u, v);
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedParent(u, v)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(2 * n);
    for (int i = 0; i < 2 * n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
        std::vector<std::vector<int>> adj(2 * n);
    for (int i = 1; i < 2 * n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> siz(2 * n), p(2 * n);
    auto dfs = [&](this auto &&self, int x) -> void {
        siz[x] = 1;
        for (auto y : adj[x]) {
            if (y == p[x]) {
                continue;
            }
            p[y] = x;
            self(y);
            siz[x] += siz[y];
        }
    };
    p[0] = -1;
    dfs(0);
        auto find = [&](this auto &&self, int x) -> int {
        for (auto y : adj[x]) {
            if (y == p[x] || siz[y] < n) {
                continue;
            }
            return self(y);
        }
        return x;
    };
        int rt = find(0);
    HLD t(2 * n + 1);
    if (siz[rt] == n) {
        for (int i = 1; i < 2 * n; i++) {
            if (i != rt) {
                t.addEdge(p[i], i);
            }
        }
        t.addEdge(rt, 2 * n);
        t.addEdge(p[rt], 2 * n);
    } else {
        for (int i = 1; i < 2 * n; i++) {
            t.addEdge(p[i], i);
        }
        t.addEdge(rt, 2 * n);
    }
    t.work(2 * n);
        std::vector<bool> choose(2 * n);
    std::vector<std::array<int, 2>> ver(n, {-1, -1});
    for (int i = 0; i < 2 * n; i++) {
        if (ver[a[i]][0] == -1) {
            ver[a[i]][0] = i;
        } else {
            ver[a[i]][1] = i;
        }
    }
    auto cover = [&](int x) {
        while (x < 2 * n && !choose[x]) {
            choose[x] = true;
            x = t.parent[x];
        }
    };
    for (int i = 0; i < n; i++) {
        cover(t.lca(ver[i][0], ver[i][1]));
    }
        DSU dsu(2 * n + 2);
        for (int i = 2 * n - 1; i >= 0; i--) {
        if (!choose[i]) {
            for (int j = dsu.find(t.in[i]); j < t.out[i]; j = dsu.find(j)) {
                int x = t.seq[j];
                int y = ver[a[x]][0] ^ ver[a[x]][1] ^ x;
                cover(y);
                dsu.merge(j + 1, j);
            }
        }
    }
        std::vector<int> ans;
    for (int i = 0; i < 2 * n; i++) {
        if (choose[i]) {
            ans.push_back(i);
        }
    }
    std::cout << ans.size() << "\n";
    for (int i = 0; i < ans.size(); i++) {
        std::cout << ans[i] + 1 << " \n"[i == ans.size() - 1];
    }
        return 0;
}