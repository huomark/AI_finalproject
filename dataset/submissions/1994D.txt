#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        DSU dsu(n);
    std::vector<int> u(n), v(n);
    for (int x = n - 1; x >= 1; x--) {
        std::vector<int> b(x, -1);
        for (int i = 0; i < n; i++) {
            if (dsu.find(i) != i) {
                continue;
            }
            if (b[a[i] % x] != -1) {
                u[x] = b[a[i] % x];
                v[x] = i;
                dsu.merge(u[x], v[x]);
                break;
            }
            b[a[i] % x] = i;
        }
    }
    std::cout << "YES\n";
    for (int i = 1; i < n; i++) {
        std::cout << u[i] + 1 << " " << v[i] + 1 << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}