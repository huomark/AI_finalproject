#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 constexpr int dx[] = {-1, 1, 0, 0};
constexpr int dy[] = {0, 0, -1, 1};
 auto transpose(auto &a) {
    int n = a.size(), m = a[0].size();
    std::vector b(m, std::vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            b[j][i] = a[i][j];
        }
    }
    return b;
}
 auto construct(int n, int m) {
    if (n == 4 && m == 4) {
        std::vector<std::vector<int>> a {
            {5, 1, 6, 8},
            {11, 7, 9, 2},
            {3, 12, 14, 10},
            {13, 15, 4, 16}
        }, block {
            {0, 0, 0, 1},
            {3, 0, 1, 1},
            {3, 3, 2, 1},
            {3, 2, 2, 2}
        };
        return std::pair {a, block};
    }
    if (n == 4 && m == 5) {
        std::vector<std::vector<int>> a {
            {9, 1, 10, 5, 6},
            {12, 11, 7, 8, 15},
            {2, 13, 18, 16, 3},
            {14, 19, 4, 20, 17}
        }, block {
            {0, 0, 0, 1, 1},
            {2, 0, 3, 3, 4},
            {2, 2, 5, 4, 4},
            {2, 5, 5, 5, 4}
        };
        return std::pair {a, block};
    }
    if (n > m) {
        auto [a, block] = construct(m, n);
        return std::pair {transpose(a), transpose(block)};
    }
    std::vector a(n, std::vector<int>(m)), block(n, std::vector<int>(m));
    a[0][1] = 1;
    a[0][0] = n * m - 11;
    a[0][2] = n * m - 10;
    a[1][1] = n * m - 9;
    block[0][1] = 0;
    block[0][0] = 0;
    block[0][2] = 0;
    block[1][1] = 0;
        a[0][m - 2] = 2;
    a[0][m - 3] = n * m - 8;
    a[0][m - 1] = n * m - 7;
    a[1][m - 2] = n * m - 6;
    block[0][m - 2] = 1;
    block[0][m - 3] = 1;
    block[0][m - 1] = 1;
    block[1][m - 2] = 1;
        a[2][0] = 3;
    a[1][0] = n * m - 5;
    a[2][1] = n * m - 4;
    a[3][0] = n * m - 3;
    block[2][0] = 2;
    block[1][0] = 2;
    block[2][1] = 2;
    block[3][0] = 2;
        a[2][m - 1] = 4;
    a[1][m - 1] = n * m - 2;
    a[2][m - 2] = n * m - 1;
    a[3][m - 1] = n * m;
    block[2][m - 1] = 3;
    block[1][m - 1] = 3;
    block[2][m - 2] = 3;
    block[3][m - 1] = 3;
        int cur = 4;
    int bl = 4;
    a[1][2] = ++cur;
    a[2][2] = ++cur;
    block[1][2] = block[2][2] = bl++;
        a[3][1] = ++cur;
    a[3][2] = ++cur;
    block[3][1] = block[3][2] = bl++;
        a[1][m - 3] = ++cur;
    a[2][m - 3] = ++cur;
    block[1][m - 3] = block[2][m - 3] = bl++;
        a[3][m - 3] = ++cur;
    a[3][m - 2] = ++cur;
    block[3][m - 3] = block[3][m - 2] = bl++;
        for (int x = 0; x < 4; x += 2) {
        for (int y = 3; y < m - 3; y++) {
            a[x][y] = ++cur;
            a[x + 1][y] = ++cur;
            block[x][y] = block[x + 1][y] = bl++;
        }
    }
        if (m % 2 == 0) {
        for (int x = 4; x < n; x++) {
            for (int y = 0; y < m; y += 2) {
                a[x][y] = ++cur;
                a[x][y + 1] = ++cur;
                block[x][y] = block[x][y + 1] = bl++;
            }
        }
    } else {
        for (int x = 4; x < n; x += 2) {
            for (int y = 0; y < m; y++) {
                a[x][y] = ++cur;
                a[x + 1][y] = ++cur;
                block[x][y] = block[x + 1][y] = bl++;
            }
        }
    }
    return std::pair {a, block};
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector a(n, std::vector<int>(m));
    std::vector block(n, std::vector<int>(m));
    if (n * m % 2 == 1) {
        int cur = 0;
        for (int x = 0; x < n; x++) {
            for (int j = 0; j < m; j++) {
                int y = x % 2 == 0 ? j : m - 1 - j;
                block[x][y] = cur / 2;
                a[x][y] = ++cur;
            }
        }
    } else {
        std::tie(a, block) = construct(n, m);
    }
        std::vector vis(n, std::vector<bool>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cout << a[i][j] << " \n"[j == m - 1];
        }
    }
    std::cout.flush();
        std::vector<bool> open(n * m);
        for (int t = 0; t < n * m; t++) {
        if (t % 2 == 0) {
            int x, y;
            std::cin >> x >> y;
            x--;
            y--;
            vis[x][y] = true;
            open[block[x][y]] = true;
        } else {
            int x = -1, y = -1;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (vis[i][j]) {
                        continue;
                    }
                    bool adj = false;
                    for (int k = 0; k < 4; k++) {
                        int nx = i + dx[k];
                        int ny = j + dy[k];
                        if (0 <= nx && nx < n && 0 <= ny && ny < m && vis[nx][ny]) {
                            adj = true;
                        }
                    }
                    if (!adj) {
                        continue;
                    }
                    if (x == -1 || open[block[x][y]] < open[block[i][j]] || (open[block[x][y]] == open[block[i][j]] && a[x][y] > a[i][j])) {
                        x = i;
                        y = j;
                    }
                }
            }
            assert(x != -1 && y != -1);
            std::cout << x + 1 << " " << y + 1 << std::endl;
            vis[x][y] = true;
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}