#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int K = 60;
int dp[K][K], g[K][K];
 void solve() {
    i64 x, y;
    std::cin >> x >> y;
        int a = x == 0 ? -1 : std::__lg(x);
    int b = y == 0 ? -1 : std::__lg(y);
        if (a > b) {
        std::swap(a, b);
        std::swap(x, y);
    }
        i64 v = x ^ (y >> (b - a));
    int s = v == 0 ? 0 : std::__lg(v) + 1;
    int t = s + b - a;
        int ans = g[a + 1][b + 1];
    for (int i = 0; t + i <= b; i++) {
        ans = std::min(ans, dp[s + i][t + i]);
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        for (int i = 0; i < K; i++) {
        for (int j = 0; j < K; j++) {
            dp[i][j] = 1E9;
        }
    }
    dp[0][0] = 0;
        for (int k = 1; k <= 30; k++) {
        for (int i = K - 1; i >= 0; i--) {
            for (int j = K - 1; j >= 0; j--) {
                if (i >= k) {
                    dp[i][j] = std::min(dp[i][j], dp[std::max(0, i - k)][j] + (1 << k));
                }
                if (j >= k) {
                    dp[i][j] = std::min(dp[i][j], dp[i][std::max(0, j - k)] + (1 << k));
                }
            }
        }
    }
    for (int i = 0; i < K; i++) {
        for (int j = 0; j < K; j++) {
            g[i][j] = 1E9;
            for (int x = i; x < K; x++) {
                for (int y = j; y < K; y++) {
                    g[i][j] = std::min(g[i][j], dp[x][y]);
                }
            }
        }
    }
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}