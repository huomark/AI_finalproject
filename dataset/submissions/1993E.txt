#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 constexpr int inf = 1E9;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector a(n + 1, std::vector<int>(m + 1));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> a[i][j];
            a[i][m] ^= a[i][j];
            a[n][j] ^= a[i][j];
            a[n][m] ^= a[i][j];
        }
    }
    n++;
    m++;
        int ans = inf;
        std::vector cost(n, std::vector<int>(m));
        for (int x = 0; x < n; x++) {
        std::vector g(m, std::vector<int>(m));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                for (int r = 0; r < n; r++) {
                    if (r != x) {
                        g[i][j] += std::abs(a[r][i] - a[r][j]);
                    }
                }
            }
        }
        std::vector dp(1 << m, std::vector<int>(m, inf));
        for (int i = 0; i < m; i++) {
            dp[1 << i][i] = 0;
        }
        for (int s = 0; s < (1 << m); s++) {
            for (int i = 0; i < m; i++) {
                if (~s >> i & 1) {
                    continue;
                }
                for (int j = 0; j < m; j++) {
                    if (s >> j & 1) {
                        continue;
                    }
                    int t = s | 1 << j;
                    dp[t][j] = std::min(dp[t][j], dp[s][i] + g[i][j]);
                }
            }
        }
        for (int y = 0; y < m; y++) {
            int res = inf;
            for (int i = 0; i < m; i++) {
                if (i != y) {
                    res = std::min(res, dp[(1 << m) - 1 - (1 << y)][i]);
                }
            }
            cost[x][y] += res;
        }
    }
    for (int y = 0; y < m; y++) {
        std::vector g(n, std::vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int c = 0; c < m; c++) {
                    if (c != y) {
                        g[i][j] += std::abs(a[i][c] - a[j][c]);
                    }
                }
            }
        }
        std::vector dp(1 << n, std::vector<int>(n, inf));
        for (int i = 0; i < n; i++) {
            dp[1 << i][i] = 0;
        }
        for (int s = 0; s < (1 << n); s++) {
            for (int i = 0; i < n; i++) {
                if (~s >> i & 1) {
                    continue;
                }
                for (int j = 0; j < n; j++) {
                    if (s >> j & 1) {
                        continue;
                    }
                    int t = s | 1 << j;
                    dp[t][j] = std::min(dp[t][j], dp[s][i] + g[i][j]);
                }
            }
        }
        for (int x = 0; x < n; x++) {
            int res = inf;
            for (int i = 0; i < n; i++) {
                if (i != x) {
                    res = std::min(res, dp[(1 << n) - 1 - (1 << x)][i]);
                }
            }
            cost[x][y] += res;
        }
    }
    for (int x = 0; x < n; x++) {
        for (int y = 0; y < m; y++) {
            ans = std::min(ans, cost[x][y]);
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}