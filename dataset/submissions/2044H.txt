#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n, q;
    std::cin >> n >> q;
        std::vector S(n + 1, std::vector<i64>(n + 1));
    std::vector Si(n + 1, std::vector<i64>(n + 1));
    std::vector Sj(n + 1, std::vector<i64>(n + 1));
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            std::cin >> S[i][j];
            Si[i][j] = S[i][j] * i;
            Sj[i][j] = S[i][j] * j;
            S[i][j] += S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1];
            Si[i][j] += Si[i - 1][j] + Si[i][j - 1] - Si[i - 1][j - 1];
            Sj[i][j] += Sj[i - 1][j] + Sj[i][j - 1] - Sj[i - 1][j - 1];
        }
    }
        for (int i = 0; i < q; i++) {
        int x1, y1, x2, y2;
        std::cin >> x1 >> y1 >> x2 >> y2;
        x1--;
        y1--;
                i64 s = S[x2][y2] - S[x2][y1] - S[x1][y2] + S[x1][y1];
        i64 si = Si[x2][y2] - Si[x2][y1] - Si[x1][y2] + Si[x1][y1];
        i64 sj = Sj[x2][y2] - Sj[x2][y1] - Sj[x1][y2] + Sj[x1][y1];
                i64 ans = si * (y2 - y1) + sj + s * ((-x1 - 1) * (y2 - y1) - y1);
        std::cout << ans << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}