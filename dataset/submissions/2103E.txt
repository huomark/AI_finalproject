#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        if (std::is_sorted(a.begin(), a.end())) {
        std::cout << 0 << "\n";
        return;
    }
        std::map<int, int> id;
    int x = -1, y = -1;
    for (int i = 0; i < n; i++) {
        if (id.contains(k - a[i])) {
            x = id[k - a[i]];
            y = i;
            break;
        }
        id[a[i]] = i;
    }
        if (x == -1) {
        std::cout << -1 << "\n";
        return;
    }
        std::vector<std::array<int, 3>> ans;
        auto work = [&](int i, int j, int x) {
        a[i] -= x;
        a[j] += x;
        ans.push_back({i, j, x});
    };
        if (x > 0) {
        work(x, y, a[x] - a[0]);
        x = 0;
    }
    if (y < n - 1) {
        work(x, y, a[n - 1] - a[y]);
        y = n - 1;
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin() + 1, p.end() - 1,
        [&](int i, int j) {
            return a[i] < a[j];
        });
        auto swap = [&](int i, int j) {
        if (i > j) {
            std::swap(i, j);
        }
        work(x, y, a[x] - a[i]);
        work(i, y, a[i] - a[j]);
        work(j, y, a[j] - a[x]);
    };
        for (int i = 1; i < n - 1; i++) {
        while (p[i] != i) {
            swap(p[i], p[p[i]]);
            std::swap(p[i], p[p[i]]);
        }
    }
        work(x, y, a[x]);
        std::cout << ans.size() << "\n";
    for (auto [i, j, x] : ans) {
        std::cout << i + 1 << " " << j + 1 << " " << x << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}