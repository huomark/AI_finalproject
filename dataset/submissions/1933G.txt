#include <bits/stdc++.h>
 using i64 = long long;
 int get(int x, int y, int t) {
    if (t >= 4) {
        return get(y, x, t - 4);
    }
    return (t & 1) ^ (x & 1) ^ (((t >> 1) + y) >> 1 & 1);
}
 void solve() {
    int n, m, q;
    std::cin >> n >> m >> q;
        int ok[8];
    for (int i = 0; i < 8; i++) {
        ok[i] = 1;
    }
        std::cout << std::count(ok, ok + 8, 1) << "\n";
        while (q--) {
        int x, y;
        std::string shape;
        std::cin >> x >> y >> shape;
        x--, y--;
                for (int i = 0; i < 8; i++) {
            if (get(x, y, i) != (shape == "circle")) {
                ok[i] = 0;
            }
        }
        std::cout << std::count(ok, ok + 8, 1) << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        // const int n = 5;
        // int a[n][n];
    // auto dfs = [&](auto self, int x, int y) {
    //     if (x == n) {
    //         for (int i = 0; i < n; i++) {
    //             for (int j = 0; j < n; j++) {
    //                 std::cerr << a[i][j];
    //             }
    //             std::cerr << "\n";
    //         }
    //         std::cerr << "---\n";
    //         return;
    //     }
    //     if (y == n) {
    //         return self(self, x + 1, 0);
    //     }
    //     for (int t = 0; t < 2; t++) {
    //         a[x][y] = t;
    //         if (x >= 2 && a[x][y] == a[x - 1][y] && a[x][y] == a[x - 2][y]) {
    //             continue;
    //         }
    //         if (y >= 2 && a[x][y] == a[x][y - 1] && a[x][y] == a[x][y - 2]) {
    //             continue;
    //         }
    //         if (x >= 2 && y >= 2 && a[x][y] == a[x - 1][y - 1] && a[x][y] == a[x - 2][y - 2]) {
    //             continue;
    //         }
    //         if (x >= 2 && y + 2 < n && a[x][y] == a[x - 1][y + 1] && a[x][y] == a[x - 2][y + 2]) {
    //             continue;
    //         }
    //         self(self, x, y + 1);
    //     }
    // };
    // dfs(dfs, 0, 0);
        // return 0;
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}