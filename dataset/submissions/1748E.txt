#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int P = 1000000007;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x)) {}
    Z(i64 x) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend std::istream &operator>>(std::istream &is, Z &a) {
        i64 v;
        is >> v;
        a = Z(v);
        return is;
    }
    friend std::ostream &operator<<(std::ostream &os, const Z &a) {
        return os << a.val();
    }
};
void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> lc(n, -1), rc(n, -1), s;
    for (int i = 0; i < n; i++) {
        while (!s.empty() && a[i] > a[s.back()]) {
            int x = s.back();
            rc[x] = lc[i];
            lc[i] = x;
            s.pop_back();
        }
        s.push_back(i);
    }
        while (s.size() > 1) {
        int x = s.back();
        s.pop_back();
        rc[s.back()] = x;
    }
        std::vector dp(n, std::vector<Z>(m, 1));
        std::function<void(int)> dfs = [&](int x) {
        if (lc[x] != -1) {
            dfs(lc[x]);
            for (int i = 0; i < m; i++) {
                dp[x][i] *= i ? dp[lc[x]][i - 1] : 0;
            }
        }
        if (rc[x] != -1) {
            dfs(rc[x]);
            for (int i = 0; i < m; i++) {
                dp[x][i] *= dp[rc[x]][i];
            }
        }
        for (int i = 1; i < m; i++) {
            dp[x][i] += dp[x][i - 1];
        }
    };
    dfs(s[0]);
        std::cout << dp[s[0]][m - 1] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}