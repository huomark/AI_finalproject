#include <bits/stdc++.h>
 using i64 = long long;
 struct SuffixAutomaton {
    static constexpr int ALPHABET_SIZE = 26, N = 1e6;
    struct Node {
        int len;
        int link;
        int next[ALPHABET_SIZE];
        Node() : len(0), link(0), next{} {}
    } t[2 * N];
    int cntNodes;
    SuffixAutomaton() {
        cntNodes = 1;
        std::fill(t[0].next, t[0].next + ALPHABET_SIZE, 1);
        t[0].len = -1;
    }
    int extend(int p, int c) {
        if (t[p].next[c]) {
            int q = t[p].next[c];
            if (t[q].len == t[p].len + 1)
                return q;
            int r = ++cntNodes;
            t[r].len = t[p].len + 1;
            t[r].link = t[q].link;
            std::copy(t[q].next, t[q].next + ALPHABET_SIZE, t[r].next);
            t[q].link = r;
            while (t[p].next[c] == q) {
                t[p].next[c] = r;
                p = t[p].link;
            }
            return r;
        }
        int cur = ++cntNodes;
        t[cur].len = t[p].len + 1;
        while (!t[p].next[c]) {
            t[p].next[c] = cur;
            p = t[p].link;
        }
        t[cur].link = extend(p, c);
        return cur;
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::string s;
    std::cin >> s;
        SuffixAutomaton sam;
    int p = 1;
    std::vector<int> end(n);
    for (int i = 0; i < n; i++) {
        p = sam.extend(p, s[i] - 'a');
        end[i] = p;
    }
        std::vector<int> cnt(sam.cntNodes + 1);
    for (auto x : end) {
        cnt[x]++;
    }
    std::vector<std::vector<int>> nodes(n + 1);
    for (int i = 2; i <= sam.cntNodes; i++) {
        nodes[sam.t[i].len].push_back(i);
    }
    for (int i = n; i > 0; i--) {
        for (auto x : nodes[i]) {
            cnt[sam.t[x].link] += cnt[x];
        }
    }
        i64 ans = 0;
        std::vector<std::vector<std::pair<int, int>>> events(n + 1);
    std::vector<int> f(n + 1);
    for (int i = 2; i <= sam.cntNodes; i++) {
        int l = sam.t[sam.t[i].link].len;
        int r = sam.t[i].len;
        if (l == 0) f[cnt[i]]++;
        else events[l].emplace_back(cnt[i], 1);
        events[r].emplace_back(cnt[i], -1);
    }
        for (int i = 1; i <= n; i++) {
        for (int j = i; j <= n; j += i) {
            ans += 1LL * j * f[j];
        }
        for (auto [a, b] : events[i]) {
            f[a] += b;
        }
    }
    std::cout << ans << "\n";
        return 0;
}