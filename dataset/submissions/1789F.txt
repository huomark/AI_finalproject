#include <bits/stdc++.h>
 using i64 = long long;
 void update(int &a, int b) {
    if (a < b) {
        a = b;
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::string s;
    std::cin >> s;
        int n = s.size();
        int ans = 0;
        std::array<int, 6> p;
    for (int i = 0; i <= 5; i++) {
        p[i] = n * i / 5;
    }
        for (int k = 0; k < 5; k++) {
        int gap = p[k + 1] - p[k];
        for (int mask = 1; mask < (1 << gap); mask++) {
            std::string t;
            for (int i = 0; i < gap; i++) {
                if (mask >> i & 1) {
                    t += s[p[k] + i];
                }
            }
            int len = 0;
            for (int i = 0; i < n; i++) {
                if (s[i] == t[len % t.size()]) {
                    len++;
                }
            }
            if (len < 2 * t.size()) {
                continue;
            }
            ans = std::max(ans, len - int(len % t.size()));
        }
    }
        for (int x = 1; x < n; x++) {
        std::vector dp(x + 1, std::vector<int>(n - x + 1));
        for (int i = 0; i <= x; i++) {
            for (int j = 0; j <= n - x; j++) {
                if (i < x) {
                    update(dp[i + 1][j], dp[i][j]);
                }
                if (j < n - x) {
                    update(dp[i][j + 1], dp[i][j]);
                }
                if (i < x && j < n - x && s[i] == s[x + j]) {
                    update(dp[i + 1][j + 1], dp[i][j] + 1);
                }
            }
        }
        ans = std::max(ans, dp[x][n - x] * 2);
    }
        for (int x = 1; x < n; x++) {
        for (int y = x + 1; y < n; y++) {
            std::vector dp(x + 1, std::vector(y - x + 1, std::vector<int>(n - y + 1)));
            for (int i = 0; i <= x; i++) {
                for (int j = 0; j <= y - x; j++) {
                    for (int k = 0; k <= n - y; k++) {
                        if (i < x) {
                            update(dp[i + 1][j][k], dp[i][j][k]);
                        }
                        if (j < y - x) {
                            update(dp[i][j + 1][k], dp[i][j][k]);
                        }
                        if (k < n - y) {
                            update(dp[i][j][k + 1], dp[i][j][k]);
                        }
                        if (i < x && j < y - x && k < n - y && s[i] == s[x + j] && s[i] == s[y + k]) {
                            update(dp[i + 1][j + 1][k + 1], dp[i][j][k] + 1);
                        }
                    }
                }
            }
            ans = std::max(ans, dp[x][y - x][n - y] * 3);
        }
    }
        std::cout << ans << "\n";
        return 0;
}