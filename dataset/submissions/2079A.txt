#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int N, n, M, m, k, q;
    std::cin >> N >> n >> M >> m >> k >> q;
        std::vector<int> pa(n + 1), va(n);
    for (int i = 0; i < n; i++) {
        int l;
        std::cin >> l >> va[i];
        va[i]--;
        pa[i + 1] = pa[i] + l;
    }
        std::vector<int> pb(m + 1), vb(m);
    for (int i = 0; i < m; i++) {
        int l;
        std::cin >> l >> vb[i];
        vb[i]--;
        pb[i + 1] = pb[i] + l;
    }
        std::vector<int> prea(n), preb(m);
    std::vector<int> cnt(k);
    std::vector<std::map<int, int>> fx(k), fy(k);
    constexpr int inf = 2E9;
    for (int i = 0; i < n; i++) {
        prea[i] = cnt[va[i]];
        cnt[va[i]] += pa[i + 1] - pa[i];
    }
    for (int i = 0; i < k; i++) {
        fx[i][-inf] = cnt[i] + 1;
        fx[i][inf] = cnt[i] + 1;
    }
    std::fill(cnt.begin(), cnt.end(), 0);
    for (int i = 0; i < m; i++) {
        preb[i] = cnt[vb[i]];
        cnt[vb[i]] += pb[i + 1] - pb[i];
    }
    for (int i = 0; i < k; i++) {
        fy[i][-inf] = cnt[i] + 1;
        fy[i][inf] = cnt[i] + 1;
    }
        auto split = [&](auto &f, int x) {
        auto it = std::prev(f.upper_bound(x));
        if (it->first == x) {
            return it;
        }
        f[x] = it->second;
        return f.find(x);
    };
        auto get = [&](auto &f, int x) {
        auto it = std::prev(f.upper_bound(x));
        return it->second;
    };
        auto fill = [&](auto &f, int l, int r, int v) -> void {
        auto itl = split(f, l);
        auto itr = split(f, r);
        auto nxt = std::next(itl);
        while (nxt != itr) {
            nxt = f.erase(nxt);
        }
        itl->second = v;
    };
        std::vector win(n, std::vector<bool>(m));
    std::vector other(n, std::vector<bool>(m));
        auto query = [&](int a, int i, int b, int j) {
        assert(va[a] == vb[b]);
        if (other[a][b]) {
            return true;
        }
        int v = va[a];
        int x = prea[a] + i;
        int y = preb[b] + j;
        int ex = get(fx[v], x - y);
        int ey = get(fy[v], x - y);
        int t = std::min(ex - x, ey - y);
        // if (a == 2 && b == 0) {
        //     std::cerr << "- " << x << " " << y << " " << ex << " " << ey << "\n";
        // }
        return t % 2 == 0;
    };
        std::vector qry(n, std::vector(m, std::vector<std::array<int, 3>> {}));
    std::vector<bool> ans(q);
    for (int i = 0; i < q; i++) {
        int x, y;
        std::cin >> x >> y;
                int a = std::upper_bound(pa.begin(), pa.end(), x) - pa.begin() - 1;
        int b = std::upper_bound(pb.begin(), pb.end(), y) - pb.begin() - 1;
        qry[a][b].push_back({x - pa[a], y - pb[b], i});
    }
        std::vector<int> nxta(k, -1);
    for (int a = n - 1; a >= 0; a--) {
        int cntlose = 0;
        std::vector<int> nxtb(k, -1);
        for (int b = m - 1; b >= 0; b--) {
            if (va[a] == vb[b]) {
                other[a][b] = cntlose > 0;
                win[a][b] = query(a, 1, b, 1);
                for (auto [i, j, k] : qry[a][b]) {
                    ans[k] = query(a, i, b, j);
                }
                if (other[a][b]) {
                    fill(fx[va[a]], prea[a] - preb[b] - (pb[b + 1] - pb[b]) + 1, prea[a] - preb[b] + 1, prea[a] + 1);
                    fill(fy[va[a]], prea[a] - preb[b], prea[a] - preb[b] + pa[a + 1] - pa[a], preb[b] + 1);
                }
                // std::cerr << a << " " << b << " " << win[a][b] << " " << other[a][b] << "\n";
            } else {
                int x = vb[b];
                if (nxta[x] != -1 && nxtb[x] != -1) {
                    cntlose -= !win[nxta[x]][nxtb[x]];
                }
                nxtb[x] = b;
                if (nxta[x] != -1 && nxtb[x] != -1) {
                    cntlose += !win[nxta[x]][nxtb[x]];
                }
            }
        }
        nxta[va[a]] = a;
    }
    for (int i = 0; i < q; i++) {
        std::cout << (ans[i] ? "Yes" : "No") << "\n";
    }
        return 0;
}