#include <bits/stdc++.h>
 using i64 = long long;
 std::vector<int> constructMultiple(int n, int k) {
    assert(n % k == 0);
        std::vector<int> a(n, -1);
    int t = n / k;
    if (k % 2 == 0) {
        for (int i = 0; i < n / 2; i++) {
            a[2 * i] = i;
            a[2 * i + 1] = n - 1 - i;
        }
    } else if (n % 2 == 1) {
        for (int i = 0; i < t; i++) {
            if (i < (t - 1) / 2) {
                a[i * k + 0] = 2 * i;
                a[i * k + 1] = (3 * t - 2 * i - 1) / 2;
                a[i * k + 2] = 3 * t - 1 - i;
            } else if (i == (t - 1) / 2) {
                a[i * k + 0] = t - 1;
                a[i * k + 1] = t;
                a[i * k + 2] = (5 * t - 1) / 2;
            } else {
                a[i * k + 0] = t + i;
                a[i * k + 1] = i + (t * 3 - 1) / 2;
                a[i * k + 2] = 2 * t - 2 * i - 1;
            }
            for (int j = 3; j < k; j += 2) {
                a[i * k + j] = j * t + i;
                a[i * k + j + 1] = (j + 2) * t - 1 - i;
            }
        }
    } else {
        for (int i = 0; i < t; i++) {
            if (i < t / 2) {
                a[i * k + 0] = 2 * i;
                a[i * k + 1] = (3 * t - 2 * i - 2) / 2;
                a[i * k + 2] = 3 * t - 1 - i;
            } else {
                a[i * k + 0] = t + i;
                a[i * k + 1] = i + t * 3 / 2;
                a[i * k + 2] = 2 * t - 2 * i - 1;
            }
            for (int j = 3; j < k; j += 2) {
                a[i * k + j] = j * t + i;
                a[i * k + j + 1] = (j + 2) * t - 1 - i;
            }
        }
    }
        return a;
}
 std::vector<int> construct(int n, int k) {
    int q = n / k;
    int r = n % k;
        std::vector<int> a(n, -1);
        if (r == 0) {
        a = constructMultiple(n, k);
    } else if (r != 1 && k - r != 1) {
        auto x = constructMultiple((q + 1) * r, r);
        auto y = constructMultiple(q * (k - r), k - r);
        for (int i = 0; i <= q; i++) {
            for (int j = 0; j < r; j++) {
                a[i * k + j] = x[i * r + j];
            }
        }
        for (int i = 0; i < q; i++) {
            for (int j = 0; j < k - r; j++) {
                a[i * k + r + j] = (q + 1) * r + y[i * (k - r) + j];
            }
        }
    } else if (r == 1) {
        for (int i = 0; i <= q; i++) {
            a[i * k] = i;
        }
        for (int i = 0; i < q; i++) {
            a[i * k + 1] = 2 * q - i;
        }
        auto x = constructMultiple(q * (k - 2), k - 2);
        for (int i = 0; i < q; i++) {
            for (int j = 0; j < k - 2; j++) {
                a[i * k + j + 2] = x[i * (k - 2) + j] + 2 * q + 1;
            }
        }
    } else if (k - r == 1 && q == 1) {
        a[k - 1] = n - 1;
        auto x = constructMultiple(n - 1, k - 1);
        for (int i = 0; i < k - 1; i++) {
            a[i] = x[i];
            a[i + k] = x[i + k - 1];
        }
    } else {
        for (int i = 0; i < q; i++) {
            a[i * k + k - 1] = n - 1 - i;
        }
        for (int i = 0; i <= q; i++) {
            a[i * k] = i;
        }
        auto x = constructMultiple((q + 1) * (r - 1), r - 1);
        for (int i = 0; i <= q; i++) {
            for (int j = 0; j < r - 1; j++) {
                a[i * k + 1 + j] = x[i * (r - 1) + j] + q + 1;
            }
        }
    }
        return a;
}
 void solve() {
    int n, k;
    std::cin >> n >> k;
        auto ans = construct(n, k);
    std::vector<i64> pre(n + 1);
    for (int i = 0; i < n; i++) {
        pre[i + 1] = pre[i] + ans[i] + 1;
    }
        i64 res = 1E18;
    for (int i = 0; i + k <= n; i++) {
        res = std::min(res, pre[i + k] - pre[i]);
    }
    std::cout << res << "\n";
    for (int i = 0; i < n; i++) {
        std::cout << ans[i] + 1 << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}