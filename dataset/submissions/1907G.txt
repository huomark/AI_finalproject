#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::string s;
    std::cin >> s;
        std::vector<int> a(n);
    std::vector<int> deg(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i] -= 1;
        deg[a[i]] += 1;
    }
        std::queue<int> q;
    for (int i = 0; i < n; i++) {
        if (deg[i] == 0) {
            q.push(i);
        }
    }
    std::vector<int> ans;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
                if (s[x] == '1') {
            s[x] = '0';
            s[a[x]] ^= 1;
            ans.push_back(x);
        }
        if (--deg[a[x]] == 0) {
            q.push(a[x]);
        }
    }
        for (int i = 0; i < n; i++) {
        if (deg[i]) {
            int j = i;
            int t = 0;
            int len = 0;
            int res = 0;
            while (deg[j]) {
                if (s[j] == '1') {
                    t ^= 1;
                }
                res += t;
                deg[j] = 0;
                j = a[j];
                len += 1;
            }
            if (t == 1) {
                std::cout << -1 << "\n";
                return;
            }
            for (int k = 0; k < len; k++) {
                if (s[j] == '1') {
                    t ^= 1;
                }
                if (t == (res < len - res)) {
                    ans.push_back(j);
                }
                j = a[j];                    
            }
        }
    }
        std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x + 1 << " \n"[x == ans.back()];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}