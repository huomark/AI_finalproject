#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
 constexpr i64 inf = 1E12;
 struct Node {
    i64 v = 0;
    int to = 0;
    i64 tag = 0;
    int h = 0;
    Node *l = nullptr;
    Node *r = nullptr;
};
 void add(Node *a, i64 v) {
    if (a) {
        a->v += v;
        a->tag += v;
    }
}
 void push(Node *a) {
    add(a->l, a->tag);
    add(a->r, a->tag);
    a->tag = 0;
}
 Node *merge(Node *a, Node *b) {
    if (!a) {
        return b;
    }
    if (!b) {
        return a;
    }
    if (a->v > b->v) {
        std::swap(a, b);
    }
    push(a);
    push(b);
    a->r = merge(a->r, b);
    if (!a->l || a->l->h < a->r->h) {
        std::swap(a->l, a->r);
    }
    a->h = a->r ? a->r->h + 1 : 0;
    return a;
}
 Node *pop(Node *a) {
    push(a);
    return merge(a->l, a->r);
}
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedParent(int u, int v) {
        std::swap(u, v);
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedParent(u, v)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m, q;
    std::cin >> n >> m >> q;
        DSU dsu(2 * n - 1);
    int cur = n;
        std::vector<Node *> e(2 * n - 1);
    std::vector<bool> inq(2 * n - 1);
        for (int i = 0; i < m; i++) {
        int u, v, c;
        std::cin >> u >> v >> c;
        u--, v--;
        e[u] = merge(e[u], new Node{c, v});
    }
    for (int i = 0; i < n; i++) {
        e[i] = merge(e[i], new Node{inf, (i + 1) % n});
    }
        std::vector<int> stk;
    stk.push_back(0);
    inq[0] = true;
    std::vector<i64> w(2 * n - 1);
    HLD t(2 * n - 1);
    while (true) {
        int x = stk.back();
        while (e[x] && dsu.same(x, e[x]->to)) {
            e[x] = pop(e[x]);
        }
        if (!e[x]) {
            break;
        }
        w[x] = e[x]->v;
        int y = dsu.find(e[x]->to);
        if (inq[y]) {
            int nv = cur++;
            while (true) {
                int v = stk.back();
                stk.pop_back();
                add(e[v], -e[v]->v);
                t.addEdge(nv, v);
                dsu.merge(nv, v);
                e[nv] = merge(e[nv], e[v]);
                if (v == y) {
                    break;
                }
            }
            stk.push_back(nv);
            inq[nv] = true;
        } else {
            stk.push_back(y);
            inq[y] = true;
        }
    }
        int rt = cur - 1;
    t.work(rt);
        auto cmp = [&](int i, int j) {
        return t.in[i] < t.in[j];
    };
        i64 ans = std::accumulate(w.begin(), w.end(), 0LL);
    std::set<int, decltype(cmp)> s(cmp);
    for (int i = rt - 1; i >= 0; i--) {
        w[i] += w[t.parent[i]];
    }
        while (q--) {
        char o;
        int x;
        std::cin >> o >> x;
        x--;
                if (o == '+') {
            auto it = s.insert(x).first;
            auto r = std::next(it);
            ans -= w[x];
            if (it != s.begin()) {
                ans += w[t.lca(x, *std::prev(it))];
            }
            if (r != s.end()) {
                ans += w[t.lca(x, *r)];
            }
            if (it != s.begin() && r != s.end()) {
                ans -= w[t.lca(*std::prev(it), *r)];
            }
        } else {
            auto it = s.find(x);
            auto r = std::next(it);
            ans += w[x];
            if (it != s.begin()) {
                ans -= w[t.lca(x, *std::prev(it))];
            }
            if (r != s.end()) {
                ans -= w[t.lca(x, *r)];
            }
            if (it != s.begin() && r != s.end()) {
                ans += w[t.lca(*std::prev(it), *r)];
            }
            s.erase(it);
        }
        std::cout << (ans >= inf ? -1 : ans) << "\n";
    }
        return 0;
}