#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F &&pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F &&pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 1E9;
 struct Info {
    int x = -inf;
};
 Info operator+(const Info &a, const Info &b) {
    return {std::max(a.x, b.x)};
}
 void solve() {
    std::string s, t;
    std::cin >> s >> t;
        int n = s.size();
        if (n == 1) {
        if (s == t || t == "?") {
            std::cout << 0 << "\n";
        } else {
            std::cout << -1 << "\n";
        }
        return;
    }
        int ans = inf;
        for (int t0 = 0; t0 < 2; t0++) {
        for (int tn = 0; tn < 2; tn++) {
            if (t[0] != '?' && t[0] != '0' + t0) {
                continue;
            }
            if (t[n - 1] != '?' && t[n - 1] != '0' + tn) {
                continue;
            }
            auto S = char('0' + t0) + s + char('0' + tn);
            auto T = char('0' + t0) + t + char('0' + tn);
            T[1] = '0' + t0;
            T[n] = '0' + tn;
                        // std::cerr << S << " " << T << "\n";
                        std::vector<int> pre(n + 3);
            for (int i = 0; i < n + 2; i++) {
                pre[i + 1] = pre[i] + (S[i] - '0');
            }
                        std::vector<std::array<int, 2>> next(n + 2), prev(n + 2);
            for (int i = n + 1; i >= 0; i--) {
                for (int x = 0; x < 2; x++) {
                    if (T[i] == '0' + x) {
                        next[i][x] = i;
                    } else if (i < n + 1) {
                        next[i][x] = next[i + 1][x];
                    } else {
                        next[i][x] = i + 1;
                    }
                }
            }
            for (int i = 0; i <= n + 1; i++) {
                for (int x = 0; x < 2; x++) {
                    if (T[i] == '0' + x) {
                        prev[i][x] = i;
                    } else if (i) {
                        prev[i][x] = prev[i - 1][x];
                    } else {
                        prev[i][x] = i - 1;
                    }
                }
            }
                        std::vector<int> dp(n + 2, -inf);
            dp[0] = 0;
                        std::vector<std::vector<int>> del(n + 2);
                        for (int i = 0; i <= n + 1; i++) {
                if (T[i] != S[i] && T[i] != '?') {
                    continue;
                }
                int lo = i, hi = n + 1;
                while (lo < hi) {
                    int j = (lo + hi + 1) / 2;
                    int c1 = pre[j + 1] - pre[i];
                    int c0 = (j + 1 - i) - c1;
                                        if (S[i] == '0' ? i + c0 <= next[i][1] : i + c1 <= next[i][0]) {
                        lo = j;
                    } else {
                        hi = j - 1;
                    }
                }
                                del[lo].push_back(i);
            }
                        std::vector seg(2, SegmentTree<Info>(n + 2));
                        for (int i = 0; i <= n + 1; i++) {
                if (T[i] == S[i] || T[i] == '?') {
                    if (i) {
                        if (T[i - 1] == S[i - 1] || T[i - 1] == '?') {
                            dp[i] = std::max(dp[i], dp[i - 1] + (S[i] != S[i - 1]));
                        }
                        int lo = 0, hi = i;
                        while (lo < hi) {
                            int j = (lo + hi) / 2;
                            int c1 = pre[i + 1] - pre[j];
                            int c0 = (i + 1 - j) - c1;
                                                        if (S[i] == '1' ? i - c1 >= prev[i][0] : i - c0 >= prev[i][1]) {
                                hi = j;
                            } else {
                                lo = j + 1;
                            }
                        }
                                                dp[i] = std::max(dp[i], seg[(S[i] - '0') ^ 1].rangeQuery(lo, i).x + 1);
                    }
                    seg[S[i] - '0'].modify(i, {dp[i]});
                }
                                for (auto j : del[i]) {
                    seg[S[j] - '0'].modify(j, {});
                }
            }
                        // for (int i = 0; i <= n + 1; i++) {
            //     for (int j = i + 1; j <= n + 1; j++) {
            //         if (j == i + 1) {
            //             dp[j] = std::max(dp[j], dp[i] + (S[i] != S[j]));
            //         }
            //         if (S[i] == '0' && S[j] == '1') {
            //             int c1 = pre[j + 1] - pre[i];
            //             int c0 = (j + 1 - i) - c1;
            //             if (i + c0 <= next[i][1] && j - c1 >= prev[j][0]) {
            //                 dp[j] = std::max(dp[j], dp[i] + 1);
            //             }
            //         }
            //         if (S[i] == '1' && S[j] == '0') {
            //             int c1 = pre[j + 1] - pre[i];
            //             int c0 = (j + 1 - i) - c1;
            //             if (i + c1 <= next[i][0] && j - c0 >= prev[j][1]) {
            //                 dp[j] = std::max(dp[j], dp[i] + 1);
            //             }
            //         }
            //     }
            // }
                        // std::cerr << dp[n + 1] << "\n";
                        // for (int i = 0; i <= n + 1; i++) {
            //     std::cerr << dp[i] << " \n"[i == n + 1];
            // }
                        int res = 0;
            for (int i = 1; i <= n + 1; i++) {
                if (S[i] != S[i - 1]) {
                    res++;
                }
            }
            res -= dp[n + 1];
            ans = std::min(ans, res);
        }
    }
        if (ans > inf / 2) {
        ans = -1;
    } else {
        ans /= 2;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}