#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, c;
    std::cin >> n >> c;
        std::vector<std::array<int, 3>> edges;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int w;
            std::cin >> w;
                        if (i < j && w) {
                edges.push_back({w, i, j});
            }
        }
    }
    std::sort(edges.begin(), edges.end());
        int ans = 1E9;
    for (int s = 0; s < (1 << n); s++) {
        DSU dsu(n);
        int sum = __builtin_popcount(s) * c;
        for (auto [w, i, j] : edges) {
            if (((s >> i | s >> j) & 1) && dsu.merge(i, j)) {
                sum += w;
            }
        }
        if (dsu.size(0) == n) {
            ans = std::min(ans, sum);
        }
    }
    std::cout << ans << "\n";
        return 0;
}