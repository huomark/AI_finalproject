#include <bits/stdc++.h>
 using i64 = long long;
 struct BlockCutTree {
    int n;
    std::vector<std::vector<int>> adj;
    std::vector<int> dfn, low, stk;
    int cnt, cur;
    std::vector<std::pair<int, int>> edges;
        BlockCutTree() {}
    BlockCutTree(int n) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        adj.assign(n, {});
        dfn.assign(n, -1);
        low.resize(n);
        stk.clear();
        cnt = cur = 0;
        edges.clear();
    }
        void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        void dfs(int x) {
        stk.push_back(x);
        dfn[x] = low[x] = cur++;
                for (auto y : adj[x]) {
            if (dfn[y] == -1) {
                dfs(y);
                low[x] = std::min(low[x], low[y]);
                if (low[y] == dfn[x]) {
                    int v;
                    do {
                        v = stk.back();
                        stk.pop_back();
                        edges.emplace_back(n + cnt, v);
                    } while (v != y);
                    edges.emplace_back(x, n + cnt);
                    cnt++;
                }
            } else {
                low[x] = std::min(low[x], dfn[y]);
            }
        }
    }
        std::pair<int, std::vector<std::pair<int, int>>> work() {
        dfs(0);
        return {cnt, edges};
    }
};
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        BlockCutTree g(n);
        std::vector<std::pair<int, int>> e;
        for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        g.addEdge(u, v);
        e.emplace_back(u, v);
    }
        auto [cnt, edges] = g.work();
        std::vector<int> siz(n + cnt);
        HLD t(n + cnt);
    for (auto [x, y] : edges) {
        t.addEdge(x, y);
    }
    t.work();
        for (auto [x, y] : e) {
        if (t.dep[x] > t.dep[y]) {
            siz[t.parent[x]]++;
        } else {
            siz[t.parent[y]]++;
        }
    }
        for (int i = n; i < n + cnt; i++) {
        if (siz[i] == 1) {
            siz[i] = 0;
        }
    }
        auto dfs = [&](auto self, int x) -> void {
        for (auto y : t.adj[x]) {
            siz[y] += siz[x];
            self(self, y);
        }
    };
    dfs(dfs, 0);
        int q;
    std::cin >> q;
        for (int i = 0; i < q; i++) {
        int a, b;
        std::cin >> a >> b;
        a--, b--;
                int ans = siz[a] + siz[b];
        int l = t.lca(a, b);
        ans -= siz[l];
        if (l > 0) {
            ans -= siz[t.parent[l]];
        }
        std::cout << ans << "\n";
    }
        return 0;
}