#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n + 2);
    for (int i = 1; i <= n; i++) {
        std::cin >> a[i];
    }
        std::vector<i64> pre(n + 2);
    for (int i = 1; i <= n + 1; i++) {
        pre[i] = pre[i - 1] + a[i];
    }
        i64 ans = *std::ranges::partition_point(std::ranges::iota_view(0LL, pre[n] + 1),
        [&](i64 s) {
            std::vector<i64> dp(n + 2, 1E18);
            dp[0] = 0;
                        std::deque<int> q;
            for (int i = 1, j = 0; i <= n + 1; i++) {
                while (!q.empty() && dp[i - 1] < dp[q.back()]) {
                    q.pop_back();
                }
                q.push_back(i - 1);
                while (pre[i - 1] - pre[q.front()] > s) {
                    q.pop_front();
                }
                dp[i] = dp[q[0]] + a[i];
            }
                        return dp[n + 1] > s;
        });
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}