#include <bits/stdc++.h>
 using i64 = long long;
 int suitToId(char x) {
    if (x == 'C') {
        return 0;
    } else if (x == 'D') {
        return 1;
    } else if (x == 'H') {
        return 2;
    } else {
        return 3;
    }
}
 int rankToId(char x) {
    if (x == 'T') {
        return 8;
    } else if (x == 'J') {
        return 9;
    } else if (x == 'Q') {
        return 10;
    } else if (x == 'K') {
        return 11;
    } else if (x == 'A') {
        return 12;
    } else {
        return x - '2';
    }
}
 int cardToId(std::string s) {
    if (s[0] == 'J' && std::isdigit(s[1])) {
        return 52 + s[1] - '1';
    } else {
        return suitToId(s[1]) * 13 + rankToId(s[0]);
    }
}
 char idToSuit(int x) {
    return "CDHS"[x];
}
 char idToRank(int x) {
    return "23456789TJQKA"[x];
}
 std::string idToCard(int x) {
    std::string s;
    if (x >= 52) {
        s += 'J';
        s += '1' + x - 52;
    } else {
        s += idToRank(x % 13);
        s += idToSuit(x / 13);
    }
    return s;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector a(n, std::vector<int>(m));
    std::vector vis(54, -1);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::string s;
            std::cin >> s;
            a[i][j] = cardToId(s);
            vis[a[i][j]] = i * m + j;
        }
    }
        auto check = [&](int j1, int j2) {
        for (int x1 = 0; x1+3 <= n; x1++) {
            for (int y1 = 0; y1+3 <= m; y1++) {
                for (int x2 = 0; x2+3 <= n; x2++) {
                    for (int y2 = 0; y2+3 <= m; y2++) {
                        if (std::abs(x1 - x2) < 3 && std::abs(y1 - y2) < 3) {
                            continue;
                        }
                        std::set<int> s1, r1, s2, r2;
                        for (int i = 0; i < 3; i++) {
                            for (int j = 0; j < 3; j++) {
                                s1.insert(a[x1+i][y1+j] / 13);
                                r1.insert(a[x1+i][y1+j] % 13);
                                s2.insert(a[x2+i][y2+j] / 13);
                                r2.insert(a[x2+i][y2+j] % 13);
                            }
                        }
                        if ((s1.size() == 1 || r1.size() == 9) && (s2.size() == 1 || r2.size() == 9)) {
                            std::cout << "Solution exists.\n";
                            if (j1 == -1 && j2 == -1) {
                                std::cout << "There are no jokers.\n";
                            } else if (j1 != -1 && j2 != -1) {
                                std::cout << "Replace J1 with " << idToCard(j1) << " and J2 with " << idToCard(j2) << ".\n";
                            } else if (j1 != -1) {
                                std::cout << "Replace J1 with " << idToCard(j1) << ".\n";
                            } else if (j2 != -1) {
                                std::cout << "Replace J2 with " << idToCard(j2) << ".\n";
                            }
                            std::cout << "Put the first square to (" << x1+1 << ", " << y1+1 << ").\n";
                            std::cout << "Put the second square to (" << x2+1 << ", " << y2+1 << ").\n";
                            std::exit(0);
                        }
                    }
                }
            }
        }
    };
        if (vis[52] == -1 && vis[53] == -1) {
        check(-1, -1);
    } else if (vis[52] != -1 && vis[53] != -1) {
        for (int i = 0; i < 52; i++) {
            for (int j = 0; j < 52; j++) {
                if (vis[i] == -1 && vis[j] == -1 && i != j) {
                    a[vis[52] / m][vis[52] % m] = i;
                    a[vis[53] / m][vis[53] % m] = j;
                    check(i, j);
                }
            }
        }
    } else if (vis[52] != -1) {
        for (int i = 0; i < 52; i++) {
            if (vis[i] == -1) {
                a[vis[52] / m][vis[52] % m] = i;
                check(i, -1);
            }
        }
    } else {
        for (int i = 0; i < 52; i++) {
            if (vis[i] == -1) {
                a[vis[53] / m][vis[53] % m] = i;
                check(-1, i);
            }
        }
    }
        std::cout << "No solution.\n";
        return 0;
}