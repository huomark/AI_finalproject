#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::cout << std::fixed << std::setprecision(10);
        std::vector<int> deg(n);
    std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
        deg[u]++, deg[v]++;
    }
        double ans = 0;
        std::queue<int> q;
    for (int i = 0; i < n; i++) {
        if (deg[i] == 1) {
            q.push(i);
        }
    }
    std::vector cyc(n, true);
    while (!q.empty()) {
        int x = q.front();
        q.pop();
                cyc[x] = false;
                for (auto y : adj[x]) {
            if (deg[y] && --deg[y] == 1) {
                q.push(y);
            }
        }
    }
        std::vector<int> a;
    std::vector<bool> vis(n);
    std::function<void(int)> dfs = [&](int x) {
        a.push_back(x);
        vis[x] = true;
        for (auto y : adj[x]) {
            if (cyc[y] && !vis[y]) {
                dfs(y);
            }
        }
    };
    dfs(std::find(cyc.begin(), cyc.end(), true) - cyc.begin());
        std::vector<int> pos(n, -1), dep(n);
    int L = a.size();
    for (int i = 0; i < L; i++) {
        pos[a[i]] = i;
    }
        dfs = [&](int x) {
        for (auto y : adj[x]) {
            if (pos[y] == -1) {
                pos[y] = pos[x];
                dep[y] = dep[x] + 1;
                dfs(y);
            }
        }
    };
    for (auto x : a) {
        dfs(x);
    }
        std::function<void(int, int, int)> dfs1 = [&](int x, int p, int d) {
        ans += 1. / d;
        for (auto y : adj[x]) {
            if (y != p && pos[x] == pos[y]) {
                dfs1(y, x, d + 1);
            }
        }
    };
    for (int i = 0; i < n; i++) {
        dfs1(i, -1, 1);
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (pos[i] != pos[j]) {
                int l = std::abs(pos[i] - pos[j]);
                ans += 1. / (dep[i] + dep[j] + l + 1);
                ans += 1. / (dep[i] + dep[j] + L - l + 1);
                ans -= 1. / (dep[i] + dep[j] + L);
            }
        }
    }
    std::cout << ans << "\n";
        return 0;
}