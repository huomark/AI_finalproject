#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> p(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
    }
        std::vector<int> lmin(n, -1), rmin(n, n), lmax(n, -1), rmax(n, n);
    std::vector<int> smin, smax;
    for (int i = 0; i < n; i++) {
        while (!smin.empty() && p[i] < p[smin.back()]) {
            rmin[smin.back()] = i;
            smin.pop_back();
        }
        if (!smin.empty()) {
            lmin[i] = smin.back();
        }
        smin.push_back(i);
                while (!smax.empty() && p[i] > p[smax.back()]) {
            rmax[smax.back()] = i;
            smax.pop_back();
        }
        if (!smax.empty()) {
            lmax[i] = smax.back();
        }
        smax.push_back(i);
    }
        i64 ans = 0;
    std::vector<int> s{-1};
    std::vector<i64> sum{0LL};
    for (int i = 0; i < n; i++) {
        while (s.size() > 1 && p[i] < p[s.back()]) {
            rmin[s.back()] = i;
            s.pop_back();
            sum.pop_back();
        }
        int l = std::upper_bound(s.begin(), s.end(), lmax[i]) - s.begin();
        if (l < s.size()) {
            ans += 1LL * (s[l] - std::max(s[l - 1], lmax[i]))
                * (std::min(rmax[i], rmin[s[l]]) - i);
            l++;
            int m = std::partition_point(s.begin() + l, s.end(), [&](int x) {
                return rmin[x] > rmax[i];
            }) - s.begin();
            ans += 1LL * (s[m - 1] - s[l - 1]) * rmax[i];
            ans -= 1LL * (s.back() - s[l - 1]) * i;
            ans += sum.back() - sum[m - 1];
        }
        sum.push_back(sum.back() + 1LL * (i - s.back()) * rmin[i]);
        s.push_back(i);
    }
        std::cout << ans << "\n";
        return 0;
}