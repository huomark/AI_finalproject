#include <bits/stdc++.h>
 using i64 = long long;
 std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
 void solve() {
    int k;
    std::cin >> k;
        int n = 2 << k;
        std::vector<i64> g(n);
    for (int i = 0; i < n; i++) {
        std::cin >> g[i];
        // g[i] = rng() % (1LL << (2 * k));
    }
        std::vector<i64> s(n + 1);
    for (int i = 0; i < n; i++) {
        s[i + 1] = s[i] ^ g[i];
    }
        std::vector<int> p(n + 1);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(), [&](int i, int j) {
        return s[i] < s[j] || (s[i] == s[j] && i < j);
    });
        for (int i = 0; i + 2 <= n; i++) {
        if (s[p[i]] == s[p[i + 2]]) {
            std::cout << p[i] + 1 << " " << p[i + 1] << " " << p[i + 1] + 1 << " " << p[i + 2] << "\n";
            return;
        }
    }
        int j = -1;
    for (int i = 0; i + 1 <= n; i++) {
        if (s[p[i]] == s[p[i + 1]]) {
            if (j != -1) {
                std::vector a{p[j], p[j + 1], p[i], p[i + 1]};
                std::sort(a.begin(), a.end());
                std::cout << a[0] + 1 << " " << a[1] << " " << a[2] + 1 << " " << a[3] << "\n";
                return;
            } else {
                j = i;
            }
        }
    }
        std::map<i64, std::array<int, 2>> f;
    while (true) {
        int l = rng() % (n + 1);
        int r = rng() % (n + 1);
        while ((j != -1 && (l == p[j] || r == p[j])) || l == r) {
            l = rng() % (n + 1);
            r = rng() % (n + 1);
        }
        if (l > r) {
            std::swap(l, r);
        }
        if (f.contains(s[l] ^ s[r]) && f[s[l] ^ s[r]] != std::array{l, r}) {
            auto [x, y] = f[s[l] ^ s[r]];
            std::vector a{l, r, x, y};
            std::sort(a.begin(), a.end());
            std::cout << a[0] + 1 << " " << a[1] << " " << a[2] + 1 << " " << a[3] << "\n";
            return;
        } else {
            f[s[l] ^ s[r]] = {l, r};
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}