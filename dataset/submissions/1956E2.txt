#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> p;
    for (int t = 0; t < 2000; t++) {
        for (int i = 0; i < n - 1; i++) {
            a[i + 1] = std::max(a[i + 1] - a[i], 0);
        }
        a[0] = std::max(a[0] - a[n - 1], 0);
    }
        for (int i = 0; i < n; i++) {
        if (a[i] == 0) {
            p.push_back(i);
        }
    }
    assert(!p.empty());
    for (int i = 0; i < p.size(); i++) {
        int l = p[i] + 1, r = p[(i + 1) % p.size()];
        int len = (r - l + n) % n;
        assert(len <= 3);
        if (len == 2) {
            a[(l + 1) % n] = 0;
        } else if (len == 3) {
            int &x = a[l % n];
            int &y = a[(l + 1) % n];
            int &z = a[(l + 2) % n];
            int d = y / x;
            i64 tot = 1LL * (y - x + y - x * d) * d / 2;
            if (l == n - 1) {
                tot += y;
            }
            if (tot >= z) {
                z = 0;
            }
            y = 0;
        }
    }
        std::vector<int> ans;
    for (int i = 0; i < n; i++) {
        if (a[i] > 0) {
            ans.push_back(i);
        }
    }
    std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x + 1 << " ";
    }
    std::cout << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}