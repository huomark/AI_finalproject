#include <bits/stdc++.h>
 using i64 = long long;
 std::vector<int> KMP(std::string s) {
    int n = s.size();
    std::vector<int> f(n + 1);
    for (int i = 1, j = 0; i < n; i++) {
        while (j && s[i] != s[j]) {
            j = f[j];
        }
        j += (s[i] == s[j]);
        f[i + 1] = j;
    }
    return f;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::vector<std::string> s(3);
    for (int i = 0; i < 3; i++) {
        std::cin >> s[i];
    }
        std::sort(s.begin(), s.end(), [&](auto a, auto b) {
        return a.size() > b.size();
    });
        std::vector<std::string> t;
    for (auto s : s) {
        int n = s.size();
        auto f = KMP(s);
        bool ok = true;
        for (auto t : t) {
            int j = 0;
            for (auto c : t) {
                while (j && c != s[j]) {
                    j = f[j];
                }
                j += (c == s[j]);
                if (j == n) {
                    break;
                }
            }
            if (j == n) {
                ok = false;
                break;
            }
        }
        if (ok) {
            t.push_back(s);
        }
    }
        s = std::move(t);
        std::sort(s.begin(), s.end());
        int ans = 1E9;
        do {
        int sum = 0;
        for (auto s : s) {
            sum += s.size();
        }
        for (int i = 1; i < s.size(); i++) {
            auto f = KMP(s[i] + s[i - 1]);
            int j = f.size() - 1;
            while (j > std::min(s[i].size(), s[i - 1].size())) {
                j = f[j];
            }
            sum -= j;
        }
        ans = std::min(ans, sum);
    } while (std::next_permutation(s.begin(), s.end()));
        std::cout << ans << "\n";
        return 0;
}