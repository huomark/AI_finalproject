#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> c(n);
    for (int i = 0; i < n; i++) {
        std::cin >> c[i];
        c[i]--;
    }
        std::vector dp(2 * n + 1, std::vector(n, 0));
    for (auto x : c) {
        std::vector ndp(2 * n + 1, std::vector(n, n));
        for (int i = 0; i <= 2 * n; i++) {
            for (int j = 0; j < n; j++) {
                if (i % 2 == 0) {
                    if (j <= x) {
                        ndp[i][x] = std::min(ndp[i][x], dp[i][j]);
                    }
                } else {
                    ndp[i][j] = std::min(ndp[i][j], dp[i][j] + 1);
                }
            }
        }
        dp = std::move(ndp);
        for (int i = 1; i <= 2 * n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = std::min(dp[i][j], dp[i - 1][j]);
            }
        }
    }
        for (int k = 1; k <= n; k++) {
        std::cout << *std::min_element(dp[2 * k].begin(), dp[2 * k].end()) << " \n"[k == n];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}