#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        for (int i = 0; i < n; i++) {
        a[i] = adj[i].size() - a[i];
    }
        std::vector<int> q;
    for (int i = 0; i < n; i++) {
        if (a[i] == 0) {
            q.push_back(i);
        }
    }
        for (int i = 0; i < n; i++) {
        int x = q[i];
        for (auto y : adj[x]) {
            if (a[y] > 0 && --a[y] == 0) {
                q.push_back(y);
            }
        }
    }
        std::vector<int> pos(n);
    for (int i = 0; i < n; i++) {
        pos[q[i]] = i;
    }
        for (int i = 0; i < n; i++) {
        std::vector<int> nadj;
        for (auto y : adj[i]) {
            if (pos[y] > pos[i]) {
                nadj.push_back(y);
            }
        }
        std::swap(nadj, adj[i]);
    }
        i64 ans = 1LL * n * (n + 1) / 2;
    std::vector<std::bitset<8192>> f(n);
    for (int i = 0; i < n; i += 8192) {
        f.assign(n, {});
        for (auto x : q) {
            if (i <= x && x < i + 8192) {
                f[x][x - i] = 1;
            }
            for (auto y : adj[x]) {
                f[y] |= f[x];
            }
        }
        for (int i = 0; i < n; i++) {
            ans -= f[i].count();
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}