#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, l;
    std::cin >> n >> l;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i] >> b[i];
    }
        int ans = 0;
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return b[i] < b[j];
        });
        std::vector<i64> dp(n + 1, inf);
    for (auto i : p) {
        for (int j = n - 1; j >= 1; j--) {
            dp[j + 1] = std::min(dp[j + 1], dp[j] + a[i]);
            if (dp[j] + a[i] + b[i] <= l) {
                ans = std::max(ans, j + 1);
            }
        }
        dp[1] = std::min(dp[1], 1LL * a[i] - b[i]);
        if (a[i] <= l) {
            ans = std::max(ans, 1);
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}