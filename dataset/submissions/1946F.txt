#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n_ = 0) {
        init(n_);
    }
        void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
        void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
        T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};
 void solve() {
    int n, q;
    std::cin >> n >> q;
        std::vector<int> a(n), inva(n + 1);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        inva[a[i]] = i;
    }
        std::vector<i64> dp(n + 1, 1);
    Fenwick<i64> fen(n);
    for (int i = 0; i < n; i++) {
        for (int y = a[i]; y <= n; y += a[i]) {
            if (inva[y] > i) {
                dp[y] += dp[a[i]];
            }
        }
        fen.add(i, dp[a[i]]);
    }
        std::vector<i64> ans(q);
    std::vector<std::tuple<i64, i64, int>> qry(q);
    for (int i = 0; i < q; i++) {
        int l, r;
        std::cin >> l >> r;
        l--;
        qry[i] = {l, r, i};
    }
        std::sort(qry.begin(), qry.end());
        int p = 0;
    for (auto [l, r, i] : qry) {
        while (p < l) {
            for (int y = n / a[p] * a[p]; y >= a[p]; y -= a[p]) {
                int py = inva[y];
                fen.add(py, -dp[y]);
                if (py >= p) {
                    for (int z = y; z <= n; z += y) {
                        int pz = inva[z];
                        if (pz > py) {
                            dp[z] -= dp[y];
                        }
                    }
                }
            }
            for (int y = 2 * a[p]; y <= n; y += a[p]) {
                int py = inva[y];
                if (py >= p) {
                    for (int z = y; z <= n; z += y) {
                        int pz = inva[z];
                        if (pz > py) {
                            dp[z] += dp[y];
                        }
                    }
                }
                fen.add(py, dp[y]);
            }
            p++;
        }
        ans[i] = fen.sum(r);
    }
        for (int i = 0; i < q; i++) {
        std::cout << ans[i] << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}