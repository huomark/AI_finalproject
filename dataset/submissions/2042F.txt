#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F &&pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F &&pred) {
        if (l >= y || r <= x) {
            return -1;
        }
        if (l >= x && r <= y && !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F &&pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr i64 inf = 1E18;
 struct Info {
    i64 ans2 = -inf;
    i64 ans1 = -inf;
    i64 l1 = -inf;
    i64 l2 = -inf;
    i64 r1 = -inf;
    i64 r2 = -inf;
    i64 sum = 0;
    i64 mid = -inf;
        Info() {}
    Info(i64 a, i64 b) {
        ans1 = a + 2 * b;
        l1 = a + b;
        r1 = a + b;
        sum = a;
    }
};
 Info operator+(const Info &a, const Info &b) {
    Info c;
    c.ans2 = std::max({b.ans2, a.l1 + b.r2, a.ans1 + b.ans1, a.l2 + b.r1, a.ans2});
    c.ans1 = std::max({b.ans1, a.l1 + b.r1, a.ans1});
    c.l1 = std::max({b.l1, a.l1 + b.sum});
    c.l2 = std::max({b.l2, a.l1 + b.mid, a.ans1 + b.l1, a.l2 + b.sum});
    c.r1 = std::max({b.r1 + a.sum, a.r1});
    c.r2 = std::max({b.r2 + a.sum, b.ans1 + a.r1, b.r1 + a.mid, a.r2});
    c.sum = a.sum + b.sum;
    c.mid = std::max({b.mid + a.sum, a.r1 + b.l1, a.mid + b.sum});
    return c;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        std::vector<Info> init(n);
    for (int i = 0; i < n; i++) {
        init[i] = Info(a[i], b[i]);
    }
    SegmentTree<Info> seg(init);
        int q;
    std::cin >> q;
    for (int i = 0; i < q; i++) {
        int o;
        std::cin >> o;
                if (o == 1) {
            int p, x;
            std::cin >> p >> x;
            p--;
            a[p] = x;
            seg.modify(p, Info(a[p], b[p]));
        } else if (o == 2) {
            int p, x;
            std::cin >> p >> x;
            p--;
            b[p] = x;
            seg.modify(p, Info(a[p], b[p]));
        } else {
            int l, r;
            std::cin >> l >> r;
            l--;
            std::cout << seg.rangeQuery(l, r).ans2 << "\n";
        }
    }
        return 0;
}