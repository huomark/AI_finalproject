#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<i64> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int x = std::min_element(a.begin(), a.end()) - a.begin();
        std::vector<std::tuple<i64, int, int>> edges;
    for (int i = 0; i < n; i++) {
        if (i != x) {
            edges.emplace_back(a[i] + a[x], i, x);
        }
    }
    for (int i = 0; i < m; i++) {
        int x, y;
        i64 w;
        std::cin >> x >> y >> w;
        x--;
        y--;
        edges.emplace_back(w, x, y);
    }
    std::sort(edges.begin(), edges.end());
        DSU dsu(n);
    i64 ans = 0;
    for (auto [w, x, y] : edges) {
        if (dsu.merge(x, y)) {
            ans += w;
        }
    }
    std::cout << ans << "\n";
        return 0;
}