#include <bits/stdc++.h>
 using i64 = long long;
struct SCC {
    int n;
    std::vector<std::vector<int>> adj;
    std::vector<int> stk;
    std::vector<int> dfn, low, bel;
    int cur, cnt;
        SCC() {}
    SCC(int n) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        adj.assign(n, {});
        dfn.assign(n, -1);
        low.resize(n);
        bel.assign(n, -1);
        stk.clear();
        cur = cnt = 0;
    }
        void addEdge(int u, int v) {
        adj[u].push_back(v);
    }
        void dfs(int x) {
        dfn[x] = low[x] = cur++;
        stk.push_back(x);
                for (auto y : adj[x]) {
            if (dfn[y] == -1) {
                dfs(y);
                low[x] = std::min(low[x], low[y]);
            } else if (bel[y] == -1) {
                low[x] = std::min(low[x], dfn[y]);
            }
        }
                if (dfn[x] == low[x]) {
            int y;
            do {
                y = stk.back();
                bel[y] = cnt;
                stk.pop_back();
            } while (y != x);
            cnt++;
        }
    }
        std::vector<int> work() {
        for (int i = 0; i < n; i++) {
            if (dfn[i] == -1) {
                dfs(i);
            }
        }
        return bel;
    }
};
 void solve() {
    int n;
    std::cin >> n;
        SCC g(n);
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (a[i] % a[j] == 0) {
                g.addEdge(i, j);
            }
        }
    }
        auto bel = g.work();
    if (bel == std::vector(n, 0)) {
        std::cout << -1 << "\n";
        return;
    }
        std::vector<int> b, c;
    for (int i = 0; i < n; i++) {
        if (bel[i] == 0) {
            b.push_back(i);
        } else {
            c.push_back(i);
        }
    }
    std::cout << b.size() << " " << c.size() << "\n";
    for (auto i : b) {
        std::cout << a[i] << " \n"[i == b.back()];
    }
    for (auto i : c) {
        std::cout << a[i] << " \n"[i == c.back()];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}