#include <bits/stdc++.h>
 using i64 = long long;
 template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n_ = 0) {
        init(n_);
    }
        void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
        void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
        T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n), inva(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
        inva[a[i]] = i;
    }
        int q;
    std::cin >> q;
        std::vector<int> ans(q);
    std::vector<std::vector<std::pair<int, int>>> qry(n);
    for (int i = 0; i < q; i++) {
        int l, r;
        std::cin >> l >> r;
        l--, r--;
        qry[l].emplace_back(r, i);
    }
        std::vector<int> L(n), R(n), RR(n);
    std::set<int> s{-1, n};
    for (int i = n - 1; i >= 0; i--) {
        int x = inva[i];
        int l = *std::prev(s.lower_bound(x));
        int r = *s.lower_bound(x);
        s.insert(x);
        L[x] = l, R[x] = r;
    }
    s = {-1, n};
    for (int i = 0; i < n; i++) {
        int x = inva[i];
        if (R[x] < n) {
            RR[x] = *s.lower_bound(R[x]);
        }
        s.insert(x);
    }
    std::vector<std::vector<std::pair<int, int>>> add(n);
    for (int i = 0; i < n; i++) {
        if (R[i] < n) {
            add[L[i] + 1].emplace_back(R[i], 1);
            add[L[i] + 1].emplace_back(RR[i], -1);
            add[i + 1].emplace_back(R[i], -1);
            add[i + 1].emplace_back(RR[i], 1);
        }
    }
    Fenwick<int> fen(n);
    for (int i = 0; i < n; i++) {
        for (auto [x, y] : add[i]) {
            fen.add(x, y);
        }
        for (auto [r, j] : qry[i]) {
            if (fen.sum(r + 1) > 0) {
                ans[j] = 1;
            }
        }
    }
        for (int i = 0; i < q; i++) {
        std::cout << (ans[i] ? "Yes" : "No") << "\n";
    }
        return 0;
}