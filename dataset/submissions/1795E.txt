#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> h(n);
    for (int i = 0; i < n; i++) {
        std::cin >> h[i];
    }
        i64 ans = 1E18;
        auto work = [&](auto h) {
        std::vector<i64> s(n + 1);
        for (int i = 0; i < n; i++) {
            s[i + 1] = s[i] + h[i];
        }
        for (int i = 0; i < n; i++) {
            h[i] -= i;
        }
        std::vector<i64> s1(n + 1);
        for (int i = 0; i < n; i++) {
            s1[i + 1] = s1[i] + h[i];
        }
        std::vector<i64> ans(n);
        std::deque<int> q;
        int p = 0;
        i64 sum = 0;
        for (int i = 0; i < n; i++) {
            while (!q.empty() && h[i] < h[q.back()]) {
                int x = q.back();
                q.pop_back();
                if (q.empty()) {
                    sum -= 1LL * h[x] * (x - p + 1);
                } else {
                    sum -= 1LL * h[x] * (x - q.back());
                }
            }
            if (q.empty()) {
                sum += 1LL * h[i] * (i - p + 1);
            } else {
                sum += 1LL * h[i] * (i - q.back());
            }
            q.push_back(i);
                        while (h[q[0]] + p < 0) {
                p++;
                sum -= h[q[0]];
                if (q[0] < p) {
                    q.pop_front();
                }
            }
                        ans[i] = (s1[i + 1] - s1[p]) - sum + s[p];
        }
        return ans;
    };
        auto ans1 = work(h);
    std::reverse(h.begin(), h.end());
    auto ans2 = work(h);
    std::reverse(ans2.begin(), ans2.end());
    std::reverse(h.begin(), h.end());
    for (int i = 0; i < n; i++) {
        ans = std::min(ans, ans1[i] + ans2[i] + h[i]);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}