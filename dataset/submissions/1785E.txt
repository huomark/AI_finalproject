#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int P = 998244353;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x)) {}
    Z(i64 x) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend std::istream &operator>>(std::istream &is, Z &a) {
        i64 v;
        is >> v;
        a = Z(v);
        return is;
    }
    friend std::ostream &operator<<(std::ostream &os, const Z &a) {
        return os << a.val();
    }
};
 const int T[4][2] {
    {1, 2},
    {0, 3},
    {3, 0},
    {0, 0}
};
 const int D[4][2] {
    {0, 0},
    {1, 0},
    {0, -1},
    {1, -1}
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::string s;
    std::cin >> s;
        int n = s.size();
        int cnt = 0;
    std::array<Z, 3> ans{};
    for (int mask = 0; mask < 256; mask++) {
        std::array<int, 4> to{};
        for (int i = 0; i < 4; i++) {
            to[i] = mask >> (2 * i) & 3;
        }
                std::array<bool, 4> on{}, cyc{};
        int x;
        for (x = 0; !on[x]; x = to[x]) {
            on[x] = true;
        }
        int len = 0;
        for (; !cyc[x]; x = to[x]) {
            cyc[x] = true;
            len++;
        }
                bool ok = true;
        for (int i = 0; i < 4; i++) {
            if (!on[i] && to[i] != 0) {
                ok = false;
            }
        }
                if (!ok) {
            continue;
        }
                const int L = (n + 1) / 2 * len;
                int start = 0;
        for (int i = 0; i < 4; i++) {
            if (on[i]) {
                start |= i << (2 * i);
            }
        }
        std::vector dp(1 << 8, std::vector<Z>(2 * L + 1));
        dp[start][L] = 1;
                std::vector<std::array<int, 2>> trans(256), delta(256);
        for (int m = 0; m < 256; m++) {
            for (int x = 0; x < 2; x++) {
                int nxt = 0;
                for (int i = 0; i < 4; i++) {
                    int to = m >> (2 * i) & 3;
                    if (cyc[i]) {
                        delta[m][x] += D[to][x];
                    }
                    to = T[to][x];
                    if (!on[i]) {
                        to = 0;
                    }
                    nxt |= to << (2 * i);
                }
                trans[m][x] = nxt;
            }
        }
                for (int i = 0; i < n; i++) {
            std::vector g(1 << 8, std::vector<Z>(2 * L + 1));
            for (int m = 0; m < 256; m++) {
                for (int j = 0; j <= 2 * L; j++) {
                    if (dp[m][j].val() == 0) continue;
                                        for (int x = 0; x < 2; x++) {
                        if (s[i] == 'a' + x || s[i] == '?') {
                            g[trans[m][x]][j + delta[m][x]] += dp[m][j];
                        }
                    }
                }
            }
            std::swap(dp, g);
        }
                for (int i = 0; i <= 2 * L; i++) {
            if (i > L) {
                ans[0] += dp[mask][i];
            } else if (i == L) {
                ans[1] += dp[mask][i];
            } else {
                ans[2] += dp[mask][i];
            }
        }
                // if (mask == 0) {
        //     std::cerr << "trans : " << trans[start][0] << "\n";
        //     std::cerr << "trans : " << trans[1][0] << "\n";
        //     std::cerr << "trans : " << trans[0][0] << "\n";
        //     std::cerr << "trans : " << trans[1][1] << "\n";
        //     std::cerr << "trans : " << trans[3][1] << "\n";
        //     std::cerr << "dp : " << dp[mask][L] << "\n";
        // }
    }
        // std::cout << cnt << "\n";
    for (int i = 0; i < 3; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}