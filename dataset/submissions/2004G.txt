#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 using Matrix = std::array<std::array<int, 10>, 10>;
 constexpr int inf = 1E9;
 Matrix identity;
Matrix zero;
 void chmin(int &a, int b) {
    if (a > b) {
        a = b;
    }
}
 Matrix appendr(const Matrix &a, int x) {
    Matrix b = zero;
    for (int i = 0; i < 10; i++) {
        for (int c = 1; c < 10; c++) {
            chmin(b[i][c], a[i][c] + c);
            chmin(b[i][0], a[i][c] + c);
        }
        chmin(b[i][x], a[i][0]);
    }
    return b;
}
Matrix appendl(const Matrix &a, int x) {
    Matrix b = zero;
    for (int c = 1; c < 10; c++) {
        for (int i = 0; i < 10; i++) {
            chmin(b[c][i], c + a[c][i]);
            chmin(b[c][i], c + a[0][i]);
        }
    }
    for (int i = 0; i < 10; i++) {
        chmin(b[0][i], a[x][i]);
    }
    return b;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            identity[i][j] = i == j ? 0 : inf;
            zero[i][j] = inf;
        }
    }
        int n, k;
    std::cin >> n >> k;
        std::string s;
    std::cin >> s;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = s[i] - '0';
    }
        std::vector<Matrix> f(n);
    for (int l = 0, m = 0, r = 0; l <= n - k; l++) {
        while (r < l + k) {
            f[r] = appendr(r == m ? identity : f[r - 1], a[r]);
            r++;
        }
        if (l == m) {
            for (int i = r - 1; i >= l; i--) {
                f[i] = appendl(i == r - 1 ? identity : f[i + 1], a[i]);
            }
            m = r;
        }
        Matrix a = (l == m ? identity : f[l]);
        Matrix b = (m == r ? identity : f[r - 1]);
        int ans = inf;
        for (int i = 0; i < 10; i++) {
            chmin(ans, a[0][i] + b[i][0]);
        }
        std::cout << ans << " \n"[l == n - k];
    }
        return 0;
}