#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> c(n);
    for (int i = 0; i < n; i++) {
        std::cin >> c[i];
    }
    std::vector<bool> have(n);
    for (int i = 0; i < k; i++) {
        int x;
        std::cin >> x;
        x--;
        have[x] = true;
    }
        std::vector<bool> vis(n);
    std::vector<std::vector<int>> ing(n);
    for (int i = 0; i < n; i++) {
        int m;
        std::cin >> m;
                while (m--) {
            int x;
            std::cin >> x;
            x--;
            ing[i].push_back(x);
        }
    }
        auto rec = [&](auto self, int x) -> int {
        if (vis[x]) {
            return c[x];
        }
        if (have[x]) {
            c[x] = 0;
        }
        if (!ing[x].empty()) {
            i64 res = 0;
            for (auto y : ing[x]) {
                res += self(self, y);
            }
            c[x] = std::min(1LL * c[x], res);
        }
        vis[x] = true;
        return c[x];
    };
    for (int i = 0; i < n; i++) {
        std::cout << rec(rec, i) << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}