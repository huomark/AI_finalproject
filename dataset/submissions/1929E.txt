#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> s(n);
        int k;
    std::cin >> k;
    for (int i = 0; i < k; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        s[u] ^= 1 << i;
        s[v] ^= 1 << i;
    }
        std::vector<std::vector<int>> choices(k);
    auto dfs = [&](auto self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
            s[x] ^= s[y];
        }
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            for (int i = 0; i < k; i++) {
                if (~s[x] & s[y] & (1 << i)) {
                    choices[i].push_back(s[y]);
                }
            }
        }
    };
    dfs(dfs, 0, -1);
        std::vector<int> dp(1 << k, n);
    dp[0] = 0;
    for (int mask = 1; mask < (1 << k); mask++) {
        for (int u = 0; u < k; u++) {
            for (auto s : choices[u]) {
                dp[mask] = std::min(dp[mask], dp[mask & ~s] + 1);
            }
        }
    }
        int ans = dp[(1 << k) - 1];
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}