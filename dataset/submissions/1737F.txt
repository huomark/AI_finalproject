#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 void solve() {
    int m;
    std::cin >> m;
        std::vector<std::array<int, 2>> b(m);
    for (int i = 0; i < m; i++) {
        std::cin >> b[i][0];
        b[i][1] = i;
    }
        std::sort(b.begin(), b.end(), std::greater());
        std::vector<std::vector<int>> ans;
        if (b[0][0] == 1) {
        ans.push_back(std::vector(m, 0));
        for (auto [b, j] : b) {
            for (int i = ans.size() - 1; i >= 0; i--) {
                ans.push_back(ans[i]);
            }
            for (int i = 2; i < ans.size(); i += 2) {
                ans[i][j] = 1;
            }
            ans.back()[j] = 1;
        }
        ans.erase(ans.begin());
    } else if (b[0][0] == 2 && (m == 1 || b[1][0] == 1)) {
        ans.resize(3, std::vector(m, 0));
        int j = b[0][1];
        ans[1][j] = 2;
        ans[2][j] = 1;
        for (auto [b, j] : b) {
            if (b > 1) {
                continue;
            }
            for (int i = ans.size() - 1; i >= 0; i--) {
                ans.push_back(ans[i]);
            }
            for (int i = 2; i < ans.size(); i += 2) {
                ans[i][j] = 1;
            }
            ans.back()[j] = 1;
        }
        ans.erase(ans.begin());
    } else if (b[0][0] == 2 && (m == 2 || b[2][0] == 1)) {
        ans.resize(9, std::vector(m, 0));
        int j0 = b[0][1];
        int j1 = b[1][1];
        ans[1][j0] = 2;
        ans[1][j1] = 2;
        ans[2][j1] = 1;
        ans[3][j0] = 2;
        ans[3][j1] = 1;
        ans[4][j1] = 2;
        ans[5][j0] = 1;
        ans[5][j1] = 1;
        ans[6][j0] = 2;
        ans[7][j0] = 1;
        ans[7][j1] = 2;
        ans[8][j0] = 1;
        for (auto [b, j] : b) {
            if (b > 1) {
                continue;
            }
            for (int i = ans.size() - 1; i >= 0; i--) {
                ans.push_back(ans[i]);
            }
            for (int i = 2; i < ans.size(); i += 2) {
                ans[i][j] = 1;
            }
            ans.back()[j] = 1;
        }
        ans.erase(ans.begin());
    } else if (b[0][0] == 3 && (m == 1 || b[1][0] == 1)) {
        ans.resize(4, std::vector(m, 0));
        int j = b[0][1];
        ans[1][j] = 3;
        ans[2][j] = 1;
        ans[3][j] = 2;
        for (auto [b, j] : b) {
            if (b > 1) {
                continue;
            }
            int n = ans.size();
            for (int i = 0; i < n; i++) {
                ans.push_back(ans[i]);
            }
            for (int i = 1; i < n; i += 2) {
                ans[i][j] = 1;
            }
            for (int i = n; i < 2 * n; i += 2) {
                ans[i][j] = 1;
            }
            std::swap(ans[n / 2], ans[n]);
        }
        ans.erase(ans.begin());
    } else {
        std::cout << -1 << "\n";
        return;
    }
        for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j < m; j++) {
            std::cout << ans[i][j] << " \n"[j == m - 1];
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}