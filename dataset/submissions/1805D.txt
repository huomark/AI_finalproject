#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> d(n, -1);
    auto bfs = [&](int x) {
        std::queue<int> q;
        d.assign(n, -1);
        q.push(x);
        d[x] = 0;
                while (!q.empty()) {
            int x = q.front();
            q.pop();
                        for (auto y : adj[x]) {
                if (d[y] == -1) {
                    d[y] = d[x] + 1;
                    q.push(y);
                }
            }
        }
                return std::max_element(d.begin(), d.end()) - d.begin();
    };
        int x = bfs(0);
    int y = bfs(x);
    auto dx = d;
    bfs(y);
    auto dy = d;
        std::vector<int> ans(n + 1);
    for (int i = 0; i < n; i++) {
        ans[std::max(dx[i], dy[i]) + 1] += 1;
    }
    ans[0] += 1;
    ans[dx[y] + 1] -= 1;
    for (int i = 1; i <= n; i++) {
        ans[i] += ans[i - 1];
    }
    for (int i = 1; i <= n; i++) {
        std::cout << ans[i] << " \n"[i == n];
    }
        return 0;
}