#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        i64 area = 0;
    std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i] >> b[i];
        area += 1LL * a[i] * b[i];
    }
        int h = *std::max_element(a.begin(), a.end());
    int w = *std::max_element(b.begin(), b.end());
        std::vector<std::pair<i64, i64>> ans;
    for (auto [H, W] : {std::pair(1LL * h, area / h), {area / w, 1LL * w}}) {
        if (H * W != area) {
            continue;
        }
        std::priority_queue<std::pair<int, int>> qh, qw;
        std::vector<bool> vis(n);
        for (int i = 0; i < n; i++) {
            qh.emplace(a[i], i);
            qw.emplace(b[i], i);
        }
                i64 h = H, w = W;
        while (h * w > 0) {
            while (vis[qh.top().second]) {
                qh.pop();
            }
            while (vis[qw.top().second]) {
                qw.pop();
            }
            int i = -1;
            if (qh.top().first == h) {
                i = qh.top().second;
            }
            if (qw.top().first == w) {
                i = qw.top().second;
            }
            if (i == -1) {
                break;
            }
            vis[i] = true;
            if (a[i] == h) {
                w -= b[i];
            } else {
                h -= a[i];
            }
        }
        if (h * w == 0) {
            ans.emplace_back(H, W);
        }
    }
    std::sort(ans.begin(), ans.end());
    ans.erase(std::unique(ans.begin(), ans.end()), ans.end());
    std::cout << ans.size() << "\n";
    for (auto [h, w] : ans) {
        std::cout << h << " " << w << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}