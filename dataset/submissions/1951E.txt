#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    std::string s;
    std::cin >> s;
        int n = s.size();
        std::vector<std::string> ans;
        std::vector<int> nxt(n);
    for (int i = n - 1; i >= 0; i--) {
        nxt[i] = i + 1 < n && s[i] == s[i + 1] ? nxt[i + 1] : i + 1;
    }
    int k = std::max(0, n - 2);
    while (k > 0 && s[k - 1] == s[k + 1]) {
        k--;
    }
        auto check = [&](int i) {
        if (nxt[i] == n) {
            return 1;
        }
        int j = nxt[i];
        if (j - i == n - 1 - j && s[j + 1] == s[i] && nxt[j + 1] == n) {
            return 2;
        }
        if ((n - i) % 2 == 1 && i >= k) {
            return 3;
        }
        return 0;
    };
        if (check(0)) {
        std::cout << "NO\n";
        return;
    }
        int i = 0;
    while (i < n) {
        if (s[i] != s[n - 1]) {
            ans.push_back(s.substr(i));
            break;
        }
        int j = i;
        while (j < n && s[i] == s[j]) {
            j++;
        }
        j++;
        int t = check(j);
        if (!t) {
            ans.push_back(s.substr(i, j - i));
            i = j;
            continue;
        }
        if (t == 1) {
            assert(j - i != n - j + 1);
            ans.push_back(s.substr(i));
            break;
        }
        if (t == 2) {
            int m = (j + n - 1) / 2;
            if (s[j - 1] != s[m] || n - 1 - m != j - 1 - i) {
                ans.push_back(s.substr(i));
                break;
            }
            for (int x = j; x <= m; x++) {
                if (x - j != j - 1 - i && n - 1 - m != m - x) {
                    ans.push_back(s.substr(i, x - i));
                    ans.push_back(s.substr(x));
                    break;
                }
            }
            break;
        }
        ans.push_back(s.substr(i));
        break;
    }
        std::cout << "YES\n";
    std::cout << ans.size() << "\n";
    for (auto x : ans) {
        std::cout << x << " ";
    }
    std::cout << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}