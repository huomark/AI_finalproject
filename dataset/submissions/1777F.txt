#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 200000 * 32;
 int cnt = 1;
 int trie[N][2];
 int newNode() {
    int x = ++cnt;
    trie[x][0] = trie[x][1] = 0;
    return x;
}
 void add(int x) {
    int p = 1;
    for (int i = 29; i >= 0; i--) {
        int d = x >> i & 1;
        if (!trie[p][d]) trie[p][d] = newNode();
        p = trie[p][d];
    }
}
 int query(int x) {
    int ans = (1 << 30) - 1;
    int p = 1;
    for (int i = 29; i >= 0; i--) {
        int d = ~x >> i & 1;
        if (!trie[p][d]) {
            d ^= 1;
            ans ^= 1 << i;
        }
        if (!trie[p][d]) return 0;
        p = trie[p][d];
    }
    return ans;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), s(n + 1);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        s[i + 1] = s[i] ^ a[i];
    }
        int ans = 0;
        auto dc = [&](auto self, int l, int r) {
        if (r - l == 1) return;
                int m = (l + r) / 2;
                cnt = 0;
        newNode();
        int mx = 0;
                for (int i = m - 1, j = m; i >= l; i--) {
            mx = std::max(mx, a[i]);
            while (j < r && a[j] <= mx) {
                add(s[++j]);
            }
            ans = std::max(ans, query(s[i] ^ mx));
        }
                cnt = 0;
        newNode();
        mx = 0;
        for (int i = m, j = m; i < r; i++) {
            mx = std::max(mx, a[i]);
            while (j > l && a[j - 1] <= mx) {
                add(s[--j]);
            }
            ans = std::max(ans, query(s[i + 1] ^ mx));
        }
                self(self, l, m);
        self(self, m, r);
    };
    dc(dc, 0, n);
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}