#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int dx[] = {0, 0, -1, 1};
constexpr int dy[] = {-1, 1, 0, 0};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int N, M;
    std::cin >> N >> M;
        std::vector<std::string> s(N);
    for (int i = 0; i < N; i++) {
        std::cin >> s[i];
    }
        int ans = 1E9;
    for (int x = 0; x < N; x++) {
        for (int y = 0; y < M; y++) {
            int res = 0;
            std::deque<std::tuple<int, int, int>> q;
            q.emplace_back(x, y, 0);
                        std::vector dis(N, std::vector(M, -1));
            while (!q.empty()) {
                auto [x, y, d] = q.front();
                q.pop_front();
                if (dis[x][y] != -1) {
                    continue;
                }
                dis[x][y] = d;
                res = std::max(res, d + (s[x][y] == 'B'));
                for (int k = 0; k < 4; k++) {
                    int nx = dx[k] + x;
                    int ny = dy[k] + y;
                    if (0 <= nx && nx < N && 0 <= ny && ny < M) {
                        if (s[x][y] == s[nx][ny]) {
                            q.emplace_front(nx, ny, d);
                        } else {
                            q.emplace_back(nx, ny, d + 1);
                        }
                    }
                }
            }
            ans = std::min(ans, res);
        }
    }
    std::cout << ans << "\n";
        return 0;
}