#include <bits/stdc++.h>
 using i64 = long long;
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedParent(int u, int v) {
        std::swap(u, v);
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedParent(u, v)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
// std::mt19937 rng;
void solve() {
    int n, m;
    std::cin >> n >> m;
    // n = rng() % 10 + 1;
    // m = rng() % 10 + 1;
    // std::cerr << n << " " << m << "\n";
        HLD t(n);
    std::vector<int> deg(n);
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        std::cin >> u >> v;
        // v = i + 2;
        // u = rng() % (v - 1) + 1;
        // std::cerr << u << " " << v << "\n";
        u--, v--;
        deg[u]++;
        deg[v]++;
        t.addEdge(u, v);
    }
    t.work();
        std::vector<std::vector<int>> route(n);
    for (int i = 0; i < m; i++) {
        int x, y;
        std::cin >> x >> y;
        // x = rng() % n + 1;
        // y = rng() % n + 1;
        // std::cerr << x << " " << y << "\n";
        x--, y--;
        route[x].push_back(y);
        route[y].push_back(x);
    }
        std::vector<int> d(n);
    auto cmp = [&](int i, int j) {
        return t.in[i] < t.in[j];
    };
        std::vector<std::vector<int>> l(n);
        for (int i = 0; i < n; i++) {
        if (deg[i] == 1) {
            auto a = route[i];
            a.push_back(i);
            std::sort(a.begin(), a.end(), cmp);
            int m = std::unique(a.begin(), a.end()) - a.begin();
            a.resize(m);
            l[i].resize(m);
            route[i] = a;
            for (int j = 1; j < m; j++) {
                l[i][j] = t.lca(a[j], a[j - 1]);
            }
            // std::cerr << "x : " << i + 1 << "\n";
            // for (auto y : a) {
            //     std::cerr << y + 1 << " \n"[y == a.back()];
            // }
            l[i][0] = t.parent[t.lca(a[0], a.back())];
        }
    }
        auto check = [&](int k) {
        int cnt = 0;
        d.assign(n, 0);
        for (int i = 0; i < k; i++) {
            if (deg[i] == 1) {
                cnt++;
                for (auto x : route[i]) {
                    d[x]++;
                }
                for (auto x : l[i]) {
                    if (x != -1) {
                        d[x]--;
                    }
                }
            }
        }
        for (int i = n - 1; i; i--) {
            int x = t.seq[i];
            d[t.parent[x]] += d[x];
        }
        return std::find(d.begin(), d.end(), cnt) != d.end();
    };
        if (check(n)) {
        std::cout << "YES\n";
        return;
    }
    std::cout << "NO\n";
        int lo = 0, hi = n - 1;
    while (lo < hi) {
        int x = (lo + hi + 1) / 2;
        if (check(x)) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
    int y = lo;
    d.assign(n, 0);
    for (auto x : route[y]) {
        d[x]++;
    }
    for (auto x : l[y]) {
        if (x != -1) {
            d[x]--;
        }
    }
    for (int i = n - 1; i; i--) {
        int x = t.seq[i];
        d[t.parent[x]] += d[x];
    }
    for (int i = 1; i < n; i++) {
        int x = t.seq[i];
        d[x] += d[t.parent[x]];
    }
    for (int i = 0; i < y; i++) {
        if (deg[i] == 1) {
            int res = 0;
            for (auto x : route[i]) {
                res += d[x];
            }
            for (auto x : l[i]) {
                if (x != -1) {
                    res -= d[x];
                }
            }
            if (!res) {
                std::cout << i + 1 << " " << y + 1 << "\n";
                return;
            }
        }
    }
    assert(false);
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}