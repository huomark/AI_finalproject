#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> p(n), dep(n), deg(n);
    p[0] = -1;
    for (int i = 1; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
        dep[i] = dep[p[i]] + 1;
        deg[p[i]]++;
    }
        int k;
    std::vector<int> col(n);
    if (*std::max_element(dep.begin(), dep.end()) == 1) {
        k = 1;
    } else {
        std::vector<std::vector<int>> adj(n);
        for (int i = 1; i < n; i++) {
            adj[p[i]].push_back(i);
        }
        bool ok = true;
        for (int i = 1; i < n; i++) {
            if (p[i] == 0) {
                int cnt[2] {};
                auto dfs = [&](auto self, int x) -> void {
                    if (deg[x] == 1) {
                        cnt[dep[x] % 2]++;
                    }
                    for (auto y : adj[x]) {
                        col[y] = col[x] ^ 1;
                        self(self, y);
                    }
                };
                dfs(dfs, i);
                if (cnt[0] && cnt[1]) {
                    ok = false;
                    break;
                } else {
                    col[i] = cnt[0] ? 1 : 0;
                    dfs(dfs, i);
                }
            }
        }
                if (!ok) {
            k = 3;
            for (int i = 1; i < n; i++) {
                col[i] = dep[i] % k;
            }
        } else {
            k = 2;
        }
    }
    std::cout << k << "\n";
    for (int i = 1; i < n; i++) {
        std::cout << col[i] + 1 << " \n"[i == n - 1];
    }
    std::cout.flush();
        while (true) {
        int x;
        std::cin >> x;
                if (x == 1) {
            break;
        }
                std::vector<int> a(k);
        std::vector<int> u;
        for (int i = 0; i < k; i++) {
            std::cin >> a[i];
            if (a[i] == 1) {
                u.push_back(i);
            }
        }
                if (u.size() > 1) {
            if (k == 2) {
                u[0] = 0;
            } else {
                if ((u[0] + 1) % 3 != u[1]) {
                    std::swap(u[0], u[1]);
                }
            }
        }
        std::cout << u[0] + 1 << std::endl;
    }
        return 0;
}