#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int N, W;
    std::cin >> N >> W;
        std::vector<int> n(N);
    for (int i = 0; i < N; i++) {
        std::cin >> n[i];
    }
        if (N == 1) {
        if (W != n[0]) {
            std::cout << "No\n";
        } else {
            std::cout << "Yes\n";
            for (int i = 1; i <= 2 * n[0]; i++) {
                std::cout << 1 << " \n"[i == 2 * n[0]];
            }
        }
        return 0;
    }
        if (W <= 0) {
        std::cout << "No\n";
        return 0;
    }
        if (W == 1) {
        int x = std::find(n.begin(), n.end(), 1) - n.begin();
        if (x == N) {
            std::cout << "No\n";
        } else {
            std::cout << "Yes\n";
            std::cout << x + 1 << " ";
            for (int i = 0; i < N; i++) {
                if (i != x) {
                    while (n[i]) {
                        std::cout << i + 1 << " ";
                        std::cout << i + 1 << " ";
                        n[i] -= 1;
                    }
                }
            }
            std::cout << x + 1 << "\n";
        }
        return 0;
    }
        int sum = std::accumulate(n.begin(), n.end(), 0);
        if (W > sum) {
        std::cout << "No\n";
        return 0;
    }
        std::cout << "Yes\n";
        std::vector<int> ans;
    for (int i = 0; i < N; i++) {
        while (n[i] > 1 && W > 2) {
            n[i] -= 1;
            W -= 1;
            ans.push_back(i + 1);
            ans.push_back(i + 1);
        }
    }
    for (int i = 0; i < N; i++) {
        while (n[i] > 0 && W > 2) {
            n[i] -= 1;
            W -= 1;
            ans.push_back(i + 1);
            ans.push_back(i + 1);
        }
    }
        int x = 0;
    while (!n[x]) {
        x++;
    }
    int y = x + 1;
    while (!n[y]) {
        y++;
    }
        n[x] -= 1;
    n[y] -= 1;
    ans.push_back(x + 1);
    for (int i = 0; i < N; i++) {
        while (i != x && n[i]) {
            n[i] -= 1;
            ans.push_back(i + 1);
            ans.push_back(i + 1);
        }
    }
    ans.push_back(x + 1);
    ans.push_back(y + 1);
    while (n[x]) {
        n[x] -= 1;
        ans.push_back(x + 1);
        ans.push_back(x + 1);
    }
    ans.push_back(y + 1);
        for (int i = 0; i < ans.size(); i++) {
        std::cout << ans[i] << " \n"[i == ans.size() - 1];
    }
        return 0;
}