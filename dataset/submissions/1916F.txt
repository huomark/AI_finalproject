#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n1, n2, m;
    std::cin >> n1 >> n2 >> m;
    int n = n1 + n2;
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        int s = 0, t = n - 1;
    std::vector<int> pre(n), low(n), p(n);
    int cur = 1;
    pre[s] = 1;
    std::vector<int> preorder;
    auto dfs = [&](auto self, int x) -> void {
        pre[x] = ++cur;
        low[x] = x;
        for (auto y : adj[x]) {
            if (pre[y] == 0) {
                preorder.push_back(y);
                self(self, y);
                p[y] = x;
                if (pre[low[y]] < pre[low[x]]) {
                    low[x] = low[y];
                }
            } else if (pre[y] != 0 && pre[y] < pre[low[x]]) {
                low[x] = y;
            }
        }
    };
    dfs(dfs, t);
        std::vector<int> sign(n, -1);
        std::vector<int> l(n), r(n);
    r[s] = t;
    l[t] = s;
        for (auto v : preorder) {
        if (sign[low[v]] == -1) {
            l[v] = l[p[v]];
            r[l[v]] = v;
            l[p[v]] = v;
            r[v] = p[v];
            sign[p[v]] = 1;
        } else {
            r[v] = r[p[v]];
            l[r[v]] = v;
            r[p[v]] = v;
            l[v] = p[v];
            sign[p[v]] = -1;
        }
    }
        std::vector<int> a;
    for (int i = 0, x = s; i < n; x = r[x], i++) {
        a.push_back(x);
        std::cout << x + 1 << " \n"[i == n1 - 1 || i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}