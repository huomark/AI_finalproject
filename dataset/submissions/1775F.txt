#include <bits/stdc++.h>
 using i64 = long long;
 int P;
using i64 = long long;
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += P;
    }
    if (x >= P) {
        x -= P;
    }
    return x;
}
template<class T>
T power(T a, i64 b) {
    T res = 1;
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
struct Z {
    int x;
    Z(int x = 0) : x(norm(x)) {}
    Z(i64 x) : x(norm(x % P)) {}
    int val() const {
        return x;
    }
    Z operator-() const {
        return Z(norm(P - x));
    }
    Z inv() const {
        assert(x != 0);
        return power(*this, P - 2);
    }
    Z &operator*=(const Z &rhs) {
        x = i64(x) * rhs.x % P;
        return *this;
    }
    Z &operator+=(const Z &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
    Z &operator-=(const Z &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
    Z &operator/=(const Z &rhs) {
        return *this *= rhs.inv();
    }
    friend Z operator*(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res *= rhs;
        return res;
    }
    friend Z operator+(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res += rhs;
        return res;
    }
    friend Z operator-(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res -= rhs;
        return res;
    }
    friend Z operator/(const Z &lhs, const Z &rhs) {
        Z res = lhs;
        res /= rhs;
        return res;
    }
    friend std::istream &operator>>(std::istream &is, Z &a) {
        i64 v;
        is >> v;
        a = Z(v);
        return is;
    }
    friend std::ostream &operator<<(std::ostream &os, const Z &a) {
        return os << a.val();
    }
};
 void solve1() {
    int n;
    std::cin >> n;
        int a = 1, b = 1;
    while (1) {
        if (a * b >= n) break;
        a++;
        if (a * b >= n) break;
        b++;
    }
        std::cout << a << " " << b << "\n";
    for (int i = 0; i < a; i++) {
        for (int j = 0; j < b; j++) {
            std::cout << ".#"[i * b + j < n];
        }
        std::cout << "\n";
    }
}
 constexpr int N = 1000;
 Z f[N + 1];
 void solve2() {
    int n;
    std::cin >> n;
        int a = std::sqrt(n), b = a;
    while (1) {
        if (a * b >= n) break;
        a++;
        if (a * b >= n) break;
        b++;
    }
        Z ans = 0;
        while (a * b >= n) {
        ans += f[a * b - n] * (1 + (a != b));
        a++, b--;
    }
        std::cout << 2 * (a + b) << " " << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t, u;
    std::cin >> t >> u;
        if (u == 2) {
        std::cin >> P;
        f[0] = 1;
                for (int i = 1; i <= N; i++) {
            for (int t = 0; t < 4; t++) {
                for (int j = i; j <= N; j++) {
                    f[j] += f[j - i];
                }
            }
        }
    }
        while (t--) {
        if (u == 1) {
            solve1();
        } else {
            solve2();
        }
    }
        return 0;
}