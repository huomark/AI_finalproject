#include <bits/stdc++.h>
 using i64 = long long;
 i64 get(std::string s) {
    int n = s.size();
        i64 lo = 0, hi = 100000000LL;
    while (lo < hi) {
        i64 x = (lo + hi + 1) / 2;
                constexpr i64 inf = 1E18;
        constexpr i64 V = 1E8;
        std::array<i64, 2> dp{0LL, -inf};
        for (int i = 0; i < n; i++) {
            std::array<i64, 2> g{-inf, -inf};
            if (s[i] == 'L') {
                g[0] = dp[1] - x;
                g[1] = std::max(dp[1] - 2 * x + V, dp[0] - x + V);
            } else if (s[i] == 'R') {
                g[1] = dp[0] - x;
                g[0] = std::max(dp[0] - 2 * x + V, dp[1] - x + V);
            } else {
                g[0] = dp[1] - x;
                g[1] = dp[0] - x;
            }
            dp = g;
        }
                if (std::max(dp[0], dp[1] - x) >= 0) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
        return lo;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::string s;
    std::cin >> s;
        std::string ns;
    for (auto c : s) {
        if (!ns.empty() && c != 'X' && c == ns.back()) {
            ns += 'X';
        }
        ns += c;
    }
        i64 ans;
        if (s[0] == s.back() && s[0] != 'X') {
        ans = std::max(get('X' + ns), get(ns + 'X'));
    } else {
        ans = get(ns);
    }
        auto t = std::to_string(ans);
        while (t.size() < 7) {
        t = '0' + t;
    }
    t.insert(t.end() - 6, '.');
        std::cout << t << "\n";
        return 0;
}