#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k, c;
    std::cin >> n >> k >> c;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    auto bfs = [&](int s) {
        std::queue<int> q;
        std::vector d(n, -1);
        d[s] = 0;
        q.push(s);
                while (!q.empty()) {
            int x = q.front();
            q.pop();
                        for (auto y : adj[x]) {
                if (d[y] == -1) {
                    d[y] = d[x] + 1;
                    q.push(y);
                }
            }
        }
                return d;
    };
        auto d0 = bfs(0);
    int s = std::max_element(d0.begin(), d0.end()) - d0.begin();
    auto ds = bfs(s);
    int t = std::max_element(ds.begin(), ds.end()) - ds.begin();
    auto dt = bfs(t);
        i64 ans = 0;
    for (int i = 0; i < n; i++) {
        ans = std::max(ans, 1LL * k * std::max(ds[i], dt[i]) - 1LL * c * d0[i]);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}