#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return u64(a) * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 constexpr i64 safeMod(i64 x, i64 m) {
    x %= m;
    if (x < 0) {
        x += m;
    }
    return x;
}
 constexpr std::pair<i64, i64> invGcd(i64 a, i64 b) {
    a = safeMod(a, b);
    if (a == 0) {
        return {b, 0};
    }
        i64 s = b, t = a;
    i64 m0 = 0, m1 = 1;
     while (t) {
        i64 u = s / t;
        s -= t * u;
        m0 -= m1 * u;
                std::swap(s, t);
        std::swap(m0, m1);
    }
        if (m0 < 0) {
        m0 += b / s;
    }
        return {s, m0};
}
 template<std::unsigned_integral U, U P>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
    template<std::unsigned_integral T>
    constexpr ModIntBase(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr ModIntBase(T x_) {
        using S = std::make_signed_t<U>;
        S v = x_ % S(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static U mod() {
        return P;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, mod() - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<mod()>(x, rhs.val());
        return *this;
    }
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, ModIntBase &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 struct Barrett {
public:
    Barrett(u32 m_) : m(m_), im((u64)(-1) / m_ + 1) {}
     constexpr u32 mod() const {
        return m;
    }
     constexpr u32 mul(u32 a, u32 b) const {
        u64 z = a;
        z *= b;
                u64 x = u64((u128(z) * im) >> 64);
                u32 v = u32(z - x * m);
        if (m <= v) {
            v += m;
        }
        return v;
    }
 private:
    u32 m;
    u64 im;
};
 template<u32 Id>
struct DynModInt {
public:
    constexpr DynModInt() : x(0) {}
    template<std::unsigned_integral T>
    constexpr DynModInt(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr DynModInt(T x_) {
        int v = x_ % int(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static void setMod(u32 m) {
        bt = m;
    }
        static u32 mod() {
        return bt.mod();
    }
        constexpr u32 val() const {
        return x;
    }
        constexpr DynModInt operator-() const {
        DynModInt res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr DynModInt inv() const {
        auto v = invGcd(x, mod());
        assert(v.first == 1);
        return v.second;
    }
        constexpr DynModInt &operator*=(const DynModInt &rhs) & {
        x = bt.mul(x, rhs.val());
        return *this;
    }
    constexpr DynModInt &operator+=(const DynModInt &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr DynModInt &operator-=(const DynModInt &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr DynModInt &operator/=(const DynModInt &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr DynModInt operator*(DynModInt lhs, const DynModInt &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator+(DynModInt lhs, const DynModInt &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr DynModInt operator-(DynModInt lhs, const DynModInt &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator/(DynModInt lhs, const DynModInt &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, DynModInt &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const DynModInt &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    u32 x;
    static Barrett bt;
};
 template<u32 Id>
Barrett DynModInt<Id>::bt = 998244353;
 using Z = ModInt<998244353>;
 constexpr int N = 1E6;
 std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(N);
        int n, m;
    std::cin >> n >> m;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> h(n), p(n, -1);
    auto dfs1 = [&](this auto &&self, int x) -> void {
        for (auto y : adj[x]) {
            if (y == p[x]) {
                continue;
            }
            p[y] = x;
            self(y);
            h[x] = std::max(h[x], h[y] + 1);
        }
    };
    dfs1(0);
        std::vector<int> ho(n);
    auto dfs2 = [&](this auto &&self, int x) -> void {
        std::array<int, 2> f {};
        for (auto y : adj[x]) {
            int v = 1 + (y == p[x] ? ho[x] : h[y]);
            if (v > f[0]) {
                f[1] = f[0];
                f[0] = v;
            } else if (v > f[1]) {
                f[1] = v;
            }
        }
        for (auto y : adj[x]) {
            if (y == p[x]) {
                continue;
            }
            ho[y] = f[1 + h[y] == f[0]];
            self(y);
        }
    };
    dfs2(0);
        std::vector<int> len(n);
    for (int i = 0; i < n; i++) {
        len[i] = 1;
        int mx = 0;
        for (auto x : adj[i]) {
            int v = 1 + (x == p[i] ? ho[i] : h[x]);
            len[i] = std::max(len[i], 1 + v + mx);
            mx = std::max(mx, v);
        }
    }
        std::vector<int> pi(N + 1);
    for (int i = 1; i <= N; i++) {
        pi[i] = pi[i - 1] + (minp[i] == i);
    }
        for (int i = 0; i < n; i++) {
        len[i] = pi[len[i]];
    }
        std::vector<int> cnt(pi[n] + 1);
    for (int i = 0; i < n; i++) {
        cnt[len[i]]++;
    }
        std::vector<int> v;
    for (int l = 1, r; l <= m; l = r + 1) {
        v.push_back(m / l);
        r = m / (m / l);
    }
        int sqrtm = std::sqrt(m);
    auto idx = [&](int x) -> int {
        if (x <= sqrtm) {
            return v.size() - x;
        } else {
            return m / x - 1;
        }
    };
    std::vector<int> f(v.size());
    for (int i = 0; i < v.size(); i++) {
        f[i] = v[i] - 1;
    }
    int np = pi[sqrtm];
    for (int k = 0; k < np; k++) {
        int p = primes[k];
        for (int i = 0; v[i] >= 1LL * p * p; i++) {
            i64 x = v[i] / p;
            int j = idx(x);
            f[i] -= f[j] - k;
        }
    }
    std::vector<int> coef(v.size());
    auto pij = f;
    for (int i = 0; i < v.size(); i++) {
        coef[i] = 1 - f[i];
    }
    for (int i = 0; i < v.size(); i++) {
        f[i]++;
    }
    std::vector<Z> prod(v.size(), 1);
    int maxl = *std::max_element(len.begin(), len.end());
        for (int k = np - 1; k >= maxl; k--) {
        int p = primes[k];
        for (int i = 0; v[i] >= 1LL * p * p; i++) {
            int j = idx(v[i] / p);
            int nk = std::min(k + 1, pij[j]);
            coef[i] += -(coef[j] + nk - 1);
        }
    }
    for (int i = 0; i < v.size(); i++) {
        coef[i] += std::min(pij[i], maxl);
    }
    std::vector<int> lst(v.size(), maxl);
    std::vector<int> pre = cnt;
    for (int i = 1; i <= pi[n]; i++) {
        pre[i] += pre[i - 1];
    }
    for (int k = std::max(np - 1, maxl - 1), r = 0; k >= 0; k--) {
        while (r < v.size() && pij[r] > k + 1) {
            if (k < lst[r]) {
                int e = pre[lst[r]] - pre[k];
                if (e) {
                    prod[r] *= power(Z(f[r] - pij[r]), e);
                }
                lst[r] = k;
            }
            r++;
        }
        if (k + 1 <= maxl && cnt[k + 1]) {
            for (int i = 0; i < r; i++) {
                prod[i] *= power(Z(f[i] - k - 1), cnt[k + 1]);
            }
            // for (int i = r; i < v.size(); i++) {
            //     prod[i] *= power(Z(f[i] - pij[i]), cnt[k + 1]);
            // }
        }
        int p = primes[k];
        for (int i = 0; v[i] >= 1LL * p * p; i++) {
            if (k < lst[i] && i >= r) {
                int e = pre[lst[i]] - pre[k];
                if (e) {
                    prod[i] *= power(Z(f[i] - pij[i]), e);
                }
                lst[i] = k;
            }
            i64 pw = 1;
            for (int e = 1; pw <= v[i] / p; e++) {
                pw *= p;
                int j = idx(v[i] / pw);
                int nk = std::min(k + 1, pij[j]);
                f[i] += f[j] - nk - (e == 1 ? 1 : 0);
            }
        }
        if (k == 0) {
            for (int i = r; i < v.size(); i++) {
                if (k < lst[i]) {
                    int e = pre[lst[i]] - pre[k];
                    if (e) {
                        prod[i] *= power(Z(f[i] - pij[i]), e);
                    }
                    lst[i] = k;
                }
            }
        }
    }
        Z ans = 0;
    for (int l = 1, r; l <= m; l = r + 1) {
        r = m / (m / l);
        ans += prod[idx(m / l)] * (coef[idx(r)] - (l > 1 ? coef[idx(l - 1)] : 0));
    }
        std::cout << ans << "\n";
        return 0;
}