#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, q;
    std::cin >> n >> q;
        int N = 1;
    while (N < n) {
        N *= 2;
    }
        int last = 0;
    std::vector f(2, std::vector<int>(N));
    while (q--) {
        int x;
        std::cin >> x;
        x = (x + last) % n;
                for (int t = 0; t < 2; t++) {
            std::queue<int> q;
            int v = t == 0 ? x : (~x & (N - 1));
            q.push(v);
            while (!q.empty()) {
                int x = q.front();
                q.pop();
                                if (f[t][x]) {
                    continue;
                }
                                f[t][x] = 1;
                if (f[!t][x]) {
                    last = std::max(last, x);
                }
                                for (int i = 1; i < N; i *= 2) {
                    if (x & i) {
                        q.push(x ^ i);
                    }
                }
            }
        }
        std::cout << last << " \n"[q == 0];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}