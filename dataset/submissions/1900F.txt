#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
        std::vector<std::vector<int>> f{a};
    while (f.back().size() > 1) {
        auto v = f.back();
        std::vector<int> u;
        int t = f.size() % 2;
        for (int i = 0; i < v.size(); i++) {
            if ((i == 0 || (v[i] < v[i - 1]) == t) && (i == v.size() - 1 || (v[i] < v[i + 1]) == t)) {
                u.push_back(v[i]);
            }
        }
        f.push_back(u);
    }
    int R = f.size();
    std::vector pos(R, std::vector<int>(n, -1));
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < f[i].size(); j++) {
            pos[i][f[i][j]] = j;
        }
    }
        while (q--) {
        int l, r;
        std::cin >> l >> r;
        l--, r--;
                int t = 1;
        int i = 0;
                int al = -1, ar = -1;
        while ((r - l + 1) + (al != -1) + (ar != -1) > 1) {
            if (r < l) {
                if ((al < ar) == t) {
                    ar = -1;
                } else {
                    al = -1;
                }
            } else if (l == r) {
                if ((al == -1 || (f[i][l] < al) == t) && (ar == -1 || (f[i][r] < ar) == t)) {
                    al = ar = -1;
                } else {
                    if (al != -1 && (f[i][l] < al) == t) {
                        al = -1;
                    }
                    if (ar != -1 && (f[i][r] < ar) == t) {
                        ar = -1;
                    }
                    r = l - 1;
                }
            } else {
                int ni = std::min(R - 1, i + 1);
                if ((al == -1 || (f[i][l] < al) == t) && (f[i][l] < f[i][l + 1]) == t) {
                    al = f[i][l];
                } else if (al != -1 && (f[i][l] < al) == t) {
                    al = -1;
                }
                if ((ar == -1 || (f[i][r] < ar) == t) && (f[i][r] < f[i][r - 1]) == t) {
                    ar = f[i][r];
                } else if (ar != -1 && (f[i][r] < ar) == t) {
                    ar = -1;
                }
                l += 1;
                r -= 1;
                int nl, nr;
                if (l > r) {
                    nl = l;
                    nr = l - 1;
                } else {
                    nl = std::lower_bound(f[ni].begin(), f[ni].end(), f[i][l],
                        [&](int x, int y) {
                            return pos[i][x] < pos[i][y];
                        }) - f[ni].begin();
                    nr = std::upper_bound(f[ni].begin(), f[ni].end(), f[i][r],
                        [&](int x, int y) {
                            return pos[i][x] < pos[i][y];
                        }) - f[ni].begin() - 1;
                    assert(nr >= nl - 1);
                }
                l = nl;
                r = nr;
                i = ni;
            }
            t ^= 1;
        }
        int ans;
        if (l == r) {
            ans = f[i][l];
        } else if (al != -1) {
            ans = al;
        } else {
            ans = ar;
        }
        std::cout << ans + 1 << "\n";
    }
        return 0;
}