#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
     std::vector X(n, std::vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> X[i][j];
            X[i][j]--;
        }
    }
     auto checkrow = [&](int i) {
        std::vector<int> cnt(n);
        for (int j = 0; j < n; j++) {
            cnt[X[i][j]]++;
        }
        return std::count(cnt.begin(), cnt.end(), 1) != n;
    };
     auto checkcol = [&](int j) {
        std::vector<int> cnt(n);
        for (int i = 0; i < n; i++) {
            cnt[X[i][j]]++;
        }
        return std::count(cnt.begin(), cnt.end(), 1) != n;
    };
     int cntrow = 0, cntcol = 0;
    std::vector<int> badrow(n), badcol(n);
    for (int i = 0; i < n; i++) {
        if (!checkrow(i)) {
            cntrow++;
            badrow[i] = 1;
        }
        if (!checkcol(i)) {
            cntcol++;
            badcol[i] = 1;
        }
    }
    int ans = std::max(cntrow, cntcol);
    std::cout << ans << "\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (badrow[i] && badcol[j]) {
                X[i][j] = (X[i][j] + 1) % n;
                std::cout << i + 1 << " " << j + 1 << " " << X[i][j] + 1 << "\n";
                badrow[i] = badcol[j] = 0;
            }
        }
    }
     std::vector<int> cnt(n);
    for (int i = 0; i < n; i++) {
        cnt[X[i][0]]++;
    }
    for (int i = 0; i < n; i++) {
        if (badrow[i]) {
            cnt[X[i][0]]--;
            X[i][0] = (X[i][0] + 1) % n;
            if (cnt[X[i][0]] == 0) {
                X[i][0] = (X[i][0] + 1) % n;
            }
            cnt[X[i][0]]++;
            std::cout << i + 1 << " " << 1 << " " << X[i][0] + 1 << "\n";
        }
    }
     cnt.assign(n, 0);
    for (int i = 0; i < n; i++) {
        cnt[X[0][i]]++;
    }
    for (int i = 0; i < n; i++) {
        if (badcol[i]) {
            cnt[X[0][i]]--;
            X[0][i] = (X[0][i] + 1) % n;
            if (cnt[X[0][i]] == 0) {
                X[0][i] = (X[0][i] + 1) % n;
            }
            cnt[X[0][i]]++;
            std::cout << 1 << " " << i + 1 << " " << X[0][i] + 1 << "\n";
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
     while (t--) {
        solve();
    }
     return 0;
}