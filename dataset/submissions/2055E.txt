#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr i64 inf = 1E18;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i] >> b[i];
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return std::minmax(a[j], b[i]) > std::minmax(a[i], b[j]);
        });
        i64 suma = std::accumulate(a.begin(), a.end(), 0LL);
    i64 sumb = std::accumulate(b.begin(), b.end(), 0LL);
        std::vector<i64> preb(n + 1), prea(n + 1);
    for (int i = 0; i < n; i++) {
        prea[i + 1] = prea[i] + a[p[i]];
        preb[i + 1] = preb[i] + b[p[i]];
    }
        std::vector<i64> pre(n), suf(n);
    pre[0] = inf;
    for (int i = 0; i < n - 1; i++) {
        pre[i + 1] = std::min(pre[i] + a[p[i]], preb[i]);
    }
    suf[n - 1] = inf;
    for (int i = n - 1; i > 0; i--) {
        suf[i - 1] = std::min(suf[i] + b[p[i]], prea[n] - prea[i + 1]);
    }
        i64 ans = -1;
    for (int i = 0; i < n; i++) {
        if (sumb - b[p[i]] >= suma) {
            ans = std::max(ans, std::min({pre[i] + prea[n] - prea[i], suf[i] + preb[i] + a[p[i]], sumb - b[p[i]]}));
        }
    }
    if (ans != -1) {
        ans = 2 * suma - ans;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}