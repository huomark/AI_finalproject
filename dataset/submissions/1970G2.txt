#include <bits/stdc++.h>
 using i64 = long long;
struct EBCC {
    int n;
    std::vector<std::vector<int>> adj;
    std::vector<int> stk;
    std::vector<int> dfn, low, bel;
    int cur, cnt;
        EBCC() {}
    EBCC(int n) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        adj.assign(n, {});
        dfn.assign(n, -1);
        low.resize(n);
        bel.assign(n, -1);
        stk.clear();
        cur = cnt = 0;
    }
        void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        void dfs(int x, int p) {
        dfn[x] = low[x] = cur++;
        stk.push_back(x);
                for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            if (dfn[y] == -1) {
                dfs(y, x);
                low[x] = std::min(low[x], low[y]);
            } else if (bel[y] == -1) {
                low[x] = std::min(low[x], dfn[y]);
            }
        }
                if (dfn[x] == low[x]) {
            int y;
            do {
                y = stk.back();
                bel[y] = cnt;
                stk.pop_back();
            } while (y != x);
            cnt++;
        }
    }
        std::vector<int> work() {
        for (int x = 0; x < n; x++) {
            if (dfn[x] == -1) {
                dfs(x, -1);
            }
        }
        return bel;
    }
        struct Graph {
        int n;
        std::vector<std::pair<int, int>> edges;
        std::vector<int> siz;
        std::vector<int> cnte;
    };
    Graph compress() {
        Graph g;
        g.n = cnt;
        g.siz.resize(cnt);
        g.cnte.resize(cnt);
        for (int i = 0; i < n; i++) {
            g.siz[bel[i]]++;
            for (auto j : adj[i]) {
                if (bel[i] < bel[j]) {
                    g.edges.emplace_back(bel[i], bel[j]);
                } else if (i < j) {
                    g.cnte[bel[i]]++;
                }
            }
        }
        return g;
    }
};
 constexpr int N = 100000;
 void solve() {
    int n, m, c;
    std::cin >> n >> m >> c;
        EBCC g(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        g.addEdge(u, v);
    }
        g.work();
        auto g1 = g.compress();
    const int nv = g1.n;
    const auto cnt = g1.siz;
    std::vector<int> siz(nv);
    std::vector<std::vector<int>> adj(nv);
    for (auto [u, v] : g1.edges) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> par(nv, -1);
        auto dfs = [&](auto &&self, int x) -> void {
        siz[x] = cnt[x];
        for (auto y : adj[x]) {
            if (y == par[x]) {
                continue;
            }
            par[y] = x;
            self(self, y);
            siz[x] += siz[y];
        }
    };
    int comp = 0;
    std::vector<std::vector<int>> vec(n + 1);
    for (int x = 0; x < nv; x++) {
        if (par[x] == -1) {
            dfs(dfs, x);
            comp++;
            vec[siz[x]].push_back(x);
        }
    }
    std::vector<int> cand;
    for (int s = 1; s <= n; s++) {
        if (!vec[s].empty()) {
            cand.push_back(s);
        }
    }
        const int nc = cand.size();
        auto add = [](auto &f, int s, int c) {
        int k = 1;
        while (k < c) {
            f |= f << (k * s);
            c -= k;
            k *= 2;
        }
        f |= f << (c * s);
    };
        const int half = (n + 1) / 2;
        i64 ans = -1;
    auto check = [&](const auto &f, int l) {
        int x;
        if (l >= half) {
            x = l;
        } else {
            int i;
            i = f._Find_next(half - l - 1);
            x = i + l;
        }
        if (x <= 0 || x >= n) {
            return;
        }
        i64 v = 1LL * x * x + 1LL * (n - x) * (n - x);
        if (ans == -1 || ans > v) {
            ans = v;
        }
    };
        auto work = [&](auto &&self, int l, int r, auto &&f) -> void {
        if (r - l == 1) {
            int s = cand[l];
            int c = vec[s].size();
            if (c > 1) {
                add(f, s, c - 1);
            }
            check(f, s);
            for (auto r : vec[s]) {
                auto dfs = [&](auto &&self, int x) -> void {
                    for (auto y : adj[x]) {
                        if (y == par[x]) {
                            continue;
                        }
                        check(f, siz[y]);
                        check(f, siz[r] - siz[y]);
                        self(self, y);
                    }
                };
                dfs(dfs, r);
            }
            return;
        }
        int m = (l + r) / 2;
        auto nf = f;
        for (int i = l; i < m; i++) {
            int s = cand[i];
            int c = vec[s].size();
            add(f, s, c);
        }
        self(self, m, r, f);
        for (int i = m; i < r; i++) {
            int s = cand[i];
            int c = vec[s].size();
            add(nf, s, c);
        }
        self(self, l, m, nf);
    };
    work(work, 0, nc, std::bitset<N + 1>{1});
        if (ans != -1) {
        ans += 1LL * (comp - 1) * c;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}