#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int leader(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return leader(x) == leader(y);
    }
        bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[leader(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> p(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
    }
        DSU dsu(n);
    for (int i = 0; i < n; i++) {
        int x;
        std::cin >> x;
        if (i - x >= 0) {
            dsu.merge(i, i - x);
        }
        if (i + x < n) {
            dsu.merge(i, i + x);
        }
    }
    for (int i = 0; i < n; i++) {
        if (!dsu.same(i, p[i])) {
            std::cout << "NO\n";
            return 0;
        }
    }
    std::cout << "YES\n";
        return 0;
}