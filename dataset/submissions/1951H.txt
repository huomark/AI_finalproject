#include <bits/stdc++.h>
 using i64 = long long;
 void merge(const std::pair<int, int> &a, const std::pair<int, int> &b, std::pair<int, int> &ans) {
    ans.first = a.first + b.first;
    ans.second = a.second + b.second;
    ans.first--;
    if (ans.first < 0) {
        ans.first++;
        ans.second++;
    }
    if (ans.second > 0) {
        ans.second--;
    } else {
        ans.first++;
    }
}
 void solve() {
    int k;
    std::cin >> k;
        int n = 1 << k;
    std::vector<int> a(n), inva(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
    for (int i = 0; i < n; i++) {
        inva[a[i]] = i;
    }
        int ans = n;
    std::vector dp(2 * n, std::make_pair(k + 1, 0));
    for (int t = 1; t < k; t++) {
        dp.assign(2 * n, std::make_pair(k + 1, 0));
        std::vector<int> sum(1 << t);
        for (int i = ans; i < n; i++) {
            sum[inva[i] >> (k - t)]++;
        }
        for (int dep = t; dep >= 0; dep--) {
            for (int v = 0; v < (1 << dep); v++) {
                int x = (1 << dep) + v;
                if (dep == t) {
                    dp[x] = {std::max(0, 1 - sum[v]), std::max(0, sum[v] - 1)};
                } else {
                    merge(dp[2 * x], dp[2 * x + 1], dp[x]);
                }
            }
        }
                while (dp[1].first > 0) {
            ans--;
            int x = inva[ans] >> (k - t);
            sum[x]++;
            int dep = t;
            dp[x + (1 << t)] = {std::max(0, 1 - sum[x]), std::max(0, sum[x] - 1)};
            x += (1 << t);
            while (x > 1) {
                x /= 2;
                dep--;
                merge(dp[2 * x], dp[2 * x + 1], dp[x]);
            }
        }
        std::cout << ans + 1 << " ";
    }
    std::cout << 1 << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}