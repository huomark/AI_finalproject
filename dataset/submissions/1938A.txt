#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int addP = 100;
 std::vector<std::pair<std::string, int>> work(int a, int p, std::string S, std::string E) {
    std::vector<std::pair<std::string, int>> ans;
     auto op = [&](std::string o, int x) {
        if (o == "+P") {
            assert(0 <= x && x < S.size() && S[x] == 'P');
            S = S.substr(0, x) + "APA" + S.substr(x + 1);
            ans.emplace_back(o, x + 1);
        } else if (o == "+A") {
            assert(0 <= x && x < S.size() && S[x] == 'A');
            S = S.substr(0, x) + "PAP" + S.substr(x + 1);
            ans.emplace_back(o, x + 1);
        } else if (o == "-P") {
            assert(0 <= x && x + p <= S.size() && S.substr(x, p) == std::string(p, 'P'));
            S = S.substr(0, x) + S.substr(x + p);
            ans.emplace_back(o, x + 1);
        } else if (o == "-A") {
            assert(0 <= x && x + a <= S.size() && S.substr(x, a) == std::string(a, 'A'));
            S = S.substr(0, x) + S.substr(x + a);
            ans.emplace_back(o, x + 1);
        }
    };
    if (S[0] == 'P') {
        op("+P", 0);
    }
    for (int i = 0; i < addP; i++) {
        op("+A", i);
    }
     // std::cerr << S << "\n";
     int alts = 0, alte = 0;
    int coef = 1;
    for (auto c : S) {
        if (c == 'A') {
            coef *= -1;
        } else {
            alts += coef;
        }
    }
    coef = 1;
    for (auto c : E) {
        if (c == 'A') {
            coef *= -1;
        } else {
            alte += coef;
        }
    }
     int need = (alts - alte) % p;
    if (need < 0) {
        need += p;
    }
    if (need % 2 == 1) {
        if (p % 2 == 0) {
            return {};
        }
        need += p;
    }
     need /= 2;
    int cur = 0;
    for (int i = 0; i < need; i++) {
        op("+P", cur);
        cur += 3;
    }
     int cntas = std::count(S.begin(), S.end(), 'A');
    int cntae = std::count(E.begin(), E.end(), 'A');
    int diff = ((cntas - cntae) % 4 + 4) % 4;
    if (a % 2 == 0 && diff % 2 != 0) {
        return {};
    }
    if (diff % 4 == 2 && a % 4 == 0) {
        if (p % 4 == 0) {
            return {};
        }
        int more = 0;
        if (p % 2 == 1) {
            more = p;
        } else {
            more = p / 2;
        }
        for (int i = 0; i < more; i++) {
            op("+P", cur);
            cur += 3;
        }
    }
     cntas = std::count(S.begin(), S.end(), 'A');
    cntae = std::count(E.begin(), E.end(), 'A');
    diff = ((cntas - cntae) % 4 + 4) % 4;
    int append = 0;
    while (diff % 4 != 0 || cntas > cntae) {
        append++;
        E += std::string(a, 'A');
        cntae += a;
        diff = (diff - a % 4 + 4) % 4;
    }
        need = (cntae - cntas) / 4;
    for (int i = 0; i < need; i++) {
        op("+P", cur);
        op("+P", cur + 1);
        cur += 5;
    }
     cntas = std::count(S.begin(), S.end(), 'A');
    cntae = std::count(E.begin(), E.end(), 'A');
    assert(cntas == cntae);
    alts = 0, alte = 0;
    coef = 1;
    for (auto c : S) {
        if (c == 'A') {
            coef *= -1;
        } else {
            alts += coef;
        }
    }
    coef = 1;
    for (auto c : E) {
        if (c == 'A') {
            coef *= -1;
        } else {
            alte += coef;
        }
    }
    assert((alts - alte) % p == 0);
    std::vector<int> as, ae;
    for (int i = 0, j = -1; i <= S.size(); i++) {
        if (i == S.size() || S[i] == 'A') {
            as.push_back(i - j - 1);
            j = i;
        }
    }
    for (int i = 0, j = -1; i <= E.size(); i++) {
        if (i == E.size() || E[i] == 'A') {
            ae.push_back(i - j - 1);
            j = i;
        }
    }
    assert(as.size() == ae.size());
    int pos = -1;
    for (int i = 0; i < as.size(); i++) {
        pos += 1 + as[i];
        while (as[i] < ae[i] || as[i] % p != ae[i] % p || (i == as.size() - 2 && as.back() < ae.back())) {
            assert(i < as.size() - 1);
            op("+A", pos);
            pos++;
            as[i]++;
            as[i + 1]++;
        }
        while (as[i] > ae[i]) {
            op("-P", pos - p);
            pos -= p;
            as[i] -= p;
        }
    }
     assert(S == E);
    for (int i = 0; i < append; i++) {
        op("-A", S.size() - a);
    }
     // std::cerr << S << " " << E << "\n";
     return ans;
}
 void solve() {
    int a, p;
    std::string S, E;
    std::cin >> a >> p >> S >> E;
     auto ans = work(a, p, S, E);
    if (ans.empty()) {
        std::cout << -1 << "\n";
        return;
    }
    std::cout << ans.size() << "\n";
    for (auto [x, y] : ans) {
        std::cout << x << " " << y << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
     int t;
    std::cin >> t;
     while (t--) {
        solve();
    }
     return 0;
}