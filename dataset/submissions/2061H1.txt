#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
template<class T>
struct MaxFlow {
    struct _Edge {
        int to;
        T cap;
        _Edge(int to, T cap) : to(to), cap(cap) {}
    };
    int n;
    std::vector<_Edge> e;
    std::vector<std::vector<int>> g;
    std::vector<int> cur, h;
    MaxFlow() {}
    MaxFlow(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        e.clear();
        g.assign(n, {});
        cur.resize(n);
        h.resize(n);
    }
    bool bfs(int s, int t) {
        h.assign(n, -1);
        std::queue<int> que;
        h[s] = 0;
        que.push(s);
        while (!que.empty()) {
            const int u = que.front();
            que.pop();
            for (int i : g[u]) {
                auto [v, c] = e[i];
                if (c > 0 && h[v] == -1) {
                    h[v] = h[u] + 1;
                    if (v == t) {
                        return true;
                    }
                    que.push(v);
                }
            }
        }
        return false;
    }
    T dfs(int u, int t, T f) {
        if (u == t) {
            return f;
        }
        auto r = f;
        for (int &i = cur[u]; i < int(g[u].size()); ++i) {
            const int j = g[u][i];
            auto [v, c] = e[j];
            if (c > 0 && h[v] == h[u] + 1) {
                auto a = dfs(v, t, std::min(r, c));
                e[j].cap -= a;
                e[j ^ 1].cap += a;
                r -= a;
                if (r == 0) {
                    return f;
                }
            }
        }
        return f - r;
    }
    void addEdge(int u, int v, T c) {
        g[u].push_back(e.size());
        e.emplace_back(v, c);
        g[v].push_back(e.size());
        e.emplace_back(u, 0);
    }
    T flow(int s, int t) {
        T ans = 0;
        while (bfs(s, t)) {
            cur.assign(n, 0);
            ans += dfs(s, t, std::numeric_limits<T>::max());
        }
        return ans;
    }
    std::vector<bool> minCut() {
        std::vector<bool> c(n);
        for (int i = 0; i < n; i++) {
            c[i] = (h[i] != -1);
        }
        return c;
    }
    struct Edge {
        int from;
        int to;
        T cap;
        T flow;
    };
    std::vector<Edge> edges() {
        std::vector<Edge> a;
        for (int i = 0; i < e.size(); i += 2) {
            Edge x;
            x.from = e[i + 1].to;
            x.to = e[i].to;
            x.cap = e[i].cap + e[i + 1].cap;
            x.flow = e[i + 1].cap;
            a.push_back(x);
        }
        return a;
    }
};
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::string s, t;
    std::cin >> s >> t;
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        if (s == t) {
        std::cout << "Yes\n";
        return;
    }
        for (const auto &c : {s, t}) {
        MaxFlow<int> g(2 * n + 2);
        int S = 2 * n, T = S + 1;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (c[i] == '1') {
                g.addEdge(S, i, 1);
                cnt++;
            }
            g.addEdge(i + n, T, 1);
        }
        for (int x = 0; x < n; x++) {
            for (auto y : adj[x]) {
                g.addEdge(x, y + n, 1);
            }
        }
        if (g.flow(S, T) != cnt) {
            std::cout << "No\n";
            return;
        }
    }
        for (int p = 0; p < 2; p++) {
        std::vector<int> c(n, -1);
                bool ok = true;
        for (int st = 0; st < n; st++) {
            if (c[st] != -1) {
                continue;
            }
            int cs[2] {};
            int ct[2] {};
            std::queue<int> q;
            c[st] = 0;
            q.push(st);
                        bool bip = true;
                        while (!q.empty()) {
                int x = q.front();
                q.pop();
                                if (s[x] == '1') {
                    cs[c[x]]++;
                }
                if (t[x] == '1') {
                    ct[c[x]]++;
                }
                                for (auto y : adj[x]) {
                    if (c[y] == -1) {
                        c[y] = c[x] ^ 1;
                        q.push(y);
                    } else if (c[x] == c[y]) {
                        bip = false;
                    }
                }
            }
                        if (cs[0] + cs[1] != ct[0] + ct[1]) {
                ok = false;
            }
                        if (bip && (cs[0] != ct[p] || cs[1] != ct[p ^ 1])) {
                ok = false;
            }
        }
                if (ok) {
            std::cout << "Yes\n";
            return;
        }
    }
        std::cout << "No\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}