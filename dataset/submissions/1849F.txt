#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::pair<int, int>> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i].first;
        a[i].second = i;
    }
    std::sort(a.begin(), a.end());
        std::vector<std::array<int, 3>> edges;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n && j <= i + 3; j++) {
            edges.push_back({a[i].first ^ a[j].first, a[i].second, a[j].second});
        }
    }
    std::sort(edges.begin(), edges.end());
        DSU dsu(n);
    std::vector<std::vector<int>> adj(n);
    for (auto [_, i, j] : edges) {
        if (dsu.merge(i, j)) {
            adj[i].push_back(j);
            adj[j].push_back(i);
        }
    }
        std::vector<int> ans(n);
    auto dfs = [&](auto self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            ans[y] = ans[x] ^ 1;
            self(self, y, x);
        }
    };
    dfs(dfs, 0, -1);
        for (int i = 0; i < n; i++) {
        std::cout << ans[i];
    }
    std::cout << "\n";
        return 0;
}