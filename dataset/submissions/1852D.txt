#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::string s;
    std::cin >> s;
        for (int i = 1; i < n; i++) {
        k -= (s[i] != s[i - 1]);
    }
    if (k < 0) {
        std::cout << "NO\n";
        return;
    }
        std::vector dp(2, std::vector<std::vector<std::pair<int, int>>>(n));
    dp[0][0].emplace_back(s[0] != 'A', s[0] != 'A');
    dp[1][0].emplace_back(s[0] != 'B', s[0] != 'B');
    for (int i = 1; i < n; i++) {
        for (int t = 0; t < 2; t++) {
            for (auto [l, r] : dp[t][i - 1]) {
                dp[t][i].emplace_back(l, r);
                dp[!t][i].emplace_back(l + 1, r + 1);
            }
        }
        for (int t = 0; t < 2; t++) {
            std::vector<std::pair<int, int>> f;
            std::sort(dp[t][i].begin(), dp[t][i].end());
            int d = (s[i] != 'A' + t);
            for (auto [l, r] : dp[t][i]) {
                l += d;
                r += d;
                if (!f.empty() && l <= f.back().second + 1) {
                    f.back().second = std::max(f.back().second, r);
                } else {
                    f.emplace_back(l, r);
                }
            }
            dp[t][i] = f;
        }
    }
        auto get = [&](auto &f, int x) {
        for (auto [l, r] : f) {
            if (l <= x && x <= r) {
                return true;
            }
        }
        return false;
    };
        for (int t = 0; t < 2; t++) {
        if (get(dp[t][n - 1], k)) {
            std::cout << "YES\n";
            auto ans = s;
            for (int i = n - 1; i > 0; i--) {
                k -= (s[i] != 'A' + t);
                ans[i] = 'A' + t;
                if (!get(dp[t][i - 1], k)) {
                    t = !t;
                    k--;
                }
            }
            ans[0] = 'A' + t;
            std::cout << ans << "\n";
            return;
        }
    }
    std::cout << "NO\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}