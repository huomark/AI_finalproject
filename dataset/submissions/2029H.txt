#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
  template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return u64(a) * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 constexpr i64 safeMod(i64 x, i64 m) {
    x %= m;
    if (x < 0) {
        x += m;
    }
    return x;
}
 constexpr std::pair<i64, i64> invGcd(i64 a, i64 b) {
    a = safeMod(a, b);
    if (a == 0) {
        return {b, 0};
    }
        i64 s = b, t = a;
    i64 m0 = 0, m1 = 1;
     while (t) {
        i64 u = s / t;
        s -= t * u;
        m0 -= m1 * u;
                std::swap(s, t);
        std::swap(m0, m1);
    }
        if (m0 < 0) {
        m0 += b / s;
    }
        return {s, m0};
}
 template<std::unsigned_integral U, U P>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
    template<std::unsigned_integral T>
    constexpr ModIntBase(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr ModIntBase(T x_) {
        using S = std::make_signed_t<U>;
        S v = x_ % S(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static U mod() {
        return P;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, mod() - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<mod()>(x, rhs.val());
        return *this;
    }
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, ModIntBase &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr std::strong_ordering operator<=>(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 struct Barrett {
public:
    Barrett(u32 m_) : m(m_), im((u64)(-1) / m_ + 1) {}
     constexpr u32 mod() const {
        return m;
    }
     constexpr u32 mul(u32 a, u32 b) const {
        u64 z = a;
        z *= b;
                u64 x = u64((u128(z) * im) >> 64);
                u32 v = u32(z - x * m);
        if (m <= v) {
            v += m;
        }
        return v;
    }
 private:
    u32 m;
    u64 im;
};
 template<u32 Id>
struct DynModInt {
public:
    constexpr DynModInt() : x(0) {}
    template<std::unsigned_integral T>
    constexpr DynModInt(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr DynModInt(T x_) {
        int v = x_ % int(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static void setMod(u32 m) {
        bt = m;
    }
        static u32 mod() {
        return bt.mod();
    }
        constexpr u32 val() const {
        return x;
    }
        constexpr DynModInt operator-() const {
        DynModInt res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr DynModInt inv() const {
        auto v = invGcd(x, mod());
        assert(v.first == 1);
        return v.second;
    }
        constexpr DynModInt &operator*=(const DynModInt &rhs) & {
        x = bt.mul(x, rhs.val());
        return *this;
    }
    constexpr DynModInt &operator+=(const DynModInt &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr DynModInt &operator-=(const DynModInt &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr DynModInt &operator/=(const DynModInt &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr DynModInt operator*(DynModInt lhs, const DynModInt &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator+(DynModInt lhs, const DynModInt &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr DynModInt operator-(DynModInt lhs, const DynModInt &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator/(DynModInt lhs, const DynModInt &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, DynModInt &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const DynModInt &a) {
        return os << a.val();
    }
        friend constexpr std::strong_ordering operator<=>(DynModInt lhs, DynModInt rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    u32 x;
    static Barrett bt;
};
 template<u32 Id>
Barrett DynModInt<Id>::bt = 998244353;
 using Z = ModInt<998244353>;
 constexpr int N = 21;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector g(n, std::vector<Z>(n));
    for (int i = 0; i < m; i++) {
        int u, v, p, q;
        std::cin >> u >> v >> p >> q;
        u--;
        v--;
        g[u][v] = g[v][u] = Z(p) / q;
    }
        n--;
    std::vector<Z> fix(1 << n, 1);
    std::vector<Z> tfix(1 << n, 1);
    std::vector<Z> sub(1 << n, 1);
    std::vector<Z> sub0(1 << n, 1);
    std::vector<Z> isub(1 << n, 1);
        for (int s = 0; s < (1 << n); s++) {
        for (int i = 0; i <= n; i++) {
            if (i > 0 && (~s >> (i - 1) & 1)) {
                continue;
            }
            for (int j = 0; j <= n; j++) {
                if (j == 0 || (s >> (j - 1) & 1)) {
                    if (i < j) {
                        sub[s] *= 1 - g[i][j];
                        if (i != 0) {
                            sub0[s] *= 1 - g[i][j];
                        }
                    }
                } else {
                    fix[s] *= 1 - g[i][j];
                }
            }
        }
        isub[s] = sub[s].inv();
        tfix[s] = (1 - fix[s]).inv();
    }
        std::vector<Z> dp(1 << n);
    dp[0] = 1;
        std::vector h(1 << n, std::array<Z, N> {});
    for (int s = 0; s < (1 << n); s++) {
        h[s][__builtin_popcount(s)] = sub0[s];
    }
    for (int i = 1; i < (1 << n); i *= 2) {
        for (int j = 0; j < (1 << n); j += 2 * i) {
            for (int k = 0; k < i; k++) {
                for (int l = 0; l <= n; l++) {
                    h[i + j + k][l] += h[j + k][l];
                }
            }
        }
    }
    std::vector f(1 << n, std::array<Z, N> {});
    std::vector<Z> gg(1 << n);
        for (int c = 0; c <= n; c++) {
        std::vector<Z> g(1 << n);
        for (int s = 0; s < (1 << n); s++) {
            g[s] = f[s][c];
        }
        for (int i = 1; i < (1 << n); i *= 2) {
            for (int j = 0; j < (1 << n); j += 2 * i) {
                for (int k = 0; k < i; k++) {
                    g[i + j + k] -= g[j + k];
                }
            }
        }
        for (int s = 0; s < (1 << n); s++) {
            if (__builtin_popcount(s) == c) {
                gg[s] += g[s] * isub[s];
            }
        }
        g = gg;
        for (int i = 1; i < (1 << n); i *= 2) {
            for (int j = 0; j < (1 << n); j += 2 * i) {
                for (int k = 0; k < i; k++) {
                    g[i + j + k] -= g[j + k];
                }
            }
        }
        for (int s = 0; s < (1 << n); s++) {
            if (__builtin_popcount(s) == c) {
                dp[s] += g[s];
                gg[s] += dp[s] * fix[s] * tfix[s];
                g[s] = dp[s] * fix[s] * tfix[s] * sub[s];
            } else {
                g[s] = 0;
            }
        }
        for (int i = 1; i < (1 << n); i *= 2) {
            for (int j = 0; j < (1 << n); j += 2 * i) {
                for (int k = 0; k < i; k++) {
                    g[i + j + k] += g[j + k];
                }
            }
        }
        for (int s = 0; s < (1 << n); s++) {
            for (int i = 0; i + c <= n; i++) {
                f[s][i + c] += g[s] * h[s][i];
            }
        }
    }
        Z ans = 0;
    for (int s = 0; s < (1 << n) - 1; s++) {
        ans += dp[s] * tfix[s];
    }
    std::cout << ans << "\n";
        return 0;
}