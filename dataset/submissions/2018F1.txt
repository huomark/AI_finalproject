#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 u32 p;
void inc(u32 &a, u32 b) {
    a += b;
    if (a >= p) {
        a -= p;
    }
}
 u32 add(u32 a, u32 b) {
    inc(a, b);
    return a;
}
 void solve() {
    int n;
    std::cin >> n >> p;
        std::vector dp(n, std::vector<std::array<u32, 2>>(n));
    for (int l = 0; l < n; l++) {
        for (int r = n - 1; r >= l; r--) {
            if (l == 0 && r == n - 1) {
                dp[l][r][1] = 1;
            } else {
                if (r != n - 1) {
                    dp[l][r][1] = (1ULL * dp[l][r + 1][1] * (n - (r - l + 1)) + dp[l][r + 1][0]) % p;
                }
                if (l != 0) {
                    dp[l][r][0] = 1ULL * (dp[l - 1][r][1] + dp[l - 1][r][0]) * (n - (r - l + 1)) % p;
                }
            }
        }
    }
        std::vector<u32> g(n);
    for (int k = 0; k < n; k++) {
        g[k] = 1;
        for (int i = 0; i <= k; i++) {
            g[k] = 1ULL * g[k] * (n - k + std::min(i, k - i)) % p;
        }
    }
    std::vector<u32> ans(n + 1);
    for (int l = 0; l < n; l++) {
        for (int r = l; r < n; r++) {
            inc(ans[r - l + 1], 1ULL * g[r - l] * (dp[l][r][0] + dp[l][r][1]) % p);
        }
    }
    for (int i = n; i >= 1; i--) {
        for (int j = i - 1; j >= 1; j--) {
            inc(ans[j], 1ULL * ans[i] * (p - (i - j + 1)) % p);
        }
    }
        u32 tot = 1;
    for (int i = 1; i <= n; i++) {
        tot = 1ULL * tot * n % p;
    }
    for (int i = 1; i <= n; i++) {
        inc(tot, p - ans[i]);
    }
    ans[0] = tot;
    for (int i = 0; i <= n; i++) {
        std::cout << ans[i] << " \n"[i == n];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}