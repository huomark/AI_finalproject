#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int t, s;
    std::cin >> t >> s;
        std::vector<int> l(s);
    for (int i = 0; i < s; i++) {
        std::cin >> l[i];
    }
        std::vector<i64> p{1}, q{1};
    for (int i = 0; i < s; i++) {
        q.resize(q.size() + l[i]);
        for (int j = q.size() - 1; j >= l[i]; j--) {
            q[j] -= q[j - l[i]];
        }
    }
    p.resize(q.size() - 1);
    int n = p.size();
        while (t) {
        std::vector<i64> np(2 * n);
        std::vector<i64> nq(2 * n + 1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n; j++) {
                np[i + j] += p[i] * (j % 2 ? -1 : 1) * q[j];
            }
        }
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                nq[i + j] += q[i] * (j % 2 ? -1 : 1) * q[j];
            }
        }
        for (int i = 0; i < n; i++) {
            p[i] = np[i * 2 + t % 2];
        }
        for (int i = 0; i <= n; i++) {
            q[i] = nq[2 * i];
        }
        t /= 2;
    }
    i64 ans = p[0];
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}