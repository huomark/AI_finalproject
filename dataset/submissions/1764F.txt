#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
    DSU(int n) : f(n), siz(n, 1) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        while (x != f[x]) x = f[x] = f[f[x]];
        return x;
    }
    bool same(int x, int y) { return leader(x) == leader(y); }
    bool merge(int x, int y) {
        x = leader(x);
        y = leader(y);
        if (x == y) return false;
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
    int size(int x) { return siz[leader(x)]; }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<std::tuple<i64, int, int>> edges;
    std::vector<i64> D(n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            i64 w;
            std::cin >> w;
                        if (i == j) {
                D[i] = w;
            } else {
                edges.emplace_back(w, j, i);
            }
        }
    }
        DSU dsu(n);
        std::sort(edges.begin(), edges.end(), std::greater());
        for (auto [w, a, b] : edges) {
        if (dsu.same(a, b)) {
            continue;
        }
        dsu.merge(a, b);
                std::cout << a + 1 << " " << b + 1 << " " << (D[a] + D[b] - 2 * w) / n << "\n";
    }
        return 0;
}