#include <bits/stdc++.h>
 using i64 = long long;
 // #define TEST
 #ifdef TEST
std::vector<int> P;
#endif
 bool query(const std::vector<int> &a) {
    std::cout << "? " << a.size();
    for (auto i : a) {
        std::cout << " " << i;
    }
    std::cout << std::endl;
    #ifdef TEST
    int sum = 0;
    for (auto i : a) {
        sum += P[i - 1];
    }
    return sum % a.size() == 0;
#endif
        int res;
    std::cin >> res;
    return res;
}
 std::mt19937 rng;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
 #ifdef TEST
    P.resize(n);
    std::iota(P.begin(), P.end(), 1);
    std::shuffle(P.begin(), P.end(), rng);
        for (int i = 0; i < n; i++) {
        std::cout << P[i] << " \n"[i == n - 1];
    }
#endif
        std::vector<int> p(n + 1);
    std::vector<int> invp(n + 1);
        std::vector<int> p2(n + 1), p3(n + 1, -1), p5(n + 1, -1), p7(n + 1, -1);
        for (int i = 1; i <= n; i++) {
        std::vector<int> a(n);
        std::iota(a.begin(), a.end(), 1);
        a.erase(a.begin() + i - 1);
        if (query(a)) {
            if (invp[1] == 0) {
                p[i] = 1;
                invp[1] = i;
            } else {
                p[i] = n;
                invp[n] = i;
            }
        }
    }
        for (int i = 1; i <= n; i++) {
        if (p[i] == 0) {
            p2[i] = (query({i, invp[1]}) ? 1 : 0);
        }
    }
        for (int k = 2; k <= std::min(4, n / 2); k++) {
        for (int i = 1; i <= n; i++) {
            if (p[i] != 0) {
                continue;
            }
            std::vector<int> a;
            for (int j = 1; j <= n; j++) {
                if (j == i) {
                    continue;
                }
                if (p[j] == 0 || p[j] == k || p[j] == n - k + 1) {
                    a.push_back(j);
                }
            }
            if (query(a)) {
                p[i] = (k % 2 == p2[i] ? k : n + 1 - k);
                invp[p[i]] = i;
            }
        }
    }
        if (n > 8) {
        int mp[8][3][5][7];
        for (int i = 1; i <= n; i++) {
            mp[i % 8][i % 3][i % 5][i % 7] = i;
        }
                std::vector<int> known {1, 2, 3, 4, n, n - 1, n - 2, n - 3};
                std::vector<int> ask[9][8];
        for (int mask = 1; mask < (1 << 8); mask++) {
            int cnt = 1;
            int sum = 0;
            std::vector<int> v;
            for (int i = 0; i < 8; i++) {
                if (mask >> i & 1) {
                    cnt++;
                    sum += known[i];
                    v.push_back(invp[known[i]]);
                }
            }
            if (cnt <= 8) {
                ask[cnt][(cnt - sum % cnt) % cnt] = v;
            }
        }
        for (auto p : {3, 4, 5, 7}) {
            for (int i = 0; i < p; i++) {
                assert(!ask[p][i].empty());
            }
        }
        for (int i = 0; i < 4; i++) {
            assert(!ask[8][i].empty() || !ask[8][i + 4].empty());
        }
                auto work = [&](int x, std::vector<int> &ans) {
            for (int i = 1; i <= n; i++) {
                if (p[i] != 0) {
                    continue;
                }
                for (int y = 0; y < x; y++) {
                    auto a = ask[x][y];
                    a.push_back(i);
                    if (y == x - 1 || query(a)) {
                        ans[i] = y;
                        break;
                    }
                }
            }
        };
                auto work2 = [&](int x, std::vector<int> &ans) {
            for (int i = 1; i <= n; i++) {
                if (p[i] != 0) {
                    continue;
                }
                int u = ans[i];
                if (ask[x][u].empty()) {
                    u += x / 2;
                }
                auto a = ask[x][u];
                a.push_back(i);
                if (!query(a)) {
                    u = (u + x / 2) % x;
                }
                ans[i] = u;
            }
        };
                work(3, p3);
        work(5, p5);
        work(7, p7);
        work2(4, p2);
        work2(8, p2);
                for (int i = 1; i <= n; i++) {
            if (p[i] == 0) {
                p[i] = mp[p2[i]][p3[i]][p5[i]][p7[i]];
            }
        }
    }
        if (p[1] > n / 2) {
        for (int i = 1; i <= n; i++) {
            p[i] = n + 1 - p[i];
        }
    }
    std::cout << "!";
    for (int i = 1; i <= n; i++) {
        std::cout << " " << p[i];
    }
    std::cout << std::endl;
        return 0;
}