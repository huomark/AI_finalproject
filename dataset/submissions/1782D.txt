#include <bits/stdc++.h>
 using i64 = long long;
 bool isSquare(i64 n) {
    i64 r = std::sqrt(1.0L * n);
    return r * r == n;
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int ans = 1;
        for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int d = a[j] - a[i];
            for (int x = 1; x * x <= d; x++) {
                if (d % x == 0) {
                    int y = d / x;
                    if ((x - y) % 2) continue;
                    int A = (y - x) / 2;
                    int B = (y + x) / 2;
                    if (a[i] > 1LL * A * A) continue;
                    i64 X = 1LL * A * A - a[i];
                    int res = 0;
                    for (int i = 0; i < n; i++) {
                        res += isSquare(a[i] + X);
                    }
                    ans = std::max(ans, res);
                }
            }
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}