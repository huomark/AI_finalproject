#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector a(3, std::vector<int>(n));
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < n; j++) {
            char c;
            std::cin >> c;
            a[i][j] = c - '0';
        }
    }
    if (a[0][n - 1] == a[1][n - 1] && a[1][n - 1] == a[2][n - 1]) {
        std::cout << 0 << "\n";
        return;
    }
        if (a[0][n - 1] + a[1][n - 1] + a[2][n - 1] == 1) {
        for (auto &b : a) {
            for (auto &c : b) c ^= 1;
        }
    }
        while (a[2][n - 1] != 0) {
        std::rotate(a.begin(), a.begin() + 1, a.end());
    }
        int mx[3] {};
    for (int j = 0; j < 3; j++) {
        for (int i = 1; i <= n; i++) {
            if (a[j][i - 1] != a[j][n - 1]) mx[j] = i;
        }
    }
        int ans = std::min(n, std::min(n - mx[0], n - mx[2]) + std::min(n - mx[1], n - mx[2]));
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}