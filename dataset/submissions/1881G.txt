#include <bits/stdc++.h>
 using i64 = long long;
 template<class Info, class Tag>
struct LazySegmentTree {
    int n;
    std::vector<Info> info;
    std::vector<Tag> tag;
    LazySegmentTree() : n(0) {}
    LazySegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    LazySegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        tag.assign(4 << std::__lg(n), Tag());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void apply(int p, const Tag &v) {
        info[p].apply(v);
        tag[p].apply(v);
    }
    void push(int p) {
        apply(2 * p, tag[p]);
        apply(2 * p + 1, tag[p]);
        tag[p] = Tag();
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        push(p);
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        push(p);
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {
        if (l >= y || r <= x) {
            return;
        }
        if (l >= x && r <= y) {
            apply(p, v);
            return;
        }
        int m = (l + r) / 2;
        push(p);
        rangeApply(2 * p, l, m, x, y, v);
        rangeApply(2 * p + 1, m, r, x, y, v);
        pull(p);
    }
    void rangeApply(int l, int r, const Tag &v) {
        return rangeApply(1, 0, n, l, r, v);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        push(p);
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        push(p);
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 struct Tag {
    int add = 0;
        void apply(const Tag &t) & {
        add = (add + t.add) % 26;
    }
};
 struct Info {
    std::array<int, 2> l{-1, -1};
    std::array<int, 2> r{-1, -1};
    bool ok = true;
        void apply(const Tag &t) & {
        for (auto &x : l) {
            if (x != -1) {
                x = (x + t.add) % 26;
            }
        }
        for (auto &x : r) {
            if (x != -1) {
                x = (x + t.add) % 26;
            }
        }
    }
};
Info operator+(const Info &a, const Info &b) {
    Info c;
    c.ok = a.ok && b.ok;
    if (a.r[0] == b.l[0] && a.r[0] != -1) {
        c.ok = false;
    }
    if (a.r[0] == b.l[1] && a.r[0] != -1) {
        c.ok = false;
    }
    if (a.r[1] == b.l[0] && a.r[1] != -1) {
        c.ok = false;
    }
    if (a.l[0] == -1) {
        c.l = b.l;
    } else if (a.l[1] == -1) {
        c.l[0] = a.l[0];
        c.l[1] = b.l[0];
    } else {
        c.l = a.l;
    }
    if (b.r[0] == -1) {
        c.r = a.r;
    } else if (b.r[1] == -1) {
        c.r[0] = b.r[0];
        c.r[1] = a.r[0];
    } else {
        c.r = b.r;
    }
    return c;
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::string s;
    std::cin >> s;
        std::vector<Info> init(n);
    for (int i = 0; i < n; i++) {
        init[i].l[0] = init[i].r[0] = s[i] - 'a';
    }
        LazySegmentTree<Info, Tag> seg(init);
        while (m--) {
        int o, l, r;
        std::cin >> o >> l >> r;
        l--;
                if (o == 1) {
            int x;
            std::cin >> x;
            seg.rangeApply(l, r, {x});
        } else {
            std::cout << (seg.rangeQuery(l, r).ok ? "YES" : "NO") << "\n";
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}