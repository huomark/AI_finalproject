#include <bits/stdc++.h>
 using i64 = long long;
 template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        T ans = 0;
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    HLD(int n) : n(n), siz(n), top(n), dep(n), parent(n, -1), in(n), out(n), seq(n), adj(n) {}
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void init(int root = 0) {
        top[root] = root;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    int cur = 0;
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        HLD t(n);
        for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
                t.addEdge(u, v);
    }
        t.init();
        int m;
    std::cin >> m;
        Fenwick<int> fen[21];
    for (int i = 0; i <= 20; i++) fen[i].init(n);
        for (int i = 0; i < m; i++) {
        int o;
        std::cin >> o;
                if (o == 1) {
            int v;
            std::cin >> v;
            v--;
                        int ans = 0;
            for (int i = 0; i <= 20; i++) {
                if (v == -1) break;
                                ans += fen[i].sum(t.in[v] + 1);
                v = t.parent[v];
            }
            std::cout << ans << "\n";
        } else {
            int u, v, k, d;
            std::cin >> u >> v >> k >> d;
            u--, v--;
                        while (t.top[u] != t.top[v]) {
                if (t.dep[t.top[u]] < t.dep[t.top[v]]) std::swap(u, v);
                                fen[d].add(t.in[t.top[u]], k);
                fen[d].add(t.in[u] + 1, -k);
                u = t.parent[t.top[u]];
            }
                        if (t.dep[u] > t.dep[v]) std::swap(u, v);
            fen[d].add(t.in[u] + 1, k);
            fen[d].add(t.in[v] + 1, -k);
                        while (1) {
                fen[d].add(t.in[u], k);
                fen[d].add(t.in[u] + 1, -k);
                                if (!d--) break;
                                fen[d].add(t.in[u], k);
                fen[d].add(t.in[u] + 1, -k);
                                if (t.parent[u] == -1) {
                    while (d--) {
                        fen[d].add(t.in[u], k);
                        fen[d].add(t.in[u] + 1, -k);
                    }
                    break;
                }
                u = t.parent[u];
            }
        }
    }
        return 0;
}