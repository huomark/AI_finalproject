#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int N = 400;
using B = std::bitset<N>;
 void solve() {
    int n, m, q;
    std::cin >> n >> m >> q;
        std::vector<B> e0(n), e1(n);
    std::vector<std::array<int, 3>> edges(m);
        std::vector dis(n, std::vector<int>(n, n));
    for (int i = 0; i < m; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        u--;
        v--;
        e1[u].set(v);
        e1[v].set(u);
        edges[i] = {w, u, v};
        dis[u][v] = 1;
        dis[v][u] = 1;
    }
    std::sort(edges.begin(), edges.end());
    for (int i = 0; i < n; i++) {
        dis[i][i] = 0;
    }
        for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dis[i][j] = std::min(dis[i][j], dis[i][k] + dis[k][j]);
            }
        }
    }
        std::vector ans(n, std::vector(n, std::vector<int>(n)));
        std::queue<int> Q;
        for (auto [w, u, v] : edges) {
        if (dis[u][v]) {
            for (int x = 0; x < n; x++) {
                for (int y = 0; y < n; y++) {
                    int t = std::min(dis[x][u] + dis[v][y], dis[x][v] + dis[u][y]);
                    if (t < dis[x][y]) {
                        dis[x][y] = t;
                        ans[x][y][t] = w;
                    }
                }
            }
        }
    }
        for (int i = 0; i < q; i++) {
        int a, b, k;
        std::cin >> a >> b >> k;
        a--;
        b--;
        k--;
        std::cout << ans[a][b][k] << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}