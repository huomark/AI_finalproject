#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < n; i++) {
        adj[a[i]].push_back(i);
    }
        std::vector<int> c(n, -1);
    for (int i = 0; i < n; i++) {
        if (c[i] == -1) {
            int j = i;
            while (c[j] == -1) {
                c[j] = 0;
                j = a[j];
            }
                        bool good = false;
            for (int v = 0; v < 2; v++) {
                bool ok = true;
                auto dfs = [&](auto self, int x, bool root = false) -> void {
                    if (x == j && !root) {
                        c[x] = v;
                        return;
                    }
                    int u = 0;
                    for (auto y : adj[x]) {
                        self(self, y);
                        u |= !c[y];
                    }
                    if (root && c[x] != u) {
                        ok = false;
                    }
                    c[x] = u;
                };
                dfs(dfs, j, true);
                if (ok) {
                    good = true;
                    break;
                }
            }
            if (!good) {
                std::cout << -1 << "\n";
                return 0;
            }
        }
    }
        std::vector<int> ans;
    for (int i = 0; i < n; i++) {
        if (!c[i]) {
            ans.push_back(a[i] + 1);
        }
    }
    std::cout << ans.size() << "\n";
    for (int i = 0; i < ans.size(); i++) {
        std::cout << ans[i] << " \n"[i == ans.size() - 1];
    }
        return 0;
}