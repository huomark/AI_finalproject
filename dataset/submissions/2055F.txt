#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return u64(a) * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 constexpr i64 safeMod(i64 x, i64 m) {
    x %= m;
    if (x < 0) {
        x += m;
    }
    return x;
}
 constexpr std::pair<i64, i64> invGcd(i64 a, i64 b) {
    a = safeMod(a, b);
    if (a == 0) {
        return {b, 0};
    }
        i64 s = b, t = a;
    i64 m0 = 0, m1 = 1;
     while (t) {
        i64 u = s / t;
        s -= t * u;
        m0 -= m1 * u;
                std::swap(s, t);
        std::swap(m0, m1);
    }
        if (m0 < 0) {
        m0 += b / s;
    }
        return {s, m0};
}
 template<std::unsigned_integral U, U P>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
    template<std::unsigned_integral T>
    constexpr ModIntBase(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr ModIntBase(T x_) {
        using S = std::make_signed_t<U>;
        S v = x_ % S(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static U mod() {
        return P;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, mod() - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<mod()>(x, rhs.val());
        return *this;
    }
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, ModIntBase &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 struct Barrett {
public:
    Barrett(u32 m_) : m(m_), im((u64)(-1) / m_ + 1) {}
     constexpr u32 mod() const {
        return m;
    }
     constexpr u32 mul(u32 a, u32 b) const {
        u64 z = a;
        z *= b;
                u64 x = u64((u128(z) * im) >> 64);
                u32 v = u32(z - x * m);
        if (m <= v) {
            v += m;
        }
        return v;
    }
 private:
    u32 m;
    u64 im;
};
 template<u32 Id>
struct DynModInt {
public:
    constexpr DynModInt() : x(0) {}
    template<std::unsigned_integral T>
    constexpr DynModInt(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr DynModInt(T x_) {
        int v = x_ % int(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static void setMod(u32 m) {
        bt = m;
    }
        static u32 mod() {
        return bt.mod();
    }
        constexpr u32 val() const {
        return x;
    }
        constexpr DynModInt operator-() const {
        DynModInt res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr DynModInt inv() const {
        auto v = invGcd(x, mod());
        assert(v.first == 1);
        return v.second;
    }
        constexpr DynModInt &operator*=(const DynModInt &rhs) & {
        x = bt.mul(x, rhs.val());
        return *this;
    }
    constexpr DynModInt &operator+=(const DynModInt &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr DynModInt &operator-=(const DynModInt &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr DynModInt &operator/=(const DynModInt &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr DynModInt operator*(DynModInt lhs, const DynModInt &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator+(DynModInt lhs, const DynModInt &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr DynModInt operator-(DynModInt lhs, const DynModInt &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator/(DynModInt lhs, const DynModInt &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, DynModInt &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const DynModInt &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    u32 x;
    static Barrett bt;
};
 template<u32 Id>
Barrett DynModInt<Id>::bt = 998244353;
 using Z = ModInt<998244353>;
constexpr Z B = 1145141;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> l(n), r(n);
    for (int i = 0; i < n; i++) {
        std::cin >> l[i] >> r[i];
        l[i]--;
    }
        auto check = [&](int x) {
        if (x == 0) {
            for (int i = 0; i < n; i++) {
                if (r[i] - l[i] != r[0] - l[0]) {
                    return false;
                }
                if ((r[i] - l[i]) & 1) {
                    return false;
                }
                if (i && ((l[i] + r[i]) / 2 <= l[i - 1] || (l[i] + r[i]) / 2 >= r[i - 1])) {
                    return false;
                }
            }
            return true;
        }
        if (x * 2 > n) {
            return false;
        }
        for (auto y : {l[x] - l[0], r[x] - r[0]}) {
            std::vector<int> L(n - x), R(n - x);
            bool ok = true;
            for (int i = 0; i < n - x; i++) {
                L[i] = l[i];
                R[i] = r[i];
                if (i >= x) {
                    int a = L[i - x] + y;
                    int b = R[i - x] + y;
                    if (a == L[i]) {
                        L[i] = b;
                    } else if (b == R[i]) {
                        R[i] = a;
                    } else {
                        ok = false;
                        break;
                    }
                    if (L[i] >= R[i]) {
                        ok = false;
                        break;
                    }
                }
                if (i && (L[i] >= R[i - 1] || R[i] <= L[i - 1])) {
                    ok = false;
                    break;
                }
            }
            if (!ok) {
                continue;
            }
            for (int i = 0; i < n; i++) {
                if (i < x) {
                    if (L[i] == l[i] && R[i] == r[i]) {
                        continue;
                    }
                } else if (i >= n - x) {
                    if (L[i - x] + y == l[i] && R[i - x] + y == r[i]) {
                        continue;
                    }
                } else {
                    int a = L[i], b = R[i], c = L[i - x] + y, d = R[i - x] + y;
                    if (a == l[i] && b == c && d == r[i]) {
                        continue;
                    }
                    if (c == l[i] && d == a && b == r[i]) {
                        continue;
                    }
                }
                ok = false;
                break;
            }
            if (ok) {
                return true;
            }
        }
        return false;
    };
        std::vector<int> cand {0, n / 2};
    // for (int t = 0; t < 2; t++) {
    //     std::vector<int> a;
    //     for (int i = 0; i < n; i++) {
    //         if (i == 0 || (t ? r[i] > r[i - 1] : l[i] < l[i - 1])) {
    //             a.push_back(i);
    //         }
    //     }
    //     int s = a.size();
    //     if (s % 2 == 0) {
    //         cand.push_back(a[s / 2] - a[0]);
    //     } else {
    //         cand.push_back(a[s / 2] - a[0]);
    //         cand.push_back(a[s - 1] - a[s / 2]);
    //     }
    // }
    // for (int t = 0; t < 2; t++) {
    //     std::vector<int> a;
    //     for (int i = n - 1; i >= 0; i--) {
    //         if (i == n - 1 || (t ? r[i] > r[i + 1] : l[i] < l[i + 1])) {
    //             a.push_back(i);
    //         }
    //     }
    //     int s = a.size();
    //     std::reverse(a.begin(), a.end());
    //     if (s % 2 == 0) {
    //         cand.push_back(a[s / 2] - a[0]);
    //     } else {
    //         cand.push_back(a[s / 2] - a[0]);
    //         cand.push_back(a[s - 1] - a[s / 2]);
    //     }
    // }
        std::vector<Z> pw(n + 1);
    pw[0] = 1;
    for (int i = 1; i <= n; i++) {
        pw[i] = pw[i - 1] * B;
    }
        std::vector<Z> pre(n + 1);
    for (int i = 0; i < n; i++) {
        pre[i + 1] = pre[i] + pw[i] * (r[i] - l[i]);
    }
        for (int k = 1; k <= n / 2; k++) {
        Z res = 0;
        for (int i = 0; i < n; i += k) {
            res *= -pw[k];
            res += pre[std::min(n, i + k)] - pre[i];
        }
        if (res == 0) {
            cand.push_back(k);
        }
    }
        for (auto i : cand) {
        if (check(i)) {
            std::cout << "YES\n";
            return;
        }
    }
    std::cout << "NO\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}