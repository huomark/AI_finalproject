#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        DSU dsu(n);
    std::vector<std::vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        dsu.merge(u, v);
    }
        std::vector<std::array<int, 2>> ans;
    std::vector<int> t;
        auto topo = [&](auto &a, int f = -1) {
        std::vector<int> deg(n);
        for (auto x : a) {
            for (auto y : adj[x]) {
                if (y != f) {
                    deg[y]++;
                }
            }
        }
        t.clear();
        for (auto x : a) {
            if (deg[x] == 0) {
                t.push_back(x);
            }
        }
        for (int i = 0; i < t.size(); i++) {
            int x = t[i];
                        for (auto y : adj[x]) {
                if (y != f) {
                    deg[y]--;
                    if (deg[y] == 0) {
                        t.push_back(y);
                    }
                }
            }
        }
        return t.size() == a.size();
    };
        for (int i = 0; i < n; i++) {
        if (dsu.find(i) == i) {
            std::vector<int> a;
            for (int j = 0; j < n; j++) {
                if (dsu.find(j) == i) {
                    a.push_back(j);
                }
            }
            int f = -1;
            if (!topo(a)) {
                bool ok = false;
                for (auto x : a) {
                    if (topo(a, x)) {
                        ok = true;
                        f = x;
                        break;
                    }
                }
                if (!ok) {
                    std::cout << -1 << "\n";
                    return 0;
                }
            }
            for (int j = 1; j < t.size(); j++) {
                ans.push_back({t[j - 1], t[j]});
            }
            if (f != -1) {
                ans.push_back({t.back(), f});
            }
        }
    }
        std::cout << ans.size() << "\n";
    for (auto [x, y] : ans) {
        std::cout << x + 1 << " " << y + 1 << "\n";
    }
        return 0;
}