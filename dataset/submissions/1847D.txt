#include <bits/stdc++.h>
 using i64 = long long;
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m, q;
    std::cin >> n >> m >> q;
        std::string s;
    std::cin >> s;
        DSU dsu(n + 1);
    std::vector<int> p;
    for (int i = 0; i < m; i++) {
        int l, r;
        std::cin >> l >> r;
        l--;
        for (int j = dsu.find(l); j < r; j = dsu.find(j)) {
            p.push_back(j);
            dsu.merge(j + 1, j);
        }
    }
        std::vector<int> invp(n, -1);
    for (int i = 0; i < p.size(); i++) {
        invp[p[i]] = i;
    }
        int tot = p.size();
    int cnt = std::count(s.begin(), s.end(), '1');
    int ans = 0;
    for (int i = 0; i < std::min(cnt, tot); i++) {
        ans += (s[p[i]] == '0');
    }
        while (q--) {
        int x;
        std::cin >> x;
        x--;
                if (s[x] == '1') {
            cnt--;
            ans -= (cnt < tot && s[p[cnt]] == '0');
            s[x] = '0';
            ans += (invp[x] != -1 && invp[x] < cnt);
        } else {
            ans -= (invp[x] != -1 && invp[x] < cnt);
            s[x] = '1';
            ans += (cnt < tot && s[p[cnt]] == '0');
            cnt++;
        }
                std::cout << ans << "\n";
    }
        return 0;
}