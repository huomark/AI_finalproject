#include <bits/stdc++.h>
 using i64 = long long;
struct HLD {
    int n;
    std::vector<int> siz, top, dep, parent, in, out, seq;
    std::vector<std::vector<int>> adj;
    int cur;
        HLD() {}
    HLD(int n) {
        init(n);
    }
    void init(int n) {
        this->n = n;
        siz.resize(n);
        top.resize(n);
        dep.resize(n);
        parent.resize(n);
        in.resize(n);
        out.resize(n);
        seq.resize(n);
        cur = 0;
        adj.assign(n, {});
    }
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void work(int root = 0) {
        top[root] = root;
        dep[root] = 0;
        parent[root] = -1;
        dfs1(root);
        dfs2(root);
    }
    void dfs1(int u) {
        if (parent[u] != -1) {
            adj[u].erase(std::find(adj[u].begin(), adj[u].end(), parent[u]));
        }
                siz[u] = 1;
        for (auto &v : adj[u]) {
            parent[v] = u;
            dep[v] = dep[u] + 1;
            dfs1(v);
            siz[u] += siz[v];
            if (siz[v] > siz[adj[u][0]]) {
                std::swap(v, adj[u][0]);
            }
        }
    }
    void dfs2(int u) {
        in[u] = cur++;
        seq[in[u]] = u;
        for (auto v : adj[u]) {
            top[v] = v == adj[u][0] ? top[u] : v;
            dfs2(v);
        }
        out[u] = cur;
    }
    int lca(int u, int v) {
        while (top[u] != top[v]) {
            if (dep[top[u]] > dep[top[v]]) {
                u = parent[top[u]];
            } else {
                v = parent[top[v]];
            }
        }
        return dep[u] < dep[v] ? u : v;
    }
        int dist(int u, int v) {
        return dep[u] + dep[v] - 2 * dep[lca(u, v)];
    }
        int jump(int u, int k) {
        if (dep[u] < k) {
            return -1;
        }
                int d = dep[u] - k;
                while (dep[top[u]] > d) {
            u = parent[top[u]];
        }
                return seq[in[u] - dep[u] + d];
    }
        bool isAncester(int u, int v) {
        return in[u] <= in[v] && in[v] < out[u];
    }
        int rootedParent(int u, int v) {
        std::swap(u, v);
        if (u == v) {
            return u;
        }
        if (!isAncester(u, v)) {
            return parent[u];
        }
        auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&](int x, int y) {
            return in[x] < in[y];
        }) - 1;
        return *it;
    }
        int rootedSize(int u, int v) {
        if (u == v) {
            return n;
        }
        if (!isAncester(v, u)) {
            return siz[v];
        }
        return n - siz[rootedParent(u, v)];
    }
        int rootedLca(int a, int b, int c) {
        return lca(a, b) ^ lca(b, c) ^ lca(c, a);
    }
};
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
 template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 constexpr int inf = 1E9;
struct Min {
    int x = inf;
};
 Min operator+(Min a, Min b) {
    return {std::min(a.x, b.x)};
}
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n = 0) {
        init(n);
    }
        void init(int n) {
        this->n = n;
        a.assign(n, T());
    }
        void add(int x, T v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] += v;
        }
    }
        T sum(int x) {
        auto ans = T();
        for (int i = x; i > 0; i -= i & -i) {
            ans += a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int kth(T k) {
        int x = 0;
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && k >= a[x + i - 1]) {
                x += i;
                k -= a[x - 1];
            }
        }
        return x;
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(2 * n - 1), b(2 * n - 1);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        HLD t(n);
    std::vector<int> x(n - 1), y(n - 1);
    for (int i = 0; i < n - 1; i++) {
        std::cin >> x[i] >> y[i] >> a[n + i] >> b[n + i];
        x[i]--, y[i]--;
                t.addEdge(x[i], y[i]);
    }
    t.work();
        auto vb = b;
    std::sort(vb.begin(), vb.end(), std::greater());
    for (int i = 0; i < 2 * n - 1; i++) {
        b[i] = std::lower_bound(vb.begin(), vb.end(), b[i], std::greater()) - vb.begin();
    }
        auto cmp = [&](int x, int y) {
        return t.in[x] < t.in[y];
    };
    std::set<int, decltype(cmp)> s(cmp);
    std::vector<int> c(n), d(n);
    for (int i = 0; i < n - 1; i++) {
        if (t.parent[x[i]] != y[i]) {
            std::swap(x[i], y[i]);
        }
        c[x[i]] = a[n + i];
        d[x[i]] = b[n + i];
    }
        std::vector<int> ord(2 * n - 1);
    std::iota(ord.begin(), ord.end(), 0);
    std::sort(ord.begin(), ord.end(), [&](int i, int j) {
        return a[i] > a[j];
    });
        SegmentTree<Min> seg(n);
        int top = -1;
        Fenwick<int> fc(2 * n - 1), fce(2 * n - 1);
    Fenwick<i64> fs(2 * n - 1), fse(2 * n - 1);
    i64 sumb = 0;
    auto add = [&](int x, int t = 1) {
        fc.add(x, t);
        fs.add(x, vb[x] * t);
    };
        std::set<int, decltype(cmp)> sdown(cmp);
    i64 sumv = 0;
    auto addv = [&](int x) {
        // std::cerr << "addvertex " << x + 1 << "\n";
                sumv += vb[b[x]];
        add(b[x]);
                auto it = sdown.upper_bound(x);
        int u = -1;
        if (it != sdown.begin() && t.in[x] < t.out[*std::prev(it)]) {
            u = *std::prev(it);
        }
                if (u != -1) {
            auto v = seg.rangeQuery(t.in[u], t.out[u]).x;
            if (v != inf) {
                add(v);
                sumb -= vb[v];
            }
        }
        seg.modify(t.in[x], {b[x]});
        if (u != -1) {
            auto v = seg.rangeQuery(t.in[u], t.out[u]).x;
            if (v != inf) {
                add(v, -1);
                sumb += vb[v];
            }
        }
    };
        int L = n, R = 0;
        int cnte = 0;
    auto adde = [&](int x) {
        // std::cerr << "addedge (" << x + 1 << ", " << t.parent[x] + 1 << ")\n";
        cnte++;
        sumb += vb[d[x]];
        fce.add(d[x], 1);
        fse.add(d[x], vb[d[x]]);
        L = std::min(L, t.in[x]);
        R = std::max(R, t.out[x]);
                if (top == -1 || t.dep[x] < t.dep[top]) {
            top = x;
        }
                auto it = sdown.upper_bound(x);
        if (it != sdown.begin() && t.in[x] < t.out[*std::prev(it)]) {
            int u = *std::prev(it);
            auto v = seg.rangeQuery(t.in[u], t.out[u]).x;
            if (v != inf) {
                add(v);
                sumb -= vb[v];
            }
            sdown.erase(u);
        }
        it = sdown.lower_bound(x);
        if (it != sdown.end() && t.in[*it] < t.out[x]) {
            return;
        }
        sdown.insert(x);
        auto v = seg.rangeQuery(t.in[x], t.out[x]).x;
        if (v != inf) {
            add(v, -1);
            sumb += vb[v];
        }
    };
        auto query = [&]() {
        if (cnte >= s.size() - 1) {
            int res = s.size() - 1;
            i64 sum = sumv;
            int t = fce.kth(res);
            sum += fse.sum(t);
            res -= fce.sum(t);
            if (res) {
                sum += 1LL * res * vb[t];
            }
            return sum;
        }
        int res = cnte + 1 - sdown.size();
        i64 sum = sumb;
        if (top != -1) {
            if (t.in[top] > L || t.out[top] < R) {
                top = -1;
            }
        }
        int v = -1;
        if (top != -1) {
            res--;
            v = (seg.rangeQuery(0, t.in[top]) + seg.rangeQuery(t.out[top], n)).x;
            add(v, -1);
            sum += vb[v];
        }
        int t = fc.kth(res);
        sum += fs.sum(t);
        res -= fc.sum(t);
        if (res) {
            sum += 1LL * res * vb[t];
        }
        if (v != -1) {
            add(v);
        }
        // std::cerr << "p : " << cnte + 1 << "\n";
        // std::cerr << "sumb : " << sumb << "\n";
        // std::cerr << "sum : " << sum << "\n";
        // std::cerr << "-----\n";
        return sum;
    };
        std::vector<bool> vis(n);
    i64 ans = 0;
    for (int i = 0; i < n; i++) {
        ans = std::max(ans, 1LL * a[i] * vb[b[i]]);
    }
    DSU dsu(n);
    for (auto i : ord) {
        i64 min = a[i];
        if (i < n) {
            auto it = s.insert(i).first;
            int lst = it == s.begin() ? *s.rbegin() : *std::prev(it);
            int nxt = std::next(it) == s.end() ? *s.begin() : *std::next(it);
            for (auto x : {lst, nxt}) {
                int y = i;
                x = dsu.find(x);
                y = dsu.find(y);
                while (x != y) {
                    if (t.dep[x] < t.dep[y]) {
                        std::swap(x, y);
                    }
                    if (vis[x]) {
                        adde(x);
                    }
                    vis[x] = true;
                    dsu.merge(t.parent[x], x);
                    x = dsu.find(x);
                }
            }
            addv(i);
        } else {
            i -= n;
            if (vis[x[i]]) {
                adde(x[i]);
            }
            vis[x[i]] = true;
        }
        if (!s.empty()) {
            // std::cerr << "min : " << min << "\n";
            ans = std::max(ans, min * query());
        }
    }
        std::cout << ans << "\n";
        return 0;
}