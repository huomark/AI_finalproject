#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> par(n);
    auto find = [&](int s) {
        std::vector<int> dep(n, -1);
        auto dfs = [&](auto self, int x) -> void {
            for (auto y : adj[x]) {
                if (dep[y] == -1) {
                    dep[y] = dep[x] + 1;
                    par[y] = x;
                    self(self, y);
                }
            }
        };
        par[s] = -1;
        dep[s] = 0;
        dfs(dfs, s);
        return std::max_element(dep.begin(), dep.end()) - dep.begin();
    };
    int x = find(0);
    int y = find(x);
        std::vector<int> a;
    for (int i = y; i != -1; i = par[i]) {
        a.push_back(i);
    }
        std::vector<std::pair<int, int>> ans;
    int d = a.size();
    if (d % 2 == 1) {
        for (int i = 0; i <= (d - 1) / 2; i++) {
            ans.emplace_back(a[(d - 1) / 2], i);
        }
    } else {
        for (int i = 0; i < 2; i++) {
            int l = i, r = i + d - 2;
            while (l <= r) {
                ans.emplace_back(a[(l + r) / 2], (r - l) / 2);
                l += 2;
                r -= 2;
            }
        }
    }
        std::cout << ans.size() << "\n";
    for (auto [v, d] : ans) {
        std::cout << v + 1 << " " << d << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}