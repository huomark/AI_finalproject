#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 MAX = 2E9;
template<class Info>
struct SegmentTree {
    int n;
    std::vector<Info> info;
    SegmentTree() : n(0) {}
    SegmentTree(int n_, Info v_ = Info()) {
        init(n_, v_);
    }
    template<class T>
    SegmentTree(std::vector<T> init_) {
        init(init_);
    }
    void init(int n_, Info v_ = Info()) {
        init(std::vector(n_, v_));
    }
    template<class T>
    void init(std::vector<T> init_) {
        n = init_.size();
        info.assign(4 << std::__lg(n), Info());
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                info[p] = init_[l];
                return;
            }
            int m = (l + r) / 2;
            build(2 * p, l, m);
            build(2 * p + 1, m, r);
            pull(p);
        };
        build(1, 0, n);
    }
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void modify(int p, int l, int r, int x, const Info &v) {
        if (r - l == 1) {
            info[p] = v;
            return;
        }
        int m = (l + r) / 2;
        if (x < m) {
            modify(2 * p, l, m, x, v);
        } else {
            modify(2 * p + 1, m, r, x, v);
        }
        pull(p);
    }
    void modify(int p, const Info &v) {
        modify(1, 0, n, p, v);
    }
    Info rangeQuery(int p, int l, int r, int x, int y) {
        if (l >= y || r <= x) {
            return Info();
        }
        if (l >= x && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);
    }
    Info rangeQuery(int l, int r) {
        return rangeQuery(1, 0, n, l, r);
    }
    template<class F>
    int findFirst(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findFirst(2 * p, l, m, x, y, pred);
        if (res == -1) {
            res = findFirst(2 * p + 1, m, r, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findFirst(int l, int r, F pred) {
        return findFirst(1, 0, n, l, r, pred);
    }
    template<class F>
    int findLast(int p, int l, int r, int x, int y, F pred) {
        if (l >= y || r <= x || !pred(info[p])) {
            return -1;
        }
        if (r - l == 1) {
            return l;
        }
        int m = (l + r) / 2;
        int res = findLast(2 * p + 1, m, r, x, y, pred);
        if (res == -1) {
            res = findLast(2 * p, l, m, x, y, pred);
        }
        return res;
    }
    template<class F>
    int findLast(int l, int r, F pred) {
        return findLast(1, 0, n, l, r, pred);
    }
};
 struct Info {
    i64 t;
    i64 a0;
    i64 a1;
};
 Info operator+(Info a, Info b) {
    Info c;
    c.t = b.t;
    c.a0 = b.a0 < a.t ? 0 : b.a0 == a.t ? a.a0 : b.a0 == a.t + 1 ? a.a1 : MAX;
    c.a1 = b.a1 < a.t ? 0 : b.a1 == a.t ? a.a0 : b.a1 == a.t + 1 ? a.a1 : MAX;
    return c;
}
 constexpr int S = 10;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
        std::vector<i64> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int B = n / S;
        SegmentTree<Info> seg;
    if (B > 0) {
        seg.init(B);
    }
        auto work = [&](int i) {
        i64 lo = 0, hi = MAX;
                auto get = [&](i64 t) -> i64 {
            for (int j = i * S + S - 1; j >= i * S; j--) {
                t = t * t - a[j];
                if (t <= 0) {
                    return 0;
                }
                if (t >= MAX) {
                    return MAX;
                }
            }
            return t;
        };
        while (lo < hi) {
            i64 x = (lo + hi) / 2;
            if (get(x) > 0) {
                hi = x;
            } else {
                lo = x + 1;
            }
        }
        seg.modify(i, {lo, get(lo), get(lo + 1)});
    };
    for (int i = 0; i < B; i++) {
        work(i);
    }
        while (q--) {
        int k;
        i64 x;
        std::cin >> k >> x;
        k--;
                a[k] = x;
        if (k / S < B) {
            work(k / S);
        }
                i64 lo = 0, hi = MAX;
                auto get = [&](i64 t) -> i64 {
            for (int j = n - 1; j >= S * B; j--) {
                t = t * t - a[j];
                if (t <= 0) {
                    return 0;
                }
                if (t >= MAX) {
                    return MAX;
                }
            }
            return t;
        };
                Info info;
        if (B > 0) {
            info = seg.rangeQuery(0, B);
        }
        while (lo < hi) {
            i64 x = (lo + hi + 1) / 2;
            i64 t = get(x);
            Info suf {t, t, t};
            if (B > 0) {
                suf = info + suf;
            }
            if (suf.a0 == 0) {
                lo = x;
            } else {
                hi = x - 1;
            }
        }
        std::cout << lo << "\n";
    }
        return 0;
}