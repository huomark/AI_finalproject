#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 i64 countLe(i64 n, i64 k) {
    if (k >= 93) {
        return n / 3 + 1;
    }
    std::vector dp(k + 1, std::array<std::array<i64, 2>, 3> {});
    dp[0][0][0] = 1;
    for (int d = 30; d >= 0; d--) {
        int v = n >> (2 * d) & 3;
        std::vector ndp(k + 1, std::array<std::array<i64, 2>, 3> {});
        for (int s = 0; s <= k; s++) {
            for (int m = 0; m < 3; m++) {
                for (int l = 0; l < 2; l++) {
                    for (int x = 0; x <= (l ? 3 : v); x++) {
                        int nl = l || x < v;
                        int nm = (m + x) % 3;
                        int ns = s + x;
                        if (ns > k) {
                            continue;
                        }
                        ndp[ns][nm][nl] += dp[s][m][l];
                    }
                }
            }
        }
        dp = std::move(ndp);
    }
    i64 ans = 0;
    for (int i = 0; i <= k; i++) {
        ans += dp[i][k % 3][0];
        ans += dp[i][k % 3][1];
    }
    return ans;
}
 i64 countLe(i64 l, i64 r, i64 k) {
    return countLe(3 * r + k, k) - countLe(3 * (l - 1) + k, k);
}
 i64 countEq(i64 l, i64 r, i64 k) {
    return countLe(l, r, k) - countLe(l, r, k - 1);
}
 void solve() {
    i64 l, r, k;
    std::cin >> l >> r >> k;
        std::cout << countEq(l, r, k) << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}