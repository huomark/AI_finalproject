#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 i64 exgcd(i64 a, i64 b, i64 &x, i64 &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    i64 g = exgcd(b, a % b, y, x);
    y -= a / b * x;
    return g;
}
 i64 floorDiv(i64 a, i64 b) {
    assert(b > 0);
    if (a >= 0) {
        return a / b;
    } else {
        return (a - b + 1) / b;
    }
}
 void solve() {
    i64 n, x, y, vx, vy;
    std::cin >> n >> x >> y >> vx >> vy;
        {
        i64 g = std::gcd(vx, vy);
        vx /= g;
        vy /= g;
    }
        i64 m1, a1;
    {
        i64 u, v;
        i64 g = exgcd(vx, n, u, v);
        if (x % g) {
            std::cout << -1 << "\n";
            return;
        }
        m1 = n / g;
        a1 = -x / g * u % m1;
        if (a1 < 0) {
            a1 += m1;
        }
    }
        i64 m2, a2;
    {
        i64 u, v;
        i64 g = exgcd(vy, n, u, v);
        if (y % g) {
            std::cout << -1 << "\n";
            return;
        }
        m2 = n / g;
        a2 = -y / g * u % m2;
        if (a2 < 0) {
            a2 += m2;
        }
    }
        i64 t;
    {
        i64 u, v;
        i64 g = exgcd(m1, m2, u, v);
        if ((a1 - a2) % g) {
            std::cout << -1 << "\n";
            return;
        }
        i64 m = m2 / g;
        t = (a2 - a1) / g * u % m;
        if (t < 0) {
            t += m;
        }
        t = t * m1 + a1;
    }
    assert(t < n);
        i64 X, Y;
    X = x + vx * t;
    Y = y + vy * t;
        i64 ans = 0;
    ans += X / n - (x - 1) / n;
    ans += Y / n - (y - 1) / n;
        {
        i64 u = x + y + n;
        i64 v = X + Y + n;
        if (u > v) {
            std::swap(u, v);
        }
        ans += v / (2 * n) - (u - 1) / (2 * n);
    }
        {
        i64 u = x - y + n;
        i64 v = X - Y + n;
        if (u > v) {
            std::swap(u, v);
        }
        ans += floorDiv(v, 2 * n) - floorDiv(u - 1, 2 * n);
    }
    ans -= 2;
    if ((X + Y) % (2 * n) == n) {
        ans -= 2;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}