#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int block(i64 m) {
    std::cout << m << std::endl;
    int res;
    std::cin >> res;
    assert(res != -1);
    return res;
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        i64 n;
    int k;
    std::cin >> n >> k;
        std::vector<std::array<i64, 3>> a;
    a = {{0, 1, n}};
    int t = 0;
    while (true) {
        t++;
        if (t <= a.size()) {
            auto [v, l, r] = a[t - 1];
            i64 m = (l + r) / 2;
            int res = block(m);
            if (res == 3) {
                return 0;
            }
            if (res == 2) {
                a = {{0, 1, n}};
                t = 0;
                continue;
            }
            if (res == 0) {
                continue;
            }
        } else {
            int res = block(0);
            if (res == 0) {
                continue;
            }
        }
                if (t < a.size()) {
            a.resize(t);
        }
        std::vector<std::array<i64, 3>> na;
        for (int i = 0; i < a.size(); i++) {
            auto [v, l, r] = a[i];
            v += t - i;
            i64 m = (l + r) / 2;
            if (l < m) {
                na.push_back({v, l, m - 1});
            }
            if (m < r) {
                na.push_back({v, m + 1, r});
            }
        }
        a = std::move(na);
        std::sort(a.begin(), a.end());
        t = 0;
    }
        return 0;
}