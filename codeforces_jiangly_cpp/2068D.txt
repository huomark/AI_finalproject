#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 constexpr int inf = 1E9;
 void chmin(int &x, int y) {
    if (x > y) {
        x = y;
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> f(n);
    for (int i = 0; i < n; i++) {
        double x;
        std::cin >> x;
        f[i] = x * 10000 + 0.5;
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return f[i] < f[j];
        });
    constexpr int M = 20;
    std::vector dp(M + 1, std::vector(n + 1, std::vector(n + 1, std::vector(n + 1, inf))));
    dp[M][0][0][0] = 0;
    for (int x = M; x >= 0; x--) {
        for (int c = 0; c <= n; c++) {
            for (int a = 0; a <= c; a++) {
                for (int b = 0; a + b <= c; b++) {
                    if (c < n) {
                        chmin(dp[x][c + 1][a + 1][b], dp[x][c][a][b] + f[p[c]] * x);
                    }
                    if (x && a >= b) {
                        chmin(dp[x - 1][c][b][a - b], dp[x][c][a][b]);
                    }
                }
            }
        }
    }
        std::vector<int> val(n);
        int x = 0;
    int a = 1;
    int b = 0;
    int c = n;
        while (true) {
        if (x == M && c == 0) {
            break;
        }
        if (a && dp[x][c][a][b] == dp[x][c - 1][a - 1][b] + f[p[c - 1]] * x) {
            val[c - 1] = x;
            c--;
            a--;
        } else {
            x++;
            b += a;
            std::swap(a, b);
        }
    }
    std::vector<std::vector<std::vector<int>>> vec(M + 1);
    for (int i = 0; i < n; i++) {
        vec[val[i]].push_back({p[i]});
    }
    std::vector<std::string> ans(n);
    for (int x = M - 1; x >= 1; x--) {
        assert(vec[x + 1].size() <= vec[x].size());
        while (!vec[x + 1].empty()) {
            auto a = vec[x + 1].back();
            vec[x + 1].pop_back();
            auto b = vec[x].back();
            vec[x].pop_back();
            for (auto i : a) {
                ans[i] += '-';
            }
            for (auto i : b) {
                ans[i] += '.';
            }
            a.insert(a.end(), b.begin(), b.end());
            vec[x - 1].push_back(a);
        }
    }
    for (int i = 0; i < n; i++) {
        std::reverse(ans[i].begin(), ans[i].end());
        std::cout << ans[i] << "\n";
    }
        return 0;
}