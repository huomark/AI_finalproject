#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> ip(n);
    std::iota(ip.begin(), ip.end(), 0);
    std::stable_sort(ip.begin(), ip.end(),
        [&](int i, int j) {
            return a[i] < a[j];
        });
        i64 ans = 1LL * n * n;
    int x = 0;
    for (int i = 1; i <= n; i++) {
        x = std::max(x, ip[i - 1] + 1);
        ans = std::min(ans, 1LL * x * x + 1LL * (n - i) * (n - i));
    }
    x = n;
    for (int i = n - 1; i >= 0; i--) {
        x = std::min(x, ip[i]);
        ans = std::min(ans, 1LL * (n - x) * (n - x) + 1LL * i * i);
    }
        std::vector<int> pre(n + 1, -1), suf(n + 1, n);
    for (int i = 0; i < n; i++) {
        pre[i + 1] = std::max(pre[i], ip[i]);
    }
    for (int i = n - 1; i >= 0; i--) {
        suf[i] = std::min(suf[i + 1], ip[i]);
    }
        std::vector<bool> f(n + 1);
    for (int i = 0; i <= n; i++) {
        f[i] = (pre[i] < suf[i]);
    }
    for (int i = 0, j = 0; i <= n; i++) {
        if (!f[i]) {
            continue;
        }
        if (j < i) {
            j = i;
        }
        while (j < n && f[j + 1]) {
            j++;
        }
        ans = std::min(ans, 1LL * i * i + 1LL * (n - j) * (n - j));
    }
        std::cout << ans << "\n";
        return 0;
}