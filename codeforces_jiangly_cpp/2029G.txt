#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, m, V;
    std::cin >> n >> m >> V;
        std::vector<i64> c(n);
    for (int i = 0; i < n; i++) {
        std::cin >> c[i];
    }
        std::vector<int> a(n);
    for (int i = 0; i < m; i++) {
        char o;
        int x;
        std::cin >> o >> x;
        if (o == 'L') {
            a[0]++;
            if (x < n) {
                a[x]--;
            }
        } else {
            x--;
            a[x]++;
        }
    }
    for (int i = 1; i < n; i++) {
        a[i] += a[i - 1];
    }
        for (int i = 0; i < n; i++) {
        a[i] = std::min(a[i], V + 1);
    }
        {
        std::vector<int> na;
        std::vector<i64> nc;
        for (int l = 0, r = 0; l < n; l = r) {
            i64 sum = 0;
            while (r < n && a[l] == a[r]) {
                sum += c[r];
                r++;
            }
            if (a[l] <= V) {
                na.push_back(a[l]);
                nc.push_back(sum);
            }
        }
        a = na;
        c = nc;
        n = a.size();
    }
        std::vector<i64> ans(V + 1);
        std::vector f(V + 1, std::vector<i64>(2 * V + 1, -inf));
    std::vector g(V + 1, std::vector<i64>(2 * V + 1, -inf));
        for (int i = 0; i <= V; i++) {
        f[i][i] = 0;
        g[i][i] = 0;
    }
        int x = 0;
    for (int i = 0; i < n; i++) {
        while (x < a[i]) {
            x++;
            for (int j = 1; j <= 2 * V; j++) {
                f[x][j] = std::max(f[x][j], f[x - 1][j - 1]);
            }
        }
        while (x > a[i]) {
            x--;
            for (int j = 1; j <= 2 * V; j++) {
                g[x][j] = std::max(g[x][j], g[x + 1][j - 1]);
            }
        }
        auto dp = f[a[i]];
        for (int j = 0; j <= 2 * V; j++) {
            dp[j] = std::max(dp[j], g[a[i]][j]);
            dp[j] += c[i];
            int u = (j + a[i] + 1) / 2;
            if (u <= V) {
                ans[u] = std::max(ans[u], dp[j]);
            }
        }
        for (int j = 0; j <= 2 * V; j++) {
            f[a[i]][j] = std::max(f[a[i]][j], dp[j]);
            g[a[i]][j] = std::max(g[a[i]][j], dp[j]);
        }
    }
        for (int v = 1; v <= V; v++) {
        ans[v] = std::max(ans[v], ans[v - 1]);
        std::cout << ans[v] << " \n"[v == V];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}