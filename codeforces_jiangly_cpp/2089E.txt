#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 namespace ranges = std::ranges;
namespace views = std::views;
 template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return u64(a) * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 constexpr i64 safeMod(i64 x, i64 m) {
    x %= m;
    if (x < 0) {
        x += m;
    }
    return x;
}
 constexpr std::pair<i64, i64> invGcd(i64 a, i64 b) {
    a = safeMod(a, b);
    if (a == 0) {
        return {b, 0};
    }
        i64 s = b, t = a;
    i64 m0 = 0, m1 = 1;
     while (t) {
        i64 u = s / t;
        s -= t * u;
        m0 -= m1 * u;
                std::swap(s, t);
        std::swap(m0, m1);
    }
        if (m0 < 0) {
        m0 += b / s;
    }
        return {s, m0};
}
 template<std::unsigned_integral U, U P>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
    template<std::unsigned_integral T>
    constexpr ModIntBase(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr ModIntBase(T x_) {
        using S = std::make_signed_t<U>;
        S v = x_ % S(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static U mod() {
        return P;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, mod() - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<mod()>(x, rhs.val());
        return *this;
    }
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, ModIntBase &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 struct Barrett {
public:
    Barrett(u32 m_) : m(m_), im((u64)(-1) / m_ + 1) {}
     constexpr u32 mod() const {
        return m;
    }
     constexpr u32 mul(u32 a, u32 b) const {
        u64 z = a;
        z *= b;
                u64 x = u64((u128(z) * im) >> 64);
                u32 v = u32(z - x * m);
        if (m <= v) {
            v += m;
        }
        return v;
    }
 private:
    u32 m;
    u64 im;
};
 template<u32 Id>
struct DynModInt {
public:
    constexpr DynModInt() : x(0) {}
    template<std::unsigned_integral T>
    constexpr DynModInt(T x_) : x(x_ % mod()) {}
    template<std::signed_integral T>
    constexpr DynModInt(T x_) {
        int v = x_ % int(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
        constexpr static void setMod(u32 m) {
        bt = m;
    }
        static u32 mod() {
        return bt.mod();
    }
        constexpr u32 val() const {
        return x;
    }
        constexpr DynModInt operator-() const {
        DynModInt res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
        constexpr DynModInt inv() const {
        auto v = invGcd(x, mod());
        assert(v.first == 1);
        return v.second;
    }
        constexpr DynModInt &operator*=(const DynModInt &rhs) & {
        x = bt.mul(x, rhs.val());
        return *this;
    }
    constexpr DynModInt &operator+=(const DynModInt &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr DynModInt &operator-=(const DynModInt &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr DynModInt &operator/=(const DynModInt &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr DynModInt operator*(DynModInt lhs, const DynModInt &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator+(DynModInt lhs, const DynModInt &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr DynModInt operator-(DynModInt lhs, const DynModInt &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr DynModInt operator/(DynModInt lhs, const DynModInt &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::istream &operator>>(std::istream &is, DynModInt &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const DynModInt &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr std::strong_ordering operator<=>(const DynModInt &lhs, const DynModInt &rhs) {
        return lhs.val() <=> rhs.val();
    }
    private:
    u32 x;
    static Barrett bt;
};
 template<u32 Id>
Barrett DynModInt<Id>::bt = 998244353;
 using Z = ModInt<998244353>;
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        // u = 1;
        // v = i + 1;
        u--;
        v--;
        if (u > v) {
            std::swap(u, v);
        }
        adj[u].push_back(v);
    }
        for (int i = 0; i < n; i++) {
        ranges::sort(adj[i]);
    }
        std::vector f(n, std::vector<Z>(n + 1));
    std::vector<int> p(n, -1), siz(n), out(n);
    auto dfs = [&](this auto &&self, int x) -> void {
        siz[x] = 1;
        f[x][0] = 1;
        for (auto y : adj[x]) {
            p[y] = x;
            self(y);
            std::vector<Z> g(n + 1);
            for (int i = 0; i < siz[x]; i++) {
                for (int j = 0; j <= siz[y]; j++) {
                    g[i + j] += f[x][i] * f[y][j] * comb.binom(i + j, i);
                }
            }
            siz[x] += siz[y];
            f[x] = std::move(g);
        }
        out[x] = x + siz[x];
        for (int i = siz[x]; i; i--) {
            f[x][i] += f[x][i - 1];
        }
    };
    dfs(0);
        std::vector dp(n, std::vector<Z>(n + 1));
    for (int x = 0; x < n; x++) {
        dp[x][0] = 1;
    }
        // for (int i = 1; i <= n; i++) {
    //     std::cerr << f[0][i] << " \n"[i == n];
    // }
        std::vector g(n, std::vector(n, std::vector<Z> {1}));
    for (int x = 0; x < n; x++) {
        for (int y = 0; y < x; y++) {
            auto &G = g[x][y];
            for (int z = y + 1; z < x; z++) {
                if ((p[z] <= y || x < out[p[z]]) && x >= out[z]) {
                    std::vector<Z> ng(G.size() + siz[z]);
                    for (int i = 0; i < G.size(); i++) {
                        for (int j = 0; j <= siz[z]; j++) {
                            ng[i + j] += G[i] * f[z][j] * comb.binom(i + j, i);
                        }
                    }
                    G = std::move(ng);
                }
            }
        }
    }
        for (int d = 1; d <= n; d++) {
        std::cout << dp[0][0] << " \n"[d == n];
        std::vector ndp(n, std::vector<Z>(n + 1));
        for (int x = n - d; x >= 0; x--) {
            for (int i = 0; i < n; i++) {
                ndp[x][i + 1] += dp[x][i];
            }
            for (int y = x - 1; y >= 0; y--) {
                // std::vector<Z> g(n + 1);
                // int s = 0;
                // g[0] = 1;
                // for (int z = y + 1; z < x; z++) {
                //     if ((p[z] <= y || x < out[p[z]]) && x >= out[z]) {
                //         // std::cerr << "(" << x << " " << y << " " << z << ")\n";
                //         std::vector<Z> ng(n + 1);
                //         for (int i = 0; i <= s; i++) {
                //             for (int j = 0; j <= siz[z]; j++) {
                //                 ng[i + j] += g[i] * f[z][j] * comb.binom(i + j, i);
                //             }
                //         }
                //         s += siz[z];
                //         g = std::move(ng);
                //     }
                // }
                // if (x == 2 && y == 0) {
                //     std::cerr << "[";
                //     for (auto z : g) {
                //         std::cerr << z << " ";
                //     }
                //     std::cerr << "]\n";
                // }
                auto &G = g[x][y];
                for (int i = 0; i <= x && i < d; i++) {
                    for (int j = 0; j <= i && j < G.size(); j++) {
                        ndp[y][i - j] += dp[x][i] * G[j] * comb.binom(i, j);
                    }
                }
            }
        }
        dp = std::move(ndp);
        // std::cerr << "dp : " << dp[2][1] << "\n";
        // std::cerr << "dp : " << dp[0][0] << "\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}