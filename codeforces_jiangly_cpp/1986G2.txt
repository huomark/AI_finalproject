#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 5E5;
std::vector<int> divs[N + 1];
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n + 1), q(n + 1);
    i64 ans = 0;
    std::vector<std::vector<int>> fp(n + 1), fq(n + 1);
    for (int i = 1; i <= n; i++) {
        std::cin >> p[i];
        q[i] = i;
        int g = std::gcd(p[i], q[i]);
        p[i] /= g;
        q[i] /= g;
        if (q[i] == 1) {
            ans--;
        }
        fp[p[i]].push_back(i);
        fq[q[i]].push_back(i);
    }
        std::vector<int> cnt(n + 1);
    for (int x = 1; x <= n; x++) {
        for (int y = x; y <= n; y += x) {
            for (auto i : fp[y]) {
                cnt[q[i]]++;
            }
        }
        for (auto i : fq[x]) {
            for (auto y : divs[p[i]]) {
                ans += cnt[y];
            }
        }
        for (int y = x; y <= n; y += x) {
            for (auto i : fp[y]) {
                cnt[q[i]]--;
            }
        }
    }
        ans /= 2;
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int cnt[N + 1] {};
    for (int i = 1; i <= N; i++) {
        for (int j = i; j <= N; j += i) {
            cnt[j]++;
        }
        divs[i].reserve(cnt[i]);
    }
        for (int i = 1; i <= N; i++) {
        for (int j = i; j <= N; j += i) {
            divs[j].push_back(i);
        }
    }
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}