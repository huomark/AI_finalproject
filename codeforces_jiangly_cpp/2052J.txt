#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n, m, q;
    std::cin >> n >> m >> q;
        std::vector<std::array<i64, 2>> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i][1];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> a[i][0];
    }
    std::sort(a.begin(), a.end());
        for (int i = 1; i < n; i++) {
        a[i][1] += a[i - 1][1];
    }
        std::vector<i64> l(m);
    for (int i = 0; i < m; i++) {
        std::cin >> l[i];
    }
    for (int i = 1; i < m; i++) {
        l[i] += l[i - 1];
    }
        std::vector<i64> suf(n);
    for (int i = n - 1; i >= 0; i--) {
        suf[i] = a[i][0] - a[i][1];
        if (i < n - 1) {
            suf[i] = std::min(suf[i], suf[i + 1]);
        }
    }
        for (int i = 0; i < q; i++) {
        i64 t;
        std::cin >> t;
                int k = std::lower_bound(a.begin(), a.end(), std::array<i64, 2> {t, 0}) - a.begin();
        i64 s = t - (k ? a[k - 1][1] : 0);
        if (k < n) {
            s = std::min(s, suf[k]);
        }
                k = std::upper_bound(l.begin(), l.end(), s) - l.begin();
        std::cout << k << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}