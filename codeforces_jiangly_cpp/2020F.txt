#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
// TODO: Dynamic ModInt
 template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
        template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x(norm(x_ % T {P})) {}
        constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
        constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
        friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
        friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
 template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 constexpr u32 P = 1000000007;
using Z = ModInt<P>;
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 void solve() {
    int n, K, d;
    std::cin >> n >> K >> d;
            const int sqrtN = std::sqrt(n);
    sieve(sqrtN);
        std::vector<int> v;
    for (int l = 1, r; l <= n; l = r + 1) {
        v.push_back(n / l);
        r = n / (n / l);
    }
        auto idx = [&](int x) -> int {
        if (x <= sqrtN) {
            return v.size() - x;
        } else {
            return n / x - 1;
        }
    };
        const int nv = v.size();
    std::vector<int> f(nv);
    for (int i = 0; i < nv; i++) {
        f[i] = v[i] - 1;
    }
        const int np = std::upper_bound(primes.begin(), primes.end(), sqrtN) - primes.begin();
    for (int k = 0; k < np; k++) {
        int p = primes[k];
        for (int i = 0; v[i] >= p * p; i++) {
            int x = v[i] / p;
            int j = idx(x);
            f[i] -= f[j] - k;
        }
    }
        std::vector<Z> g(nv);
    Z fp[30];
    for (int i = 0; i < 30; i++) {
        fp[i] = comb.binom(i * K + d, d);
    }
    for (int i = 0; i < nv; i++) {
        g[i] = 1 + f[i] * fp[1];
    }
        for (int k = np - 1; k >= 0; k--) {
        int p = primes[k];
        for (int i = 0; v[i] >= p * p; i++) {
            i64 pw = 1;
            for (int e = 1; pw <= v[i] / p; e++) {
                pw *= p;
                int j = idx(v[i] / pw);
                int nk = std::min(k + 1, f[j]);
                g[i] += (g[j] - Z(nk) * fp[1] - (e == 1 ? 1 : 0)) * fp[e];
            }
        }
    }
        std::cout << g[0] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(1E5);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}