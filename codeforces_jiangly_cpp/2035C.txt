#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n;
    std::cin >> n;
        int k = std::__lg(n);
    std::vector<int> p(n);
    int ans;
    std::vector<bool> vis(n + 1);
    if (n % 2 == 0) {
        ans = (2 << k) - 1;
        p[n - 1] = 1 << k;
        p[n - 2] = (1 << k) - 1;
        p[n - 3] = (1 << k) - 2;
        p[n - 4] = 1;
        p[n - 5] = k == 2 ? 5 : 3;
        for (int i = n - 5; i < n; i++) {
            vis[p[i]] = true;
        }
        for (int i = 0, x = 1; i < n - 5; i++) {
            while (vis[x]) {
                x++;
            }
            p[i] = x;
            vis[x] = true;
        }
    } else {
        ans = n;
        p[n - 1] = n;
        p[n - 2] = n - 1;
        p[n - 3] = (1 << k) - 1;
        p[n - 4] = 1;
        p[n - 5] = 2;
        for (int i = n - 5; i < n; i++) {
            vis[p[i]] = true;
        }
        for (int i = 0, x = 1; i < n - 5; i++) {
            while (vis[x]) {
                x++;
            }
            p[i] = x;
            vis[x] = true;
        }
    }
        std::cout << ans << "\n";
    int v = 0;
    for (int i = 0; i < n; i++) {
        if (i % 2 == 0) {
            v &= p[i];
        } else {
            v |= p[i];
        }
        std::cout << p[i] << " \n"[i == n - 1];
    }
    assert(v == ans);
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}