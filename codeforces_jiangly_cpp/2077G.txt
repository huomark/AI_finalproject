#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n, m, x;
    std::cin >> n >> m >> x;
        int g[3] {};
    std::vector<std::vector<std::array<int, 3>>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v, w;
        char ch;
        std::cin >> u >> v >> w >> ch;
        u--;
        v--;
        int c;
        if (ch == 'r') {
            c = 0;
        } else if (ch == 'g') {
            c = 1;
        } else {
            c = 2;
        }
        adj[u].push_back({v, w, c});
        adj[v].push_back({u, w, c});
        g[c] = std::gcd(g[c], w);
    }
        std::vector<std::array<bool, 8>> vis(n);
    std::queue<std::array<int, 2>> q;
    vis[0][0] = true;
    q.push({0, 0});
        while (!q.empty()) {
        auto [x, s] = q.front();
        q.pop();
                for (auto [y, w, c] : adj[x]) {
            w %= (2 * g[c]);
            w /= g[c];
            if (!vis[y][s ^ (w << c)]) {
                vis[y][s ^ (w << c)] = true;
                q.push({y, s ^ (w << c)});
            }
        }
    }
        int ans = 1E9;
        for (int s = 0; s < 8; s++) {
        if (!vis[n - 1][s]) {
            continue;
        }
        int v[3] {};
        for (int i = 0; i < 3; i++) {
            v[i] = (s >> i & 1) * g[i];
        }
        for (int i = 0; i < 3; i++) {
            int gother = 0;
            for (int j = 0; j < 3; j++) {
                if (i != j) {
                    gother = std::gcd(gother, 2 * g[j]);
                }
            }
                        int ng[3] = {};
            for (int j = 0; j < 3; j++) {
                if (i != j) {
                    ng[j] = std::gcd(2 * g[j] / gother, 2 * g[i]) * gother;
                }
            }
                        for (int x = 0; x < gother; x++) {
                int res = 0;
                for (int j = 0; j < 3; j++) {
                    if (j != i) {
                        int t = (v[j] - v[i] - 1LL * x * 2 * g[i]) % ng[j];
                        if (t < 0) {
                            t += ng[j];
                        }
                        res = std::max(res, t);
                    }
                }
                ans = std::min(ans, res);
            }
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}