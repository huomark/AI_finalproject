#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int N = 2E6 + 2;
constexpr int A = 94;
 std::set<int> ids[N];
int dp[N];
int tot = 1;
 int trie[N][A];
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        std::fill(dp, dp + N, -1);
        int n;
    std::cin >> n;
        std::vector<int> ps {1};
        std::vector<std::string> str(n + 1);
        auto update = [&](int p) {
        dp[p] = -1;
        if (!ids[p].empty()) {
            dp[p] = *ids[p].begin();
        }
        for (int i = 0; i < A; i++) {
            int q = trie[p][i];
            int v = dp[q];
            if (v != -1 && (dp[p] == -1 || str[v].size() > str[dp[p]].size())) {
                dp[p] = v;
            }
        }
    };
        for (int i = 0; i < n; i++) {
        std::string op;
        std::cin >> op;
                if (op == "add") {
            int id;
            std::string s;
            std::cin >> id >> s;
            str[id] = s;
                        [&](this auto &&self, int p, int i) -> void {
                if (i == s.size()) {
                    ids[p].insert(id);
                    update(p);
                    return;
                }
                int &q = trie[p][s[i] - 33];
                if (q == 0) {
                    q = ++tot;
                }
                self(q, i + 1);
                update(p);
            } (1, 0);
        } else if (op == "delete") {
            int id;
            std::cin >> id;
            auto s = str[id];
                        [&](this auto &&self, int p, int i) -> void {
                if (i == s.size()) {
                    ids[p].erase(id);
                    update(p);
                    return;
                }
                int q = trie[p][s[i] - 33];
                self(q, i + 1);
                update(p);
            } (1, 0);
        } else if (op == "append") {
            std::string s;
            std::cin >> s;
                        for (auto c : s) {
                int p = ps.back();
                int &q = trie[p][c - 33];
                if (!q) {
                    q = ++tot;
                }
                ps.push_back(q);
            }
        } else {
            int c;
            std::cin >> c;
                        if (c >= ps.size()) {
                c = ps.size() - 1;
            }
            ps.resize(ps.size() - c);
        }
        std::cout << dp[ps.back()] << "\n";
    }
        return 0;
}