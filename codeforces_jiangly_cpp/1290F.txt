#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
// TODO: Dynamic ModInt
 template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
        template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x(norm(x_ % T {P})) {}
        constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
        constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
        friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
        friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
 template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 constexpr u32 P = 998244353;
using Z = ModInt<P>;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<int> x(n), y(n);
    for (int i = 0; i < n; i++) {
        std::cin >> x[i] >> y[i];
    }
        Z dp[2][20][20][20][20][2][2];
    dp[0][0][0][0][0][0][0] = 1;
    int cur = 0;
        for (int k = 0; k < 30; k++) {
        std::memset(dp[!cur], 0, sizeof(dp[!cur]));
        for (int a = 0; a < 20; a++) {
            for (int b = 0; b < 20; b++) {
                for (int c = 0; c < 20; c++) {
                    for (int d = 0; d < 20; d++) {
                        for (int e = 0; e < 2; e++) {
                            for (int f = 0; f < 2; f++) {
                                if (dp[cur][a][b][c][d][e][f] == 0) {
                                    continue;
                                }
                                for (int s = 0; s < (1 << n); s++) {
                                    int na = a;
                                    int nb = b;
                                    int nc = c;
                                    int nd = d;
                                    for (int i = 0; i < n; i++) {
                                        if (~s >> i & 1) {
                                            continue;
                                        }
                                        if (x[i] > 0) {
                                            na += x[i];
                                        } else {
                                            nb += -x[i];
                                        }
                                        if (y[i] > 0) {
                                            nc += y[i];
                                        } else {
                                            nd += -y[i];
                                        }
                                    }
                                    if ((na ^ nb) & 1) {
                                        continue;
                                    }
                                    if ((nc ^ nd) & 1) {
                                        continue;
                                    }
                                    int ne = (na & 1) > (m >> k & 1) || ((na & 1) == (m >> k & 1) && e);
                                    int nf = (nc & 1) > (m >> k & 1) || ((nc & 1) == (m >> k & 1) && f);
                                    dp[!cur][na / 2][nb / 2][nc / 2][nd / 2][ne][nf] += dp[cur][a][b][c][d][e][f];
                                }
                            }
                        }
                    }
                }
            }
        }
        cur ^= 1;
    }
        std::cout << dp[cur][0][0][0][0][0][0] - 1 << "\n";
        return 0;
}