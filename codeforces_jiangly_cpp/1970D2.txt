#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        // constexpr int L = 0, R = 0;
        // std::vector<int> vec;
        constexpr int K = 9;
    auto get = [&](int x) {
        return std::make_tuple(K * n, x, x);
    };
        auto calc = [&](int x, int y) {
        auto [la, ma, ra] = get(x);
        auto [lb, mb, rb] = get(y);
        assert(la == lb);
        int v;
                // if (x >= y) {
        //     v = (a + L) * (a + R + 1) + (a + R) + (a + L) + (1 + a + L + a + R + 1) * (b + L + b + R) + (a - b);
        // } else {
        //     v = (b + L) * (b + R) + (b + R) + (b + L) + (1 + a + L + a + R + 1) * (b + L + b + R);
        // }
        if (x >= y) {
            assert(ma >= mb);
            assert(ra >= rb);
            v = ma * (ra + lb) + (ra + lb) + ma + (la + ma + ra + lb) * (mb + rb) + la * (ma - mb);
            if (ma != mb) {
                v += la * (ra + lb);
            } else {
                v += la * (ra + lb - rb);
            }
        } else {
            assert(ma < mb);
            assert(ra < rb);
            v = mb * rb + ma * std::max(0, ra + lb - rb) + std::max(ra + lb, rb) + mb + (la + ma + ra + lb) * (mb + rb);
            v += la * (ra + lb);
        }
        return v;
    };
        // for (int L = -3; L <= 3; L++) {
        // for (int R = -3; R <= 3; R++) {
        std::vector<int> vec;
    int cnt = 0;
    std::map<int, std::pair<int, int>> mp;
    for (int x = 1; cnt < n; x++) {
        std::map<int, std::pair<int, int>> nmp;
        for (auto y : vec) {
            nmp[calc(x, y)] = {x, y};
            nmp[calc(y, x)] = {y, x};
        }
        nmp[calc(x, x)] = {x, x};
        int ok = 1;
        if (nmp.size() != 2 * cnt + 1) {
            continue;
        }
        for (auto &[a, b] : nmp) {
            if (mp.count(a)) {
                ok = 0;
                break;
            }
        }
        if (!ok) {
            continue;
        }
        for (auto &[a, b] : nmp) {
            mp[a] = b;
        }
        vec.push_back(x);
        cnt++;
        if (x * 2 + K * cnt > 30 * cnt) {
            std::cerr << "cnt : " << cnt << "\n";
            break;
        }
    }
    // std::cerr << mp.size() << "\n";
        std::map<int, int> id;
    for (int i = 0; i < n; i++) {
        id[vec[i]] = i + 1;
    }
        std::vector<std::string> str(vec.size());
    for (int i = 0; i < n; i++) {
        auto [l, m, r] = get(vec[i]);
        str[i] = std::string(l, 'X') + std::string(m, 'O') + std::string(r, 'X');
        std::cout << str[i] << std::endl;
    }
    // if (n <= 10) {
    //     for (int i = 0; i < n; i++) {
    //         for (int j = 0; j < n; j++) {
    //             std::string s = str[i] + str[j];
    //             std::set<std::string> sub;
    //             for (int l = 0; l < s.size(); l++) {
    //                 for (int r = l; r < s.size(); r++) {
    //                     sub.insert(s.substr(l, r - l + 1));
    //                 }
    //             }
    //             // std::cerr << vec[i] << " " << vec[j] << " " << calc(vec[i], vec[j]) << " " << sub.size() << "\n";
    //             assert(calc(vec[i], vec[j]) == sub.size());
    //         }
    //     }
    // }
        int q;
    std::cin >> q;
        while (q--) {
        int p;
        std::cin >> p;
                auto [x, y] = mp[p];
        x = id[x];
        y = id[y];
        std::cout << x << " " << y << std::endl;
    }
        return 0;
}