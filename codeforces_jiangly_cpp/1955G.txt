#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector a(n, std::vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> a[i][j];
        }
    }
    std::vector dp(n, std::vector<int>(m));
    auto check = [&](int d) {
        dp.assign(n, std::vector(m, 0));
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (a[i][j] % d == 0) {
                    if (i) {
                        dp[i][j] |= dp[i - 1][j];
                    }
                    if (j) {
                        dp[i][j] |= dp[i][j - 1];
                    }
                }
            }
        }
        return dp[n - 1][m - 1];
    };
        int ans = 0;
    for (int d = 1; d * d <= a[0][0]; d++) {
        if (a[0][0] % d == 0) {
            if (check(d)) {
                ans = std::max(ans, d);
            }
            if (check(a[0][0] / d)) {
                ans = std::max(ans, a[0][0] / d);
            }
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}