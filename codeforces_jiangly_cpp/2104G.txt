#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 struct DSU {
    std::vector<std::pair<int &, int>> his;
        int n;
    std::vector<int> f, g, bip;
        DSU(int n_) : n(n_), f(n, -1), g(n), bip(n, 1) {}
        std::pair<int, int> find(int x) {
        if (f[x] < 0) {
            return {x, 0};
        }
        auto [u, v] = find(f[x]);
        return {u, v ^ g[x]};
    }
        void set(int &a, int b) {
        his.emplace_back(a, a);
        a = b;
    }
        void merge(int a, int b, int &ans) {
        auto [u, xa] = find(a);
        auto [v, xb] = find(b);
        int w = xa ^ xb ^ 1;
        if (u == v) {
            if (bip[u] && w) {
                set(bip[u], 0);
                ans--;
            }
            return;
        }
        if (f[u] > f[v]) {
            std::swap(u, v);
        }
        ans -= bip[u];
        ans -= bip[v];
        set(bip[u], bip[u] && bip[v]);
        set(f[u], f[u] + f[v]);
        set(f[v], u);
        set(g[v], w);
        ans += bip[u];
    }
        int timeStamp() {
        return his.size();
    }
        void rollback(int t) {
        while (his.size() > t) {
            auto [x, y] = his.back();
            x = y;
            his.pop_back();
        }
    }
};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
        std::vector<int> g(n);
    for (int i = 0; i < n; i++) {
        std::cin >> g[i];
        g[i]--;
    }
        const int N = 4 << std::__lg(q);
    std::vector<std::vector<std::array<int, 2>>> edges(N);
        auto add = [&](this auto &&self, int p, int l, int r, int x, int y, std::array<int, 2> e) {
        if (l >= y || r <= x) {
            return;
        }
        if (l >= x && r <= y) {
            edges[p].push_back(e);
            return;
        }
        int m = (l + r) / 2;
        self(2 * p, l, m, x, y, e);
        self(2 * p + 1, m, r, x, y, e);
    };
        std::vector<int> t(n), k(q);
    for (int i = 0; i < q; i++) {
        int x, y;
        std::cin >> x >> y >> k[i];
        x--;
        y--;
        add(1, 0, q, t[x], i, {x, g[x]});
        g[x] = y;
        t[x] = i;
    }
    for (int x = 0; x < n; x++) {
        add(1, 0, q, t[x], q, {x, g[x]});
    }
        std::vector<int> ans(q);
    DSU dsu(n);
    auto dfs = [&](this auto &&self, int p, int l, int r, int res) -> void {
        int t = dsu.timeStamp();
        int ores = res;
                for (auto [x, y] : edges[p]) {
            dsu.merge(x, y, res);
        }
        if (r - l == 1) {
            if (k[l] % 3 != 2) {
                ans[l] = k[l] % 3;
            } else {
                ans[l] = (n - res) % 2 ? 2 : 1;
            }
        } else {
            int m = (l + r) / 2;
            self(2 * p, l, m, res);
            self(2 * p + 1, m, r, res);
        }
        res = ores;
        dsu.rollback(t);
    };
    dfs(1, 0, q, n);
        for (int i = 0; i < q; i++) {
        std::cout << ans[i] << "\n";
    }
        return 0;
}