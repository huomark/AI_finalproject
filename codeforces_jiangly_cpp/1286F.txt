#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<i64> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<bool> good(1 << n);
        for (int s = 1; s < (1 << n); s++) {
        std::vector<i64> b;
        i64 sum = 0;
        for (int i = 0; i < n; i++) {
            if (s >> i & 1) {
                b.push_back(a[i]);
                sum += a[i];
            }
        }
        const int m = b.size();
        const int h = m / 2;
                if ((sum + m - 1) & 1) {
            continue;
        }
                i64 L = (sum - m + 1) / 2;
        i64 R = (sum + m - 1) / 2;
                std::vector<std::pair<i64, int>> l, r;
        auto dfs = [&](auto &self, int i, int goal, int mask, i64 x, auto &v) {
            if (i == goal) {
                v.emplace_back(x, mask);
                return;
            }
            self(self, i + 1, goal, mask, x, v);
            self(self, i + 1, goal, mask | 1 << i, x + b[i], v);
        };
        dfs(dfs, 0, h, 0, 0, l);
        dfs(dfs, h, m, 0, 0, r);
        std::sort(l.begin(), l.end());
        std::sort(r.begin(), r.end());
        for (int i = 0, j = r.size() - 1; i < l.size(); i++) {
            while (j >= 0 && l[i].first + r[j].first > R) {
                j--;
            }
            for (int k = j; k >= 0 && l[i].first + r[k].first >= L; k--) {
                i64 mask = l[i].second | r[k].second;
                if (m == 1 || (mask != 0 && mask != (1 << m) - 1)) {
                    good[s] = true;
                    break;
                }
            }
            if (good[s]) {
                break;
            }
        }
    }
        std::vector<int> dp(1 << n);
    for (int s = 1; s < (1 << n); s++) {
        for (int t = s; t; t = (t - 1) & s) {
            if (good[t]) {
                dp[s] = std::max(dp[s], dp[s ^ t] + 1);
            }
        }
    }
    std::cout << n - dp.back() << "\n";
        return 0;
}