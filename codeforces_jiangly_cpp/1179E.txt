#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 std::mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());
 // std::vector<std::vector<i64>> f;
 i64 query(int i, i64 x) {
    std::cout << "? " << i + 1 << " " << x << std::endl;
    // std::cerr << "> " << std::lower_bound(f[i].begin(), f[i].end(), x) - f[i].begin() << "\n";
    // return std::lower_bound(f[i].begin(), f[i].end(), x) - f[i].begin();
    i64 ans;
    std::cin >> ans;
    return ans;
}
 i64 search(int i, i64 xl, i64 xr, i64 goal) {
    // assert(query(i, xl) <= goal);
    // assert(query(i, xr) >= goal);
    while (true) {
        i64 xm = (xl + xr) / 2;
        i64 v = query(i, xm);
        if (v == goal) {
            return xm;
        }
        if (v < goal) {
            xl = xm + 1;
        } else {
            xr = xm - 1;
        }
    }
    return -1;
}
 constexpr i64 inf = 1E18;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    i64 L;
    std::cin >> n >> L;
        // f.resize(n);
    // for (int i = 0; i < n; i++) {
    //     f[i].resize(L);
    //     for (int j = 0; j < L; j++) {
    //         f[i][j] = rng() % (inf - L + 1);
    //     }
    //     std::sort(f[i].begin(), f[i].end());
    //     for (int j = 0; j < L; j++) {
    //         f[i][j] += j;
    //     }
    // }
        std::vector<int> a(n);
    std::iota(a.begin(), a.end(), 0);
        std::vector<i64> l(n), r(n);
        auto partition = [&](auto &self, auto a, i64 v, int k, i64 xl, i64 xr) -> std::tuple<i64, std::vector<int>, std::vector<int>> {
        // if (k == 0) {
        //     return {xr, {}, a};
        // }
        // if (k == a.size()) {
        //     return {xl, a, {}};
        // }
        int i = rng() % a.size();
        i64 x = search(a[i], xl, xr, v);
        int n = a.size();
        std::vector<int> f(n);
        for (int j = 0; j < n; j++) {
            i64 vj = query(a[j], x);
            if (vj >= v) {
                f[j]--;
            }
            if (vj <= v) {
                f[j]++;
            }
        }
        std::vector<int> ord(n);
        std::iota(ord.begin(), ord.end(), 0);
        std::sort(ord.begin(), ord.end(),
            [&](int i, int j) {
                return f[i] < f[j];
            });
        if (f[ord[k]] < 0) {
            std::vector<int> b;
            for (int j = 0; j < n; j++) {
                if (f[j] < 0) {
                    b.push_back(a[j]);
                }
            }
            auto [xm, al, ar] = self(self, b, v, k, xl, x);
            for (int j = 0; j < n; j++) {
                if (f[j] >= 0) {
                    ar.push_back(a[j]);
                }
            }
            return {xm, al, ar};
        } else if (f[ord[k - 1]] > 0) {
            std::vector<int> b;
            for (int j = 0; j < n; j++) {
                if (f[j] > 0) {
                    b.push_back(a[j]);
                }
            }
            auto [xm, al, ar] = self(self, b, v, k - (n - b.size()), x, xr);
            for (int j = 0; j < n; j++) {
                if (f[j] <= 0) {
                    al.push_back(a[j]);
                }
            }
            return {xm, al, ar};
        } else {
            std::vector<int> al, ar;
            for (int i = 0; i < n; i++) {
                if (i < k) {
                    al.push_back(a[ord[i]]);
                } else {
                    ar.push_back(a[ord[i]]);
                }
            }
            return {x, al, ar};
        }
    };
        auto work = [&](auto &self, auto a, int vl, i64 xl, i64 xr) {
        if (a.size() == 1) {
            int i = a[0];
            l[i] = xl;
            r[i] = xr;
            return;
        }
        int vr = a.size() + vl;
        int vm = (vl + vr) / 2;
        auto [xm, al, ar] = partition(partition, a, L / n * vm, vm - vl, xl, xr);
        self(self, al, vl, xl, xm);
        self(self, ar, vm, xm, xr);
    };
    work(work, a, 0, 0LL, inf);
        std::cout << "!" << std::endl;
    for (int i = 0; i < n; i++) {
        std::cout << l[i] << " " << r[i] << std::endl;
    }
        return 0;
}