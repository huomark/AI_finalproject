#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 using i128 = __int128;
using u128 = unsigned __int128;
 using Bitset = std::vector<u64>;
 Bitset get(std::string s) {
    int n = s.size();
    Bitset a((n + 63) / 64);
    for (int i = 0; i < a.size(); i++) {
        for (int j = i * 64; j < (i + 1) * 64 && j < n; j++) {
            a[i] |= u64(s[j] - '0') << (j - i * 64);
        }
    }
    return a;
}
 bool get(const Bitset &b, int i) {
    return b[i / 64] >> (i % 64) & 1;
}
 Bitset &operator^=(Bitset &a, const Bitset &b) {
    assert(a.size() == b.size());
    for (int i = 0; i < a.size(); i++) {
        a[i] ^= b[i];
    }
    return a;
}
 std::vector<Bitset> work(std::string s) {
    int n = s.size();
    int m = n >> __builtin_ctz(n);
        std::vector<Bitset> a(m);
        auto add = [&](Bitset b) {
        for (int i = 0; i < m; i++) {
            if (get(b, i)) {
                if (a[i].empty()) {
                    for (int j = i + 1; j < m; j++) {
                        if (!a[j].empty() && get(b, j)) {
                            b ^= a[j];
                        }
                    }
                    for (int j = 0; j < i; j++) {
                        if (!a[j].empty() && get(a[j], i)) {
                            a[j] ^= b;
                        }
                    }
                    a[i] = std::move(b);
                    return;
                }
                b ^= a[i];
            }
        }
    };
        for (int i = 0; i < n; i += m) {
        Bitset b = get(s.substr(i, m));
        add(b);
    }
        return a;
}
 void solve() {
    int n;
    std::cin >> n;
        std::string s, t;
    std::cin >> s >> t;
        if (work(s) == work(t)) {
        std::cout << "Yes\n";
    } else {
        std::cout << "No\n";
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}