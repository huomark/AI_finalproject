#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> siz(n), dep(n), p(n), in(n), ord(n);
    int cur = 0;
    auto dfs = [&](this auto &&self, int x) -> void {
        siz[x] = 1;
        in[x] = cur++;
        ord[in[x]] = x;
        for (auto y : adj[x]) {
            if (y == p[x]) {
                continue;
            }
            p[y] = x;
            dep[y] = dep[x] + 1;
            self(y);
            siz[x] += siz[y];
        }
    };
    p[0] = -1;
    dfs(0);
        auto find = [&](this auto &&self, int x) -> int {
        for (auto y : adj[x]) {
            if (y == p[x] || 2 * siz[y] <= n) {
                continue;
            }
            return self(y);
        }
        return x;
    };
    int rt = find(0);
        dep[rt] = 0;
    p[rt] = -1;
    cur = 0;
    dfs(rt);
        int x = -1;
    for (int i = 0; i < n; i++) {
        if (i != rt && (x == -1 || siz[x] + dep[x] > siz[i] + dep[i])) {
            x = i;
        }
    }
        std::cout << x + 1 << " " << p[x] + 1 << "\n";
        std::vector<int> ans(n);
    ord.erase(ord.begin() + in[x]);
    for (int i = 0; i < n / 2; i++) {
        ans[ord[i]] = ans[ord[i + n / 2]] = i + 1;
    }
    if (x < p[x]) {
        std::swap(ans[x], ans[p[x]]);
    }
    for (int i = 0; i < n; i++) {
        std::cout << ans[i] << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}