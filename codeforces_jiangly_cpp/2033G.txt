#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        const int logn = std::__lg(n);
    std::vector g(logn + 1, std::vector<int>(n));
    std::vector p(logn + 1, std::vector<int>(n, -1));
    std::vector<int> dep(n), h(n);
    auto dfs = [&](this auto &&self, int x) -> void {
        int f[2] {};
        for (auto y : adj[x]) {
            if (y == p[0][x]) {
                continue;
            }
            dep[y] = dep[x] + 1;
            p[0][y] = x;
            self(y);
            int v = h[y] + 1;
            if (v > f[0]) {
                f[1] = f[0];
                f[0] = v;
            } else if (v > f[1]) {
                f[1] = v;
            }
        }
        h[x] = f[0];
        for (auto y : adj[x]) {
            if (y == p[0][x]) {
                continue;
            }
            g[0][y] = f[f[0] == 1 + h[y]] + 1;
        }
    };
    dfs(0);
        for (int i = 0; i < logn; i++) {
        for (int x = 0; x < n; x++) {
            if ((2 << i) <= dep[x]) {
                p[i + 1][x] = p[i][p[i][x]];
                g[i + 1][x] = std::max(g[i][x], g[i][p[i][x]] + (1 << i));
            }
        }
    }
        int q;
    std::cin >> q;
        for (int i = 0; i < q; i++) {
        int v, k;
        std::cin >> v >> k;
        v--;
                int ans = h[v];
        k = std::min(k, dep[v]);
        int len = 0;
        for (int j = logn; j >= 0; j--) {
            if (k >> j & 1) {
                ans = std::max(ans, g[j][v] + len);
                v = p[j][v];
                len += (1 << j);
            }
        }
        std::cout << ans << " \n"[i == q - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}