#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int floorSqrt(i64 n) {
    int x = std::sqrt(n);
    if (1LL * x * x > n) {
        x--;
    }
    return x;
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<std::array<int, 2>> a;
    std::vector<int> x(n), r(n);
    for (int i = 0; i < n; i++) {
        std::cin >> x[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> r[i];
    }
        for (int i = 0; i < n; i++) {
        for (int j = -r[i]; j <= r[i]; j++) {
            int y = floorSqrt(1LL * r[i] * r[i] - 1LL * j * j);
            a.push_back({x[i] + j, y});
        }
    }
        std::sort(a.begin(), a.end());
    i64 ans = 0;
    for (int l = 0, r = 0; l < a.size(); l = r) {
        while (r < a.size() && a[l][0] == a[r][0]) {
            r++;
        }
        int y = 0;
        for (int i = l; i < r; i++) {
            y = std::max(y, a[i][1]);
        }
        ans += 2 * y + 1;
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}