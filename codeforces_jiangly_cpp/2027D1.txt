#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
 constexpr int inf = 1E9;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n), b(m);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < m; i++) {
        std::cin >> b[i];
    }
        int maxa = *std::max_element(a.begin(), a.end());
        if (maxa > b[0]) {
        std::cout << -1 << "\n";
        return;
    }
        std::vector<i64> pre(n + 1);
    for (int i = 0; i < n; i++) {
        pre[i + 1] = pre[i] + a[i];
    }
        std::vector<int> dp(n + 1, inf);
    dp[0] = 0;
    for (int k = 0; k < m; k++) {
        for (int i = 1, j = 0; i <= n; i++) {
            while (pre[i] - pre[j] > b[k]) {
                j++;
            }
            dp[i] = std::min(dp[i], dp[j] + m - k - 1);
        }
    }
    std::cout << dp[n] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}