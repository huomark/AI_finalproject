#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n, k;
    i64 x;
    std::cin >> n >> k >> x;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        i64 sum = std::accumulate(a.begin(), a.end(), 0LL);
        i64 ans = 0;
    int t = std::min<i64>(k - 1, (x - 1) / sum);
    ans += 1LL * t * n;
    i64 cur = sum * t;
    for (int i = 0; i <= n; i++) {
        if (cur < x) {
            ans++;
        }
        if (i < n) {
            cur += a[n - 1 - i];
        }
    }
    ans = 1LL * n * k + 1 - ans;
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}