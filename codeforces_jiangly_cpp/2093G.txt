#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int N = 200000 * 31;
 int tot;
 int trie[N][2];
int cnt[N];
 int newNode() {
    int x = ++tot;
    trie[x][0] = trie[x][1] = 0;
    cnt[x] = 0;
    return x;
}
 void init() {
    tot = 0;
    newNode();
}
 void add(int x, int t) {
    int o = 1;
    for (int i = 29; i >= 0; i--) {
        int &p = trie[o][x >> i & 1];
        if (!p) {
            p = newNode();
        }
        o = p;
        cnt[o] += t;
    }
}
 int query(int x) {
    int o = 1;
    int ans = 0;
    for (int i = 29; i >= 0; i--) {
        int d = x >> i & 1;
        if (cnt[trie[o][d ^ 1]]) {
            d ^= 1;
            ans |= 1 << i;
        }
        o = trie[o][d];
    }
    return ans;
}
 void solve() {
    int n, k;
    std::cin >> n >> k;
        init();
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        int ans = n + 1;
        for (int i = 0, j = 0; i < n; i++) {
        add(a[i], 1);
        while (j <= i && query(a[i]) >= k) {
            ans = std::min(ans, i - j + 1);
            add(a[j], -1);
            j++;
        }
    }
        if (ans > n) {
        ans = -1;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}