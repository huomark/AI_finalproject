#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
std::vector<int> minp, primes, ps;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
    ps.resize(n + 1);
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
    for (int i = 2; i <= n; i++) {
        ps[i] = ps[i / minp[i]] + 1;
    }
}
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(m);
    for (int i = 0; i < m; i++) {
        std::cin >> a[i];
    }
        std::sort(a.begin(), a.end(), std::greater());
        int mx = *std::max_element(ps.begin() + 1, ps.begin() + n + 1);
    if (m < mx + 1) {
        std::cout << -1 << "\n";
        return;
    }
    for (int i = 1; i <= n; i++) {
        std::cout << a[ps[i]] << " \n"[i == n];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(1E5);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}