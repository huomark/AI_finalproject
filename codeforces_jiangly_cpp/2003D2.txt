#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        int maxa = 0;
    int maxb = 0;
        std::vector<int> A(n), B(n);
    for (int i = 0; i < n; i++) {
        int l;
        std::cin >> l;
                std::vector<int> cnt(l + 2);
        for (int j = 0; j < l; j++) {
            int a;
            std::cin >> a;
                        if (a <= l + 1) {
                cnt[a]++;
            }
        }
        int a = 0;
        while (cnt[a] > 0) {
            a++;
        }
        maxa = std::max(maxa, a);
        int b = a + 1;
        while (cnt[b] > 0) {
            b++;
        }
        maxb = std::max(maxb, b);
        A[i] = a;
        B[i] = b;
    }
        std::vector<int> cnt(maxb + 1);
    for (int i = 0; i < n; i++) {
        cnt[A[i]]++;
    }
        std::vector<std::vector<int>> adj(maxb + 1);
    for (int i = 0; i < n; i++) {
        adj[A[i]].push_back(B[i]);
    }
        std::vector<int> dp(maxb + 1);
    for (int x = maxb; x >= 0; x--) {
        dp[x] = x;
        for (auto y : adj[x]) {
            dp[x] = std::max(dp[x], dp[y]);
        }
        if (cnt[x] > 1) {
            maxa = std::max(maxa, dp[x]);
        }
    }
        i64 ans = 0;
    for (int x = 0; x <= maxb && x <= m; x++) {
        ans += std::max(dp[x], maxa);
    }
    if (maxb < m) {
        ans += 1LL * (maxb + 1 + m) * (m - maxb) / 2;
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}