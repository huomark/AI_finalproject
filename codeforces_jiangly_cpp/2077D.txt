#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> ans, tmp;
        for (int d = 29; d >= 0; d--) {
        i64 sum = 0;
        int x = -1;
        for (int i = 0; i < n; i++) {
            if ((1 << d) <= a[i] && a[i] < (2 << d)) {
                x = std::max(x, a[i]);
            }
            if (a[i] < (2 << d)) {
                sum += a[i];
            }
        }
                if (x == -1 || sum <= 2 * x) {
            continue;
        }
                tmp.clear();
        for (auto v : a) {
            if (v > x) {
                continue;
            }
            while (!tmp.empty() && v > tmp.back() && sum - tmp.back() > 2 * x) {
                sum -= tmp.back();
                tmp.pop_back();
            }
            tmp.push_back(v);
        }
        ans = std::max(ans, tmp);
    }
        if (ans.empty()) {
        std::cout << -1 << "\n";
        return;
    }
    std::cout << ans.size() << "\n";
    for (int i = 0; i < ans.size(); i++) {
        std::cout << ans[i] << " \n"[i == ans.size() - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}