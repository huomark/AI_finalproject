#include <bits/stdc++.h>
 using i64 = long long;
 constexpr int N = 1000000;
constexpr int P = 1000000007;
 i64 f[N + 1];
std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
 void solve() {
    int n;
    std::cin >> n;
        std::cout << f[n] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(N);
        for (auto p : primes) {
        for (int i = 1; i * p <= N; i++) {
            f[i * p] += (p - i % p) % p;
            if ((i + 1) * p <= N) {
                f[(i + 1) * p] -= (p - i % p) % p;
            }
        }
    }
    for (int i = 1; i <= N; i++) {
        f[i] += f[i - 1];
    }
    for (int i = 1; i <= N; i++) {
        f[i] += 2 * ((i & 4) == 4);
    }
        for (int i = 1; i <= N; i++) {
        f[i] += f[i - 1];
        f[i] %= P;
    }
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}