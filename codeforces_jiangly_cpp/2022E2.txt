#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
// TODO: Dynamic ModInt
 template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
        template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x(norm(x_ % T {P})) {}
        constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
        constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
        friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
        friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
 template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 constexpr u32 P = 1000000007;
using Z = ModInt<P>;
 constexpr int N = 2E5;
 int f[N];
int e[N];
 int find(int x) {
    if (x == f[x]) {
        return x;
    }
    int y = f[x];
    f[x] = find(y);
    e[x] ^= e[y];
    return f[x];
}
 void solve() {
    int n, m, k, q;
    std::cin >> n >> m >> k >> q;
        std::fill(e, e + n + m, 0);
    std::iota(f, f + n + m, 0);
        bool ok = true;
        std::vector<Z> pw(n + m + 1);
    pw[0] = 1;
    for (int i = 1; i <= n + m; i++) {
        pw[i] = pw[i - 1] * (1 << 30);
    }
        int comp = n + m;
        auto answer = [&]() {
        if (ok) {
            std::cout << pw[comp - 1] << "\n";
        } else {
            std::cout << 0 << "\n";
        }
    };
        for (int i = 0; i < k + q; i++) {
        if (i >= k) {
            answer();
        }
        int x, y, v;
        std::cin >> x >> y >> v;
        x--;
        y--;
        y += n;
        int a = find(x);
        int b = find(y);
        v ^= e[x] ^ e[y];
        if (a == b) {
            if (v) {
                ok = false;
            }
        } else {
            f[b] = a;
            e[b] = v;
            comp--;
        }
    }
    answer();
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}