#include <bits/stdc++.h>
 using i64 = long long;
template<class T>
constexpr T power(T a, i64 b) {
    T res {1};
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 constexpr i64 mul(i64 a, i64 b, i64 p) {
    i64 res = a * b - i64(1.L * a * b / p) * p;
    res %= p;
    if (res < 0) {
        res += p;
    }
    return res;
}
 template<i64 P>
struct MInt {
    i64 x;
    constexpr MInt() : x {0} {}
    constexpr MInt(i64 x) : x {norm(x % getMod())} {}
        static i64 Mod;
    constexpr static i64 getMod() {
        if (P > 0) {
            return P;
        } else {
            return Mod;
        }
    }
    constexpr static void setMod(i64 Mod_) {
        Mod = Mod_;
    }
    constexpr i64 norm(i64 x) const {
        if (x < 0) {
            x += getMod();
        }
        if (x >= getMod()) {
            x -= getMod();
        }
        return x;
    }
    constexpr i64 val() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(getMod() - x);
        return res;
    }
    constexpr MInt inv() const {
        return power(*this, getMod() - 2);
    }
    constexpr MInt &operator*=(MInt rhs) & {
        if (getMod() < (1ULL << 31)) {
            x = x * rhs.x % int(getMod());
        } else {
            x = mul(x, rhs.x, getMod());
        }
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) & {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
    friend constexpr bool operator<(MInt lhs, MInt rhs) {
        return lhs.val() < rhs.val();
    }
};
 template<>
i64 MInt<0>::Mod = 998244353;
 constexpr i64 P = i64(1E18) + 9;
using Z = MInt<P>;
constexpr Z B = 125796162171LL;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> s(n * (n + 1) / 2 - 1);
        Z sum = 0;
    i64 tot = 0;
    for (auto &x : s) {
        std::cin >> x;
        sum += power(B, x);
        tot += x;
    }
        std::vector<int> ans;
    int need = ((n + 1) / 2);
    std::sort(s.begin(), s.end());
    std::vector<int> odd;
    for (int i = 0, j = 0; i < s.size(); i = j) {
        while (j < s.size() && s[i] == s[j]) {
            j++;
        }
        if ((j - i) % 2 == 1) {
            odd.push_back(s[i]);
        }
    }
        auto check = [&](const std::vector<int> &a, int missing) {
        Z res = 0;
        Z suf = 0;
        for (auto x : a) {
            suf = (suf + 1) * power(B, x);
            res += suf;
        }
        if (res == sum + power(B, missing)) {
            ans = a;
        }
    };
        std::sort(odd.begin(), odd.end());
    std::vector<int> a;
    a.reserve(n);
    if (odd.size() < need) {
        std::reverse(odd.begin(), odd.end());
        for (int i = 0; i <= odd.size(); i++) {
            if (n % 2 == 1 && i == odd.size()) {
                continue;
            }
            i64 sum = 0;
            for (int j = 0; j < odd.size(); j++) {
                int k = j + (j >= i);
                sum += 1LL * (k + 1) * (n - k) * odd[j];
                if (k > 0) {
                    sum -= 1LL * k * (n - k + 1) * odd[j];
                }
            }
            int coef = (i + 1) * (n - i);
            if (i > 0) {
                coef -= i * (n - i + 1);
            }
            assert(coef > 1);
            int missing = (tot - sum) / (coef - 1);
            if (i > 0 && missing > odd[i - 1]) {
                continue;
            }
            if (i < odd.size() && missing < odd[i]) {
                continue;
            }
            a.clear();
            int lst = 0;
            for (int j = 0; j < odd.size() + 1; j++) {
                int k = odd.size() - j;
                int v;
                if (i == k) {
                    v = missing;
                } else {
                    v = odd[k - (k > i)];
                }
                if (lst == 0) {
                    a.push_back(n % 2 == 1 ? v : v / 2);
                } else {
                    a.push_back((v - lst) / 2);
                }
                lst = v;
            }
            std::reverse(a.begin(), a.end());
            for (int i = a.size(); i < n; i++) {
                a.push_back(a[n - 1 - i]);
            }
            check(a, missing);
        }
        if (ans.empty()) {
            std::multiset mset(s.begin(), s.end());
            a.clear();
            for (int i = 1; i < odd.size(); i++) {
                a.push_back((odd[i - 1] - odd[i]) / 2);
            }
            for (int i = 0; i < a.size(); i++) {
                int s = 0;
                for (int j = i; j < a.size(); j++) {
                    s += a[j];
                    mset.extract(s);
                    mset.extract(s);
                }
            }
            int v = *mset.begin();
            a.push_back(v);
            a.push_back(odd.back() - 2 * v);
            for (int i = a.size(); i < n; i++) {
                a.push_back(a[n - 1 - i]);
            }
            check(a, a[(n - 1) / 2]);
        }
    } else {
        for (int i = 0; i < odd.size(); i++) {
            int lst = 0;
            a.clear();
            for (int j = 0; j < odd.size(); j++) {
                if (i == j) {
                    continue;
                }
                if (lst == 0) {
                    a.push_back(n % 2 == 1 ? odd[j] : odd[j] / 2);
                } else {
                    a.push_back((odd[j] - lst) / 2);
                }
                lst = odd[j];
            }
            std::reverse(a.begin(), a.end());
            for (int i = a.size(); i < n; i++) {
                a.push_back(a[n - 1 - i]);
            }
            check(a, odd[i]);
        }
    }
    assert(!ans.empty());
    for (int i = 0; i < ans.size(); i++) {
        std::cout << ans[i] << " \n"[i == ans.size() - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}