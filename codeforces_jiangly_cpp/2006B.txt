#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    i64 w;
    std::cin >> n >> w;
        std::vector<int> p(n);
    std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
        adj[p[i]].push_back(i);
    }
        int cur = 0;
        std::vector<std::vector<int>> f(n);
    std::vector<int> cnt(n);
    std::vector<i64> dis(n);
    auto dfs = [&](auto &&self, int x) -> void {
        cur++;
        for (auto y : adj[x]) {
            f[y].push_back(cur - 1);
            cnt[cur - 1]++;
            self(self, y);
            f[y].push_back(cur - 1);
            cnt[cur - 1]++;
        }
    };
    dfs(dfs, 0);
        i64 sum = 0;
    int tot = n;
    for (int i = 1; i < n; i++) {
        int x;
        i64 y;
        std::cin >> x >> y;
        x--;
        for (auto j : f[x]) {
            cnt[j]--;
            dis[j] += y;
            if (cnt[j] == 0) {
                tot--;
            }
        }
        sum += y;
        std::cout << w * tot + sum * (2 - tot) << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}