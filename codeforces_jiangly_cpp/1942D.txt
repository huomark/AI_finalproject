#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector a(n + 1, std::vector<i64>(n + 1));
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j <= n; j++) {
            std::cin >> a[i][j];
        }
        for (int j = n; j > i; j--) {
            a[i][j] -= a[i][j - 1];
        }
    }
        std::vector dp(n + 1, std::vector<i64>(n + 1, -inf));
    for (int i = 0; i <= n; i++) {
        dp[n][i] = 0;
    }
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j <= i; j++) {
            dp[i][j] = std::max(dp[i + 1][j] + a[j][i + 1], dp[i + 1][i + 1]);
        }
    }
        std::priority_queue<std::tuple<i64, int, int>> q;
    q.emplace(dp[0][0], 0, 0);
        for (int t = 1; t <= k; t++) {
        auto [x, i, j] = q.top();
        q.pop();
        i64 p = x - dp[i][j];
        std::cout << x << " \n"[t == k];
        while (i < n) {
            if (dp[i][j] == dp[i + 1][i + 1]) {
                q.emplace(p + dp[i + 1][j] + a[j][i + 1], i + 1, j);
                j = i + 1;
            } else {
                q.emplace(p + dp[i + 1][i + 1], i + 1, i + 1);
                p += a[j][i + 1];
            }
            i++;
        }
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}