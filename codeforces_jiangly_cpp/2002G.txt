#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector d(n - 1, std::vector<int>(n));
    std::mt19937 rng;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> d[i][j];
        }
    }
    std::vector r(n, std::vector<int>(n - 1));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            std::cin >> r[i][j];
        }
    }
        const int h = 2 * (n - 1) / 3;
    int ans = 0;
    std::vector<std::vector<i64>> f(n);
    auto dfs1 = [&](auto self, int x, int y, i64 mask) -> void {
        if (x + y == h) {
            f[x].push_back(mask);
            return;
        }
        if (x + 1 < n) {
            self(self, x + 1, y, mask);
            if (~mask >> d[x][y] & 1) {
                self(self, x + 1, y, mask | 1LL << d[x][y]);
            }
        }
        if (y + 1 < n) {
            self(self, x, y + 1, mask);
            if (~mask >> r[x][y] & 1) {
                self(self, x, y + 1, mask | 1LL << r[x][y]);
            }
        }
    };
    dfs1(dfs1, 0, 0, 0LL);
        for (int x = 0; x < n; x++) {
        std::sort(f[x].begin(), f[x].end());
        f[x].erase(std::unique(f[x].begin(), f[x].end()), f[x].end());
    }
        auto dfs2 = [&](auto self, int x, int y, i64 mask) -> void {
        if (x + y == h) {
            for (int s = ans + 1; s <= 2 * n - 2; s++) {
                i64 need = ((1LL << s) - 1) & ~mask;
                if (std::binary_search(f[x].begin(), f[x].end(), need)) {
                    ans = s;
                } else {
                    break;
                }
            }
            return;
        }
        if (x > 0) {
            self(self, x - 1, y, mask | 1LL << d[x - 1][y]);
        }
        if (y > 0) {
            self(self, x, y - 1, mask | 1LL << r[x][y - 1]);
        }
    };
    dfs2(dfs2, n - 1, n - 1, 0LL);
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}