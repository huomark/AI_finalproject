#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 constexpr int M = 7000;
using B = std::bitset<M + 1>;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
        std::vector<B> singleton(M + 1);
    std::vector<B> extract(M + 1);
    for (int i = 1; i <= M; i++) {
        extract[i].set(i);
        for (int j = 1; j <= i; j++) {
            if (i % j == 0) {
                singleton[i].set(j);
            }
        }
    }
    for (int i = M; i; i--) {
        for (int j = 2 * i; j <= M; j += i) {
            extract[i] ^= extract[j];
        }
    }
        std::vector<B> b(n);
    for (int i = 0; i < q; i++) {
        int o;
        std::cin >> o;
        if (o == 1) {
            int x, v;
            std::cin >> x >> v;
            x--;
            b[x] = singleton[v];
        } else if (o == 2) {
            int x, y, z;
            std::cin >> x >> y >> z;
            x--;
            y--;
            z--;
            b[x] = b[y] ^ b[z];
        } else if (o == 3) {
            int x, y, z;
            std::cin >> x >> y >> z;
            x--;
            y--;
            z--;
            b[x] = b[y] & b[z];
        } else {
            int x, v;
            std::cin >> x >> v;
            x--;
            int ans = (b[x] & extract[v]).count() % 2;
            std::cout << ans;
        }
    }
    std::cout << "\n";
        return 0;
}