#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int inf = 1E9;
 constexpr int dx[] = {1, 0, -1, 0};
constexpr int dy[] = {0, 1, 0, -1};
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<std::string> s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
    }
        std::array<int, 2> S, T;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (s[i][j] == 'S') {
                S = {i, j};
            }
            if (s[i][j] == 'T') {
                T = {i, j};
            }
        }
    }
        std::vector dis(n, std::vector(m, std::array<int, 4> {-1, -1, -1, -1}));
        std::queue<std::array<int, 4>> q[4];
    for (int d = 0; d < 4; d++) {
        q[0].push({0, S[0], S[1], d});
    }
        while (true) {
        std::array<int, 4> fr {inf, -1, -1, -1};
        int K = -1;
        for (int k = 0; k < 4; k++) {
            if (!q[k].empty() && q[k].front() < fr) {
                fr = q[k].front();
                K = k;
            }
        }
        if (fr[0] == inf) {
            break;
        }
        q[K].pop();
        auto [ds, x, y, ld] = fr;
        if (dis[x][y][ld] != -1) {
            continue;
        }
        dis[x][y][ld] = ds;
        for (int d = 0; d < 4; d++) {
            if (d == ld) {
                continue;
            }
            for (int st = 1; st <= 3; st++) {
                int nx = x + dx[d] * st;
                int ny = y + dy[d] * st;
                if (s[nx][ny] == '#') {
                    break;
                }
                q[st].push({ds + st, nx, ny, d});
            }
        }
    }
        int ans = -1;
    for (int ld = 0; ld < 4; ld++) {
        int res = dis[T[0]][T[1]][ld];
        if (res != -1 && (ans == -1 || ans > res)) {
            ans = res;
        }
    }
    std::cout << ans << "\n";
        return 0;
}