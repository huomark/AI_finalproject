#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
    }
        if (std::is_sorted(p.begin(), p.end())) {
        std::cout << n << "\n";
        std::cout << 0 << "\n";
        return;
    }
        int k = n;
    while (k >= 2) {
        auto q = p;
        std::vector<std::pair<int, int>> ans;
        auto work = [&](int i, int j) {
            if (i == j) {
                return;
            }
            assert(i < j && j <= i + k);
            if (j - i < k - (j - i)) {
                for (int t = 0; t < j - i; t++) {
                    ans.emplace_back(i + 1, i);
                }
            } else {
                for (int t = 0; t < k - (j - i); t++) {
                    ans.emplace_back(i, i + 1);
                }
            }
            std::rotate(q.begin() + i, q.begin() + j, q.begin() + i + k);
        };
        if (k == n) {
            int i = std::find(q.begin(), q.end(), 0) - q.begin();
            work(0, i);
        } else {
            for (int i = n - 1; i >= k + 1; i--) {
                int j = std::find(q.begin(), q.end(), i) - q.begin();
                while (j != i) {
                    if (j + k - 1 <= i) {
                        work(j, j + 1);
                        j += k - 1;
                    } else {
                        work(i - k + 1, j + 1);
                        j = i;
                    }
                }
                assert(q[i] == i);
            }
            for (int i = 1; i <= k - 1; i++) {
                if (q[0] != i) {
                    int j = std::find(q.begin(), q.end(), i) - q.begin();
                    work(1, 1 + (j + 1) % k);
                    if (q[k] == 1) {
                        work(1, k);
                        work(0, k - 1);
                        work(1, 2);
                    }
                    assert(q[k - 1] == i);
                    work(0, k - 1);
                }
                if (i > 1) {
                    int j = std::find(q.begin(), q.end(), i - 1) - q.begin();
                    work(1, 1 + (j + 1) % k);
                }
                work(0, 1);
            }
            int j = std::find(q.begin(), q.end(), 1) - q.begin();
            work(1, j);
            if (q[0] == k && k % 2 == 0) {
                for (int i = 0; i < k / 2; i++) {
                    work(0, 1);
                    work(1, 2);
                }
                work(0, 1);
            }
        }
                if (!std::is_sorted(q.begin(), q.end())) {
            k--;
            continue;
        }
                std::cout << k - 1 << "\n";
        std::cout << ans.size() << "\n";
        for (auto [x, y] : ans) {
            std::cout << x + 1 << " " << y + 1 << "\n";
        }
        return;
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}