#include <bits/stdc++.h>
 using i64 = long long;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<int> dp(n + 1);
    dp[0] = 0;
    for (int i = 0; i < n; i++) {
        dp[i + 1] = std::max(dp[i + 1], dp[i] + a[i]);
        for (int j = i + 1; j <= n; j++) {
            dp[j] = std::max(dp[j], dp[i] + (j - i) * (j - i));
        }
    }
        std::vector<std::pair<int, int>> ans;
        int i = n;
    while (i > 0) {
        if (dp[i] == dp[i - 1] + a[i - 1]) {
            i--;
        } else {
            int r = i;
            for (int j = 0; j < i; j++) {
                if (dp[j] + (i - j) * (i - j) == dp[i]) {
                    i = j;
                    break;
                }
            }
            int l = i;
            for (int i = l; i < r; i++) {
                if (a[i] > 0) {
                    ans.emplace_back(i, i + 1);
                }
            }
            auto work = [&](auto self, int l, int r) -> void {
                for (int i = r; i > l + 1; i--) {
                    self(self, l + 1, i);
                    if (l + 1 < i - 1) {
                        ans.emplace_back(l + 1, i - 1);
                    }
                }
                ans.emplace_back(l, r);
            };
            work(work, l, r);
        }
    }
        std::cout << dp[n] << " " << ans.size() << "\n";
    for (auto [l, r] : ans) {
        std::cout << l + 1 << " " << r << "\n";
    }
        return 0;
}