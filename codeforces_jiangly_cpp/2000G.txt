#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 constexpr int inf = 1E9;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        int t0, t1, t2;
    std::cin >> t0 >> t1 >> t2;
        std::vector<std::vector<std::array<int, 3>>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v, l1, l2;
        std::cin >> u >> v >> l1 >> l2;
        u--;
        v--;
        adj[u].push_back({v, l1, l2});
        adj[v].push_back({u, l1, l2});
    }
        std::vector<int> dp(n, -1);
    std::priority_queue<std::pair<int, int>> pq;
    pq.emplace(t0, n - 1);
        while (!pq.empty()) {
        auto [t, x] = pq.top();
        pq.pop();
                if (dp[x] != -1) {
            continue;
        }
        dp[x] = t;
                for (auto [y, l1, l2] : adj[x]) {
            int nt = -1;
            nt = std::max(nt, std::min(t, t1) - l1);
            if (t - l1 >= t2) {
                nt = std::max(nt, t - l1);
            }
            nt = std::max(nt, t - l2);
            if (nt >= 0) {
                pq.emplace(nt, y);
            }
        }
    }
        std::cout << dp[0] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}