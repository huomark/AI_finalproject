#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, m;
    std::cin >> n >> m;
        std::vector<std::vector<std::array<int, 2>>> adj(n);
    for (int i = 0; i < m; i++) {
        int u, v, t;
        std::cin >> u >> v >> t;
        u--;
        v--;
        adj[v].push_back({u, t});
    }
        std::vector<i64> dis(n, -1);
    std::priority_queue<std::pair<i64, int>, std::vector<std::pair<i64, int>>, std::greater<>> pq;
    pq.emplace(0LL, n - 1);
        while (!pq.empty()) {
        auto [d, x] = pq.top();
        pq.pop();
                if (dis[x] != -1) {
            continue;
        }
        dis[x] = d;
                for (auto [y, w] : adj[x]) {
            pq.emplace(d + w, y);
        }
    }
        std::vector<int> dp(n, -1);
    std::deque<std::array<int, 2>> dq;
    for (int i = 0; i < n; i++) {
        if (dis[i] == -1) {
            dq.push_back({i, 0});
        }
    }
        std::vector<int> deg(n);
    for (int x = 0; x < n; x++) {
        for (auto [y, w] : adj[x]) {
            if (dis[x] != -1 && dis[y] == dis[x] + w) {
                deg[y]++;
            }
        }
    }
    while (!dq.empty()) {
        auto [x, d] = dq.front();
        dq.pop_front();
                if (x == n - 1) {
            continue;
        }
        if (dp[x] != -1) {
            continue;
        }
        dp[x] = d;
                for (auto [y, w] : adj[x]) {
            dq.push_back({y, d + 1});
            if (dis[x] != -1 && dis[y] == dis[x] + w) {
                if (--deg[y] == 0) {
                    dq.push_front({y, d});
                }
            }
        }
    }
        if (dp[0] == -1) {
        dp[0] = n + 1;
    }
    std::cout << dp[0] - 1 << "\n";
        return 0;
}