#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n_ = 0) {
        init(n_);
    }
        void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
        void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
        T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};
  void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        auto get = [&](int p) {
        std::vector<int> f(n, -1E9);
        Fenwick<int> fen(n);
        int cnt = 0;
        // std::cerr << "p : " << p << "\n";
        // for (auto x : a) {
        //     std::cerr << x << " ";
        // }
        // std::cerr << "\n";
        for (int i = n - 1; i >= 0; i--) {
            if (a[i] >= p) {
                fen.add(0, -1);
                fen.add(cnt, p + n - fen.sum(cnt + 1));
                cnt++;
            } else if (cnt) {
                int x = fen.select(a[i] + 1 + n);
                fen.add(0, -1);
                if (x < cnt) {
                    fen.add(x, 1);
                }
            }
        }
        cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (a[i] >= p) {
                cnt++;
                f[i] = p + n - fen.sum(cnt);
            }
        }
        // for (auto x : f) {
        //     std::cerr << x << " ";
        // }
        // std::cerr << "\n";
        return f;
    };
        auto check = [&](int p) {
        auto vl = get(p);
        std::reverse(a.begin(), a.end());
        auto vr = get(p);
        std::reverse(vr.begin(), vr.end());
        for (int i = 0; i < n; i++) {
            if (vl[i] + vr[i] >= n - k - 1) {
                return true;
            }
        }
        return false;
    };
        int lo = 1, hi = 1E9;
    while (lo < hi) {
        int x = (lo + hi + 1) / 2;
                if (check(x)) {
            lo = x;
        } else {
            hi = x - 1;
        }
    }
        std::cout << lo << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}