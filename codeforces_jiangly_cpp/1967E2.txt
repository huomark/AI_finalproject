#include <bits/stdc++.h>
 using i64 = long long;
template<class T>
constexpr T power(T a, i64 b) {
    T res {1};
    for (; b; b /= 2, a *= a) {
        if (b % 2) {
            res *= a;
        }
    }
    return res;
}
 constexpr i64 mul(i64 a, i64 b, i64 p) {
    i64 res = a * b - i64(1.L * a * b / p) * p;
    res %= p;
    if (res < 0) {
        res += p;
    }
    return res;
}
 template<i64 P>
struct MInt {
    i64 x;
    constexpr MInt() : x {0} {}
    constexpr MInt(i64 x) : x {norm(x % getMod())} {}
        static i64 Mod;
    constexpr static i64 getMod() {
        if (P > 0) {
            return P;
        } else {
            return Mod;
        }
    }
    constexpr static void setMod(i64 Mod_) {
        Mod = Mod_;
    }
    constexpr i64 norm(i64 x) const {
        if (x < 0) {
            x += getMod();
        }
        if (x >= getMod()) {
            x -= getMod();
        }
        return x;
    }
    constexpr i64 val() const {
        return x;
    }
    constexpr MInt operator-() const {
        MInt res;
        res.x = norm(getMod() - x);
        return res;
    }
    constexpr MInt inv() const {
        return power(*this, getMod() - 2);
    }
    constexpr MInt &operator*=(MInt rhs) & {
        if (getMod() < (1ULL << 31)) {
            x = x * rhs.x % int(getMod());
        } else {
            x = mul(x, rhs.x, getMod());
        }
        return *this;
    }
    constexpr MInt &operator+=(MInt rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr MInt &operator-=(MInt rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr MInt &operator/=(MInt rhs) & {
        return *this *= rhs.inv();
    }
    friend constexpr MInt operator*(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr MInt operator+(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr MInt operator-(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr MInt operator/(MInt lhs, MInt rhs) {
        MInt res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, MInt &a) {
        i64 v;
        is >> v;
        a = MInt(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const MInt &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(MInt lhs, MInt rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(MInt lhs, MInt rhs) {
        return lhs.val() != rhs.val();
    }
    friend constexpr bool operator<(MInt lhs, MInt rhs) {
        return lhs.val() < rhs.val();
    }
};
 template<>
i64 MInt<0>::Mod = 998244353;
 constexpr int P = 998244353;
using Z = MInt<P>;
 struct Comb {
    int n;
    std::vector<Z> _fac;
    std::vector<Z> _invfac;
    std::vector<Z> _inv;
        Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
        void init(int m) {
        m = std::min<i64>(m, Z::getMod() - 1);
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
                for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
        Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
 Z calc(int a, int b, int lo, int hi) {
    std::cerr << a << " " << b << " " << lo << " " << hi << "\n";
    if (a < 0 || b < 0) {
        return 0;
    }
    int na = b - hi;
    int nb = a + b - na;
    return comb.binom(a + b, na) - calc(nb, na, -hi, -lo);
}
 Z countPath(int a, int b, int m) {
    if (b - a < 0 || b - a >= m) {
        return 0;
    }
    int s = a + b;
    // Z ans = comb.binom(s, a);
    Z ans = 0;
    a %= (m + 1);
    for (int i = 0; i <= s; i++) {
        if (i % (m + 1) == a) {
            ans += comb.binom(s, i);
        }
        if ((i + 1) % (m + 1) == a) {
            ans -= comb.binom(s, i);
        }
    }
    // for (int i = 0; a <= s || b <= s; i++) {
    //     // std::cerr << s << " " << a + m << "\n";
    //     ans -= comb.binom(s, a + m);
    //     ans += comb.binom(s, a + m + 1);
    //     a += m + 1;
    //     ans -= comb.binom(s, b + 1);
    //     ans += comb.binom(s, b + 1 + m);
    //     b += m + 1;
    // }
    // ans -= calc(a, b, lo, hi);
    // ans -= calc(b, a, -hi, -lo);
    return ans;
}
 void solve() {
    int n, m, b0;
    std::cin >> n >> m >> b0;
        if (m == 1) {
        if (b0 < m) {
            std::cout << 0 << "\n";
        } else {
            std::cout << 1 << "\n";
        }
        return;
    }
        Z ans = power(Z(m), n);
        if (b0 < n && b0 < m) {
        Z res = 0;
        const Z invm = comb.inv(m);
        if (m > n) {
            Z pw = 1;
            for (int i = b0; i < n; i += 2) {
                int up = (i - b0) / 2;
                res -= (comb.binom(i, up) - comb.binom(i, up - 1)) * pw;
                pw *= (m - 1) * invm * invm;
            }
        } else {
            const int t = (n - 1 - b0) / 2 + 1;
                        // for (int i = b0; i < n; i += 2) {
            //     int up = (i - b0) / 2;
            //     int down = (i + b0) / 2;
            //     // Z coef = pw1[up] * pw0[n - 1 - i];
            //     // for (int j = 0; j <= i; j++) {
            //     //     f[(j - up % M + M) % M] += comb.binom(i, j) * coef;
            //     // }
            //     // std::cerr << i << " " << up << "\n";
            //     // ans -= countPath(up, down, m) * pw1[up] * pw0[n - 1 - i];
            // }
            std::vector<Z> f(2 * t + b0 + 1);
            for (int i = 0; i <= b0; i++) {
                f[i + t] += comb.binom(b0, i);
            }
            Z pw = power(Z(m - 1) * invm * invm, t);
            for (int i = 0; i <= b0 + 2 * t; i++) {
                f[i] -= comb.binom(b0 + 2 * t, i) * pw;
            }
            // for (int i = 0; i < f.size(); i++) {
            //     f[i] *= 4;
            // }
            // std::cerr << "t : " << t << "\n";
            Z invm1 = comb.inv(m - 1);
            for (int i = 0; i + 2 < f.size(); i++) {
                Z v = f[i] * -invm1;
                f[i] = v;
                f[i + 1] -= v * (Z(m) * m - 2 * m + 2);
                f[i + 2] -= v * -(m - 1);
                if ((i + 1) % (m + 1) == t % (m + 1)) {
                    res -= f[i];
                }
                if ((i + 2) % (m + 1) == t % (m + 1)) {
                    res += f[i];
                }
            }
            // for (int i = 0; i < f.size(); i++) {
            //     std::cerr << f[i] << " ";
            // }
            res *= m;
            res *= m;
        }
        res *= power(Z(m), n - 1 - b0);
        // std::cerr << "res : " << res << "\n";
        ans += res;
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}