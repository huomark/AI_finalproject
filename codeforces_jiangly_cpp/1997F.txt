#include <bits/stdc++.h>
 using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
 // TODO: Dynamic ModInt
 template<typename T>
constexpr T power(T a, u64 b) {
    T res {1};
    for (; b != 0; b /= 2, a *= a) {
        if (b % 2 == 1) {
            res *= a;
        }
    }
    return res;
}
 template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return 1ULL * a * b % P;
}
 template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 template<typename U, U P>
requires std::unsigned_integral<U>
struct ModIntBase {
public:
    constexpr ModIntBase() : x {0} {}
        template<typename T>
    requires std::integral<T>
    constexpr ModIntBase(T x_) : x {norm(x_ % T {P})} {}
        constexpr static U norm(U x) {
        if ((x >> (8 * sizeof(U) - 1) & 1) == 1) {
            x += P;
        }
        if (x >= P) {
            x -= P;
        }
        return x;
    }
        constexpr U val() const {
        return x;
    }
        constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = norm(P - x);
        return res;
    }
        constexpr ModIntBase inv() const {
        return power(*this, P - 2);
    }
        constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<P>(x, rhs.val());
        return *this;
    }
        constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
        constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
        friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
        friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
        friend constexpr std::ostream &operator<<(std::ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
        friend constexpr bool operator==(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() == rhs.val();
    }
        friend constexpr bool operator!=(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() != rhs.val();
    }
        friend constexpr bool operator<(ModIntBase lhs, ModIntBase rhs) {
        return lhs.val() < rhs.val();
    }
    private:
    U x;
};
 template<u32 P>
using ModInt = ModIntBase<u32, P>;
 template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
 constexpr u32 P = 998244353;
using Z = ModInt<P>;
  int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, x, m;
    std::cin >> n >> x >> m;
        const int X = 30;
        std::vector<int> fib(X + 1);
    fib[1] = 1;
    for (int i = 2; i <= X; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
        const int M = fib[x] * n;
    std::vector<int> f(M + 1);
    for (int i = 1; i <= M; i++) {
        f[i] = i;
        for (int j = 1; j <= X && fib[j] <= i; j++) {
            f[i] = std::min(f[i], f[i - fib[j]] + 1);
        }
    }
        std::vector dp(n + 1, std::vector<Z>(M + 1));
    dp[0][0] = 1;
    for (int i = 1; i <= x; i++) {
        for (int c = 1; c <= n; c++) {
            for (int j = fib[i]; j <= M; j++) {
                dp[c][j] += dp[c - 1][j - fib[i]];
            }
        }
    }
        Z ans = 0;
    for (int i = 0; i <= M; i++) {
        if (f[i] == m) {
            ans += dp[n][i];
        }
    }
    std::cout << ans << "\n";
        return 0;
}