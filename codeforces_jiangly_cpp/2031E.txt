#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> p(n);
    p[0] = -1;
    std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
        adj[p[i]].push_back(i);
    }
        std::vector<int> dp(n);
    auto dfs = [&](this auto &&self, int x) -> void {
        std::priority_queue<int, std::vector<int>, std::greater<>> a;
        for (auto y : adj[x]) {
            self(y);
            a.push(dp[y]);
        }
        if (a.empty()) {
            dp[x] = 0;
        } else if (a.size() == 1) {
            dp[x] = 1 + a.top();
        } else {
            while (a.size() > 1) {
                int x = a.top();
                a.pop();
                int y = a.top();
                a.pop();
                a.push(y + 1);
            }
            dp[x] = a.top();
        }
    };
    dfs(0);
        std::cout << dp[0] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}