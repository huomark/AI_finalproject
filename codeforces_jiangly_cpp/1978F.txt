#include <bits/stdc++.h>
 using i64 = long long;
 std::vector<int> minp, primes;
 void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
        for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
                for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}
struct DSU {
    std::vector<int> f, siz;
        DSU() {}
    DSU(int n) {
        init(n);
    }
        void init(int n) {
        f.resize(n);
        std::iota(f.begin(), f.end(), 0);
        siz.assign(n, 1);
    }
        int find(int x) {
        while (x != f[x]) {
            x = f[x] = f[f[x]];
        }
        return x;
    }
        bool same(int x, int y) {
        return find(x) == find(y);
    }
        bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        siz[x] += siz[y];
        f[y] = x;
        return true;
    }
        int size(int x) {
        return siz[find(x)];
    }
};
void solve() {
    int n, k;
    std::cin >> n >> k;
        i64 ans = 1LL * n * n;
    DSU dsu(2 * n);
        std::vector<std::pair<int, int>> s;
    for (int i = 0; i < n; i++) {
        int a;
        std::cin >> a;
        if (a > 1) {
            ans -= n - 2;
            if (i == 0 || k >= n) {
                ans -= dsu.merge(2 * i, 2 * i + 1);
            }
            while (a > 1) {
                int p = minp[a];
                while (minp[a] == p) {
                    a /= p;
                }
                s.emplace_back(p, i);
            }
        }
    }
    std::sort(s.begin(), s.end());
        auto work = [&](int x, int y) {
        if (x > y) {
            std::swap(x, y);
        }
        if (y - x <= k) {
            ans -= dsu.merge(2 * x, 2 * y);
        }
        if (x > 0 && y - x <= k) {
            ans -= dsu.merge(2 * x + 1, 2 * y + 1);
        }
        if (x - y + n <= k) {
            ans -= dsu.merge(2 * x, 2 * y + 1);
        }
        if (x > 0 && y - x + n <= k) {
            ans -= dsu.merge(2 * x + 1, 2 * y);
        }
    };
    for (int i = 0, j = 0; i < s.size(); i = j) {
        while (j < s.size() && s[i].first == s[j].first) {
            j++;
        }
        for (int k = i; k + 1 < j; k++) {
            work(s[k].second, s[k + 1].second);
        }
        work(s[i].second, s[j - 1].second);
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        sieve(1E6);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}