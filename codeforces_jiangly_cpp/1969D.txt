#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n, k;
    std::cin >> n >> k;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        std::vector<int> p(n);
    std::iota(p.begin(), p.end(), 0);
    std::sort(p.begin(), p.end(),
        [&](int i, int j) {
            return b[i] < b[j];
        });
        i64 ans = 0;
    std::vector<i64> profit(n + 1);
    for (int i = 0; i < n; i++) {
        profit[i + 1] = profit[i] + std::max(b[p[i]] - a[p[i]], 0);
    }
    i64 sum = 0;
    std::priority_queue<int> pq;
    for (int i = n; i >= 0; i--) {
        if (i < n) {
            pq.push(a[p[i]]);
            sum += a[p[i]];
        }
        while (pq.size() > k) {
            sum -= pq.top();
            pq.pop();
        }
        if (pq.size() == k) {
            ans = std::max(ans, profit[i] - sum);
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}