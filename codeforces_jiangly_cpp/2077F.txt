#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int inf = 1E9;
 void solve() {
    int n, m;
    std::cin >> n >> m;
        std::vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
        i64 ans = 0;
    for (int i = 0; i < n; i++) {
        ans += std::abs(a[i] - b[i]);
    }
        if (n == 1) {
        std::cout << ans << "\n";
        return;
    }
        int M = 1;
    while (M <= m) {
        M *= 2;
    }
        std::vector<int> cnt(M);
    for (int i = 0; i < n; i++) {
        cnt[b[i]]++;
    }
        std::vector<int> lst(M, -1);
    for (int i = 0; i < M; i++) {
        if (cnt[i]) {
            lst[i] = i;
        } else if (i) {
            lst[i] = lst[i - 1];
        }
    }
        std::vector<int> f(M, inf);
    for (int i = 0; i < M; i++) {
        int x = lst[i];
        if (x >= 0) {
            f[i] = i - x;
            int y = cnt[x] >= 2 ? x : x ? lst[x - 1] : -1;
            if (y >= 0) {
                ans = std::min<i64>(ans, 2 * i - x - y);
            }
        }
    }
        for (int i = 1; i < M; i *= 2) {
        for (int j = 0; j < M; j += 2 * i) {
            for (int k = 0; k < i; k++) {
                f[i + j + k] = std::min(f[i + j + k], f[j + k]);
            }
        }
    }
        const int logM = std::__lg(M);
    for (int i = 0; i < M; i++) {
        int x = lst[i];
        if (x >= 0) {
            for (int j = 0; j < logM; j++) {
                if ((i >> j & 1) && x > i - (1 << j)) {
                    ans = std::min<i64>(ans, f[i - (1 << j)] + i - x);
                }
            }
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}