#include <bits/stdc++.h>
 using i64 = long long;
 constexpr i64 inf = 1E18;
 void solve() {
    int n, c;
    std::cin >> n >> c;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<std::array<i64, 2>> dp(n);
    auto dfs = [&](auto &self, int x, int p) -> void {
        dp[x][0] = 0;
        dp[x][1] = a[x];
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
            dp[x][0] += std::max(dp[y][0], dp[y][1]);
            dp[x][1] += std::max(dp[y][0], dp[y][1] - 2 * c);
        }
    };
    dfs(dfs, 0, -1);
        i64 ans = std::max(dp[0][0], dp[0][1]);
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}