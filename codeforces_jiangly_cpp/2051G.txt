#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr int inf = 1E9 + 1;
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int n, q;
    std::cin >> n >> q;
        std::vector<int> a(n), b(n);
    std::vector f(n, std::vector<int>(n));
    for (int i = 0; i < q; i++) {
        int x;
        std::cin >> x;
        x--;
                char ch;
        std::cin >> ch;
        if (ch == '+') {
            a[x]++;
        } else {
            b[x]++;
        }
                for (int y = 0; y < n; y++) {
            f[x][y] = std::max(f[x][y], a[x] - b[y]);
            f[y][x] = std::max(f[y][x], a[y] - b[x]);
        }
    }
        std::vector dp(1 << n, std::vector<int>(n, inf));
    for (int x = 0; x < n; x++) {
        dp[1 << x][x] = 1;
    }
    int ans = inf;
    for (int s = 1; s < (1 << n); s++) {
        for (int x = 0; x < n; x++) {
            if (dp[s][x] == inf) {
                continue;
            }
            if (s == (1 << n) - 1) {
                ans = std::min(ans, dp[s][x] + a[x]);
            }
            for (int y = 0; y < n; y++) {
                if (~s >> y & 1) {
                    int ns = s | 1 << y;
                    dp[ns][y] = std::min(dp[ns][y], dp[s][x] + f[x][y] + 1);
                }
            }
        }
    }
    std::cout << ans << "\n";
        return 0;
}