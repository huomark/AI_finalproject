#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
 constexpr i64 inf = 1E18;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
        std::vector dp(n, std::vector<i64>(n));
    for (int r = 2; r < n; r++) {
        for (int l = r - 2; l >= 0; l--) {
            for (int i = l + 1; i < r; i++) {
                dp[l][r] = std::max(dp[l][r], dp[l + 1][i - 1] + dp[i + 1][r - 1] + a[l] * a[i] * a[r]);
            }
            for (int i = l; i < r; i++) {
                dp[l][r] = std::max(dp[l][r], dp[l][i] + dp[i + 1][r]);
            }
        }
    }
    std::cout << dp[0][n - 1] << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}