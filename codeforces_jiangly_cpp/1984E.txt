#include <bits/stdc++.h>
 using i64 = long long;
 void solve() {
    int n;
    std::cin >> n;
        std::vector<std::vector<int>> adj(n);
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
        std::vector<int> match(n, -1);
    int ans = n;
    auto dfs = [&](auto &&self, int x, int p) -> void {
        for (auto y : adj[x]) {
            if (y == p) {
                continue;
            }
            self(self, y, x);
            if (match[x] == -1 && match[y] == -1) {
                match[x] = y;
                match[y] = x;
                ans--;
            }
        }
    };
    dfs(dfs, 0, -1);
        std::queue<int> q;
    std::vector<int> vis(n);
    for (int i = 0; i < n; i++) {
        if (match[i] == -1) {
            vis[i] = 1;
            q.push(i);
        }
    }
    while (!q.empty()) {
        int x = q.front();
        q.pop();
                for (auto y : adj[x]) {
            int z = match[y];
            assert(z != -1);
            if (!vis[z]) {
                vis[z] = 1;
                q.push(z);
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (adj[i].size() == 1 && !vis[i]) {
            ans++;
            break;
        }
    }
    std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}