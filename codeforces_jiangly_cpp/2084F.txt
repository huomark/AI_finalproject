#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n_ = 0) {
        init(n_);
    }
        void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
        void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
        T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};
 constexpr int inf = 1E9;
struct Max {
    int x = -inf;
};
 Max operator+(const Max &l, const Max &r) {
    return {std::max(l.x, r.x)};
}
 void solve() {
    int n;
    std::cin >> n;
        std::vector<int> a(n), c(n), ia(n), ic(n, -1);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        a[i]--;
    }
    for (int i = 0; i < n; i++) {
        std::cin >> c[i];
        c[i]--;
    }
    for (int i = 0; i < n; i++) {
        ia[a[i]] = i;
        if (c[i] != -1) {
            ic[c[i]] = i;
        }
    }
        Fenwick<Max> fen(n);
    std::vector<int> L(n), R(n, n - 1);
    for (int i = 0; i < n; i++) {
        L[i] = std::max(L[i], fen.sum(ia[i]).x);
        if (ic[i] != -1) {
            L[i] = std::max(L[i], ic[i]);
        }
        fen.add(ia[i], {L[i] + 1});
    }
    fen.init(n);
    for (int i = n - 1; i >= 0; i--) {
        R[i] = std::min(R[i], -fen.sum(n - 1 - ia[i]).x);
        if (ic[i] != -1) {
            R[i] = std::min(R[i], ic[i]);
        }
        fen.add(n - 1 - ia[i], {-(R[i] - 1)});
    }
        for (int i = 0; i < n; i++) {
        if (L[i] > R[i]) {
            std::cout << -1 << "\n";
            return;
        }
    }
        std::vector<std::vector<std::array<int, 2>>> vec(n);
    for (int i = 0; i < n; i++) {
        vec[L[i]].push_back({R[i], i});
    }
    std::priority_queue<std::array<int, 2>, std::vector<std::array<int, 2>>, std::greater<>> pq;
    for (int x = 0; x < n; x++) {
        for (auto [r, i] : vec[x]) {
            pq.push({r, i});
        }
        if (pq.empty()) {
            std::cout << -1 << "\n";
            return;
        }
        auto [r, i] = pq.top();
        pq.pop();
        if (r < x) {
            std::cout << -1 << "\n";
            return;
        }
        c[x] = i;
    }
    for (int i = 0; i < n; i++) {
        std::cout << c[i] + 1 << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}