#include <bits/stdc++.h>
 using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using i128 = __int128;
 void solve() {
    std::string s;
    std::cin >> s;
        int n = s.size();
        int ans = n;
    std::array<int, 26> cnt {};
    for (int i = 0; i < n; i++) {
        cnt[s[i] - 'a'] += i < n / 2 ? 1 : -1;
    }
        int x = 0;
    while (x < n / 2 && s[x] == s[n - 1 - x]) {
        x++;
    }
    if (std::count(cnt.begin(), cnt.end(), 0) == 26) {
        int y = 0;
        while (x + y < n / 2 && s[n / 2 + y] == s[n / 2 - 1 - y]) {
            y++;
        }
        ans = std::min(ans, n / 2 - x - y);
    } else {
        for (int t = 0; t < 2; t++) {
            std::array<int, 26> cnt {};
            for (auto c : s) {
                cnt[c - 'a']++;
            }
            for (auto &x : cnt) {
                x /= 2;
            }
            for (int i = 0; i < n / 2; i++) {
                if (!cnt[s[i] - 'a']--) {
                    ans = std::min(ans, n - x - i);
                    break;
                }
            }
            std::reverse(s.begin(), s.end());
        }
    }
        std::cout << ans << "\n";
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}