#include <bits/stdc++.h>
 using i64 = long long;
template <typename T>
struct Fenwick {
    int n;
    std::vector<T> a;
        Fenwick(int n_ = 0) {
        init(n_);
    }
        void init(int n_) {
        n = n_;
        a.assign(n, T{});
    }
        void add(int x, const T &v) {
        for (int i = x + 1; i <= n; i += i & -i) {
            a[i - 1] = a[i - 1] + v;
        }
    }
        T sum(int x) {
        T ans{};
        for (int i = x; i > 0; i -= i & -i) {
            ans = ans + a[i - 1];
        }
        return ans;
    }
        T rangeSum(int l, int r) {
        return sum(r) - sum(l);
    }
        int select(const T &k) {
        int x = 0;
        T cur{};
        for (int i = 1 << std::__lg(n); i; i /= 2) {
            if (x + i <= n && cur + a[x + i - 1] <= k) {
                x += i;
                cur = cur + a[x - 1];
            }
        }
        return x;
    }
};
 i64 inv(std::vector<int> p) {
    int n = p.size();
    Fenwick<int> fen(n);
    i64 sum = 0;
    for (int i = 0; i < n; i++) {
        sum += fen.rangeSum(p[i] + 1, n);
        fen.add(p[i], 1);
    }
    return sum;
}
 void solve() {
    int n;
    i64 k;
    std::cin >> n >> k;
        std::vector<int> p(n);
    for (int i = 0; i < n; i++) {
        std::cin >> p[i];
        p[i]--;
    }
        i64 invp = inv(p);
    if (k < invp || k > 1LL * n * (n - 1) - invp || (k - invp) % 2 != 0) {
        std::cout << "NO\n";
        return;
    }
        i64 lo = 0, hi = 1LL * n * (n - 1) / 2;
    i64 flo = invp, fhi = 1LL * n * (n - 1) - invp;
        auto getq = [&](i64 k) {
        int j = 0;
        while (k >= j) {
            k -= j;
            j++;
        }
        std::vector<int> q(n);
        std::iota(q.begin(), q.end(), 0);
        std::reverse(q.begin(), q.begin() + j);
        while (k > 0) {
            std::swap(q[j], q[j - 1]);
            j--;
            k--;
        }
        std::vector<int> invq(n);
        for (int i = 0; i < n; i++) {
            invq[q[i]] = i;
        }
        return invq;
    };
        std::vector<int> q(n);
    if (flo == k) {
        q = getq(lo);
    } else if (fhi == k) {
        q = getq(hi);
    } else {
        while (true) {
            i64 m = (lo + hi) / 2;
            q = getq(m);
            std::vector<int> qp(n);
            for (int i = 0; i < n; i++) {
                qp[i] = q[p[i]];
            }
            i64 fm = inv(q) + inv(qp);
            if (fm == k) {
                break;
            }
            if (fm > k) {
                hi = m;
                fhi = fm;
            } else {
                lo = m;
                flo = fm;
            }
        }
    }
        std::cout << "YES\n";
    for (int i = 0; i < n; i++) {
        std::cout << q[i] + 1 << " \n"[i == n - 1];
    }
}
 int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
        int t;
    std::cin >> t;
        while (t--) {
        solve();
    }
        return 0;
}